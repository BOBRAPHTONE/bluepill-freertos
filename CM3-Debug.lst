
bin/Debug/CM3:     file format elf32-littlearm


Disassembly of section .text:

08000110 <Gpio-0x14>:
 8000110:	0800b0c8 	.word	0x0800b0c8
 8000114:	20000000 	.word	0x20000000
 8000118:	2000000c 	.word	0x2000000c
 800011c:	20000010 	.word	0x20000010
 8000120:	20001550 	.word	0x20001550

08000124 <Gpio>:




    // OutPut
    RCC->APB2ENR |= 0x10;
 8000124:	4a06      	ldr	r2, [pc, #24]	; (8000140 <Gpio+0x1c>)
 8000126:	4b06      	ldr	r3, [pc, #24]	; (8000140 <Gpio+0x1c>)
 8000128:	699b      	ldr	r3, [r3, #24]
 800012a:	f043 0310 	orr.w	r3, r3, #16
 800012e:	6193      	str	r3, [r2, #24]
    GPIOC->CRH |= (OUT << 20);
 8000130:	4a04      	ldr	r2, [pc, #16]	; (8000144 <Gpio+0x20>)
 8000132:	4b04      	ldr	r3, [pc, #16]	; (8000144 <Gpio+0x20>)
 8000134:	685b      	ldr	r3, [r3, #4]
 8000136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800013a:	6053      	str	r3, [r2, #4]





}
 800013c:	bf00      	nop
 800013e:	4770      	bx	lr
 8000140:	40021000 	.word	0x40021000
 8000144:	40011000 	.word	0x40011000

08000148 <vBlink>:
void SystemClock_Config(void);
static void Error_Handler(void);


void vBlink( void *pvParameters )
{
 8000148:	b500      	push	{lr}
 800014a:	b085      	sub	sp, #20
 800014c:	9001      	str	r0, [sp, #4]

const TickType_t xDelay250ms = pdMS_TO_TICKS( 1000 );
 800014e:	2364      	movs	r3, #100	; 0x64
 8000150:	9303      	str	r3, [sp, #12]


 for( ;; )
 {
        ToogleLED;
 8000152:	4a05      	ldr	r2, [pc, #20]	; (8000168 <vBlink+0x20>)
 8000154:	4b04      	ldr	r3, [pc, #16]	; (8000168 <vBlink+0x20>)
 8000156:	68db      	ldr	r3, [r3, #12]
 8000158:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800015c:	60d3      	str	r3, [r2, #12]
        vTaskDelay( xDelay250ms );
 800015e:	9803      	ldr	r0, [sp, #12]
 8000160:	f001 feb2 	bl	8001ec8 <vTaskDelay>
        ToogleLED;
 8000164:	e7f5      	b.n	8000152 <vBlink+0xa>
 8000166:	bf00      	nop
 8000168:	40011000 	.word	0x40011000

0800016c <main>:
}



void main(void)
{
 800016c:	b500      	push	{lr}
 800016e:	b083      	sub	sp, #12


    SystemClock_Config();
 8000170:	f000 f814 	bl	800019c <SystemClock_Config>
    Gpio();
 8000174:	f7ff ffd6 	bl	8000124 <Gpio>


    xTaskCreate( vBlink,  "LEDBlink", 1000,  NULL,  1,  NULL );
 8000178:	2300      	movs	r3, #0
 800017a:	9301      	str	r3, [sp, #4]
 800017c:	2301      	movs	r3, #1
 800017e:	9300      	str	r3, [sp, #0]
 8000180:	2300      	movs	r3, #0
 8000182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000186:	4903      	ldr	r1, [pc, #12]	; (8000194 <main+0x28>)
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <main+0x2c>)
 800018a:	f001 fca7 	bl	8001adc <xTaskCreate>


    vTaskStartScheduler();
 800018e:	f002 f945 	bl	800241c <vTaskStartScheduler>


 for( ;; );
 8000192:	e7fe      	b.n	8000192 <main+0x26>
 8000194:	0800b070 	.word	0x0800b070
 8000198:	08000149 	.word	0x08000149

0800019c <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b500      	push	{lr}
 800019e:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 80001a0:	ab0b      	add	r3, sp, #44	; 0x2c
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80001ae:	ab01      	add	r3, sp, #4
 80001b0:	2228      	movs	r2, #40	; 0x28
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f00a ff52 	bl	800b05e <memset>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	9302      	str	r3, [sp, #8]
  oscinitstruct.HSEPredivValue  = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	9303      	str	r3, [sp, #12]
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	9309      	str	r3, [sp, #36]	; 0x24
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80001d8:	ab01      	add	r3, sp, #4
 80001da:	4618      	mov	r0, r3
 80001dc:	f007 f8a4 	bl	8007328 <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d000      	beq.n	80001e8 <SystemClock_Config+0x4c>
  {
    /* Initialization Error */
    while(1);
 80001e6:	e7fe      	b.n	80001e6 <SystemClock_Config+0x4a>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001e8:	230f      	movs	r3, #15
 80001ea:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	930c      	str	r3, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001fe:	ab0b      	add	r3, sp, #44	; 0x2c
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f007 fde0 	bl	8007dc8 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d000      	beq.n	8000210 <SystemClock_Config+0x74>
  {
    /* Initialization Error */
    while(1);
 800020e:	e7fe      	b.n	800020e <SystemClock_Config+0x72>
  }
}
 8000210:	bf00      	nop
 8000212:	b011      	add	sp, #68	; 0x44
 8000214:	f85d fb04 	ldr.w	pc, [sp], #4

08000218 <Error_Handler>:


static void Error_Handler(void)
{

  while (1)
 8000218:	e7fe      	b.n	8000218 <Error_Handler>

0800021a <_exit>:
  {
  }
};

void _exit (void) {while(1);};
 800021a:	e7fe      	b.n	800021a <_exit>

0800021c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800021c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800021e:	e003      	b.n	8000228 <LoopCopyDataInit>

08000220 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000222:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000224:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000226:	3104      	adds	r1, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 800022c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800022e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000230:	d3f6      	bcc.n	8000220 <CopyDataInit>
  ldr r2, =_sbss
 8000232:	4a09      	ldr	r2, [pc, #36]	; (8000258 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000234:	e002      	b.n	800023c <LoopFillZerobss>

08000236 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000238:	f842 3b04 	str.w	r3, [r2], #4

0800023c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <LoopFillZerobss+0x20>)
  cmp r2, r3
 800023e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000240:	d3f9      	bcc.n	8000236 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000242:	f000 f84f 	bl	80002e4 <SystemInit>
/* Call static constructors */
    /* bl __libc_init_array */
/* Call the application's entry point.*/
  b main
 8000246:	f7ff bf91 	b.w	800016c <main>
  bx lr
 800024a:	4770      	bx	lr
  ldr r3, =_sidata
 800024c:	0800b0c8 	.word	0x0800b0c8
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000254:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000258:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800025c:	20001550 	.word	0x20001550

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000264:	b082      	sub	sp, #8
 8000266:	4603      	mov	r3, r0
 8000268:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800026c:	4908      	ldr	r1, [pc, #32]	; (8000290 <NVIC_ClearPendingIRQ+0x2c>)
 800026e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8000272:	095b      	lsrs	r3, r3, #5
 8000274:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000278:	f002 021f 	and.w	r2, r2, #31
 800027c:	2001      	movs	r0, #1
 800027e:	fa00 f202 	lsl.w	r2, r0, r2
 8000282:	3360      	adds	r3, #96	; 0x60
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000288:	bf00      	nop
 800028a:	b002      	add	sp, #8
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000e100 	.word	0xe000e100

08000294 <RTC_IRQHandler>:
#include "stm32f1xx_it.h"
#include "main.h"


// 1 Second interrupt
void RTC_IRQHandler (void) {
 8000294:	b508      	push	{r3, lr}





NVIC_ClearPendingIRQ(RTC_IRQn);
 8000296:	2003      	movs	r0, #3
 8000298:	f7ff ffe4 	bl	8000264 <NVIC_ClearPendingIRQ>
RTC->CRL = 0;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <RTC_IRQHandler+0x14>)
 800029e:	2200      	movs	r2, #0
 80002a0:	605a      	str	r2, [r3, #4]

}
 80002a2:	bf00      	nop
 80002a4:	bd08      	pop	{r3, pc}
 80002a6:	bf00      	nop
 80002a8:	40002800 	.word	0x40002800

080002ac <NMI_Handler>:

void NMI_Handler(void)
{
}
 80002ac:	bf00      	nop
 80002ae:	4770      	bx	lr

080002b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <MemManage_Handler>

080002b2 <BusFault_Handler>:


void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <BusFault_Handler>

080002b4 <UsageFault_Handler>:


void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <UsageFault_Handler>

080002b6 <SVC_Handler>:
}


void SVC_Handler(void)
{
}
 80002b6:	bf00      	nop
 80002b8:	4770      	bx	lr

080002ba <DebugMon_Handler>:


void DebugMon_Handler(void)
{
}
 80002ba:	bf00      	nop
 80002bc:	4770      	bx	lr

080002be <PendSV_Handler>:

void PendSV_Handler(void)
{


}
 80002be:	bf00      	nop
 80002c0:	4770      	bx	lr

080002c2 <SysTick_Handler>:
void SysTick_Handler(void)
{



}
 80002c2:	bf00      	nop
 80002c4:	4770      	bx	lr

080002c6 <USB_LP_CAN1_RX0_IRQHandler>:


void USB_LP_CAN1_RX0_IRQHandler(void)
{
//  HAL_PCD_IRQHandler(&hpcd);
}
 80002c6:	bf00      	nop
 80002c8:	4770      	bx	lr
	...

080002cc <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
  __HAL_USB_WAKEUP_EXTI_CLEAR_FLAG();
 80002cc:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <USBWakeUp_IRQHandler+0xc>)
 80002ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80002d2:	615a      	str	r2, [r3, #20]
}
 80002d4:	bf00      	nop
 80002d6:	4770      	bx	lr
 80002d8:	40010400 	.word	0x40010400

080002dc <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
//  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
}
 80002dc:	bf00      	nop
 80002de:	4770      	bx	lr

080002e0 <HardFault_Handler>:
    for( ;; );
}
*/
void HardFault_Handler(void)
{
 __ASM volatile("BKPT #01");
 80002e0:	be01      	bkpt	0x0001
 for (;;);
 80002e2:	e7fe      	b.n	80002e2 <HardFault_Handler+0x2>

080002e4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002e4:	4a14      	ldr	r2, [pc, #80]	; (8000338 <SystemInit+0x54>)
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <SystemInit+0x54>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002f0:	4911      	ldr	r1, [pc, #68]	; (8000338 <SystemInit+0x54>)
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <SystemInit+0x54>)
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <SystemInit+0x58>)
 80002f8:	4013      	ands	r3, r2
 80002fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemInit+0x54>)
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <SystemInit+0x54>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <SystemInit+0x54>)
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <SystemInit+0x54>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000316:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <SystemInit+0x54>)
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <SystemInit+0x54>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000322:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <SystemInit+0x54>)
 8000326:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800032a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SystemInit+0x5c>)
 800032e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000332:	609a      	str	r2, [r3, #8]
#endif 
}
 8000334:	bf00      	nop
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000
 800033c:	f8ff0000 	.word	0xf8ff0000
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000344:	b084      	sub	sp, #16
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	9303      	str	r3, [sp, #12]
 800034a:	2300      	movs	r3, #0
 800034c:	9302      	str	r3, [sp, #8]
 800034e:	2300      	movs	r3, #0
 8000350:	9301      	str	r3, [sp, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <SystemCoreClockUpdate+0xbc>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	f003 030c 	and.w	r3, r3, #12
 800035a:	9303      	str	r3, [sp, #12]
  
  switch (tmp)
 800035c:	9b03      	ldr	r3, [sp, #12]
 800035e:	2b04      	cmp	r3, #4
 8000360:	d007      	beq.n	8000372 <SystemCoreClockUpdate+0x2e>
 8000362:	2b08      	cmp	r3, #8
 8000364:	d009      	beq.n	800037a <SystemCoreClockUpdate+0x36>
 8000366:	2b00      	cmp	r3, #0
 8000368:	d133      	bne.n	80003d2 <SystemCoreClockUpdate+0x8e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800036a:	4b26      	ldr	r3, [pc, #152]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <SystemCoreClockUpdate+0xc4>)
 800036e:	601a      	str	r2, [r3, #0]
      break;
 8000370:	e033      	b.n	80003da <SystemCoreClockUpdate+0x96>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 8000374:	4a24      	ldr	r2, [pc, #144]	; (8000408 <SystemCoreClockUpdate+0xc4>)
 8000376:	601a      	str	r2, [r3, #0]
      break;
 8000378:	e02f      	b.n	80003da <SystemCoreClockUpdate+0x96>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <SystemCoreClockUpdate+0xbc>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000382:	9302      	str	r3, [sp, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <SystemCoreClockUpdate+0xbc>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800038c:	9301      	str	r3, [sp, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18) + 2;
 800038e:	9b02      	ldr	r3, [sp, #8]
 8000390:	0c9b      	lsrs	r3, r3, #18
 8000392:	3302      	adds	r3, #2
 8000394:	9302      	str	r3, [sp, #8]
      
      if (pllsource == 0x00)
 8000396:	9b01      	ldr	r3, [sp, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d106      	bne.n	80003aa <SystemCoreClockUpdate+0x66>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800039c:	9b02      	ldr	r3, [sp, #8]
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <SystemCoreClockUpdate+0xc8>)
 80003a0:	fb02 f303 	mul.w	r3, r2, r3
 80003a4:	4a17      	ldr	r2, [pc, #92]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 80003a6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80003a8:	e017      	b.n	80003da <SystemCoreClockUpdate+0x96>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemCoreClockUpdate+0xbc>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d006      	beq.n	80003c4 <SystemCoreClockUpdate+0x80>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80003b6:	9b02      	ldr	r3, [sp, #8]
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <SystemCoreClockUpdate+0xc8>)
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	4a11      	ldr	r2, [pc, #68]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 80003c0:	6013      	str	r3, [r2, #0]
      break;
 80003c2:	e00a      	b.n	80003da <SystemCoreClockUpdate+0x96>
          SystemCoreClock = HSE_VALUE * pllmull;
 80003c4:	9b02      	ldr	r3, [sp, #8]
 80003c6:	4a10      	ldr	r2, [pc, #64]	; (8000408 <SystemCoreClockUpdate+0xc4>)
 80003c8:	fb02 f303 	mul.w	r3, r2, r3
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 80003ce:	6013      	str	r3, [r2, #0]
      break;
 80003d0:	e003      	b.n	80003da <SystemCoreClockUpdate+0x96>

    default:
      SystemCoreClock = HSI_VALUE;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <SystemCoreClockUpdate+0xc4>)
 80003d6:	601a      	str	r2, [r3, #0]
      break;
 80003d8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <SystemCoreClockUpdate+0xbc>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	091b      	lsrs	r3, r3, #4
 80003e0:	f003 030f 	and.w	r3, r3, #15
 80003e4:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <SystemCoreClockUpdate+0xcc>)
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	9303      	str	r3, [sp, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	9b03      	ldr	r3, [sp, #12]
 80003f0:	fa22 f303 	lsr.w	r3, r2, r3
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <SystemCoreClockUpdate+0xc0>)
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	b004      	add	sp, #16
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000
 8000404:	20000000 	.word	0x20000000
 8000408:	007a1200 	.word	0x007a1200
 800040c:	003d0900 	.word	0x003d0900
 8000410:	0800b0ac 	.word	0x0800b0ac

08000414 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8000414:	b500      	push	{lr}
 8000416:	b083      	sub	sp, #12
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8000418:	201c      	movs	r0, #28
 800041a:	f000 fa17 	bl	800084c <pvPortMalloc>
 800041e:	9001      	str	r0, [sp, #4]

		if( pxEventBits != NULL )
 8000420:	9b01      	ldr	r3, [sp, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d007      	beq.n	8000436 <xEventGroupCreate+0x22>
		{
			pxEventBits->uxEventBits = 0;
 8000426:	9b01      	ldr	r3, [sp, #4]
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800042c:	9b01      	ldr	r3, [sp, #4]
 800042e:	3304      	adds	r3, #4
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fafb 	bl	8000a2c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8000436:	9b01      	ldr	r3, [sp, #4]
	}
 8000438:	4618      	mov	r0, r3
 800043a:	b003      	add	sp, #12
 800043c:	f85d fb04 	ldr.w	pc, [sp], #4

08000440 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 8000440:	b500      	push	{lr}
 8000442:	b08b      	sub	sp, #44	; 0x2c
 8000444:	9003      	str	r0, [sp, #12]
 8000446:	9102      	str	r1, [sp, #8]
 8000448:	9201      	str	r2, [sp, #4]
 800044a:	9300      	str	r3, [sp, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800044c:	9b03      	ldr	r3, [sp, #12]
 800044e:	9308      	str	r3, [sp, #32]
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8000450:	2300      	movs	r3, #0
 8000452:	9307      	str	r3, [sp, #28]
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 8000454:	f002 f82e 	bl	80024b4 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 8000458:	9b08      	ldr	r3, [sp, #32]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	9306      	str	r3, [sp, #24]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 800045e:	9902      	ldr	r1, [sp, #8]
 8000460:	9803      	ldr	r0, [sp, #12]
 8000462:	f000 f922 	bl	80006aa <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000466:	9a06      	ldr	r2, [sp, #24]
 8000468:	9b02      	ldr	r3, [sp, #8]
 800046a:	431a      	orrs	r2, r3
 800046c:	9b01      	ldr	r3, [sp, #4]
 800046e:	401a      	ands	r2, r3
 8000470:	9b01      	ldr	r3, [sp, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	d10d      	bne.n	8000492 <xEventGroupSync+0x52>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000476:	9a06      	ldr	r2, [sp, #24]
 8000478:	9b02      	ldr	r3, [sp, #8]
 800047a:	4313      	orrs	r3, r2
 800047c:	9309      	str	r3, [sp, #36]	; 0x24

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800047e:	9b08      	ldr	r3, [sp, #32]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	9b01      	ldr	r3, [sp, #4]
 8000484:	43db      	mvns	r3, r3
 8000486:	401a      	ands	r2, r3
 8000488:	9b08      	ldr	r3, [sp, #32]
 800048a:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	e011      	b.n	80004b6 <xEventGroupSync+0x76>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 8000492:	9b00      	ldr	r3, [sp, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d00b      	beq.n	80004b0 <xEventGroupSync+0x70>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8000498:	9b08      	ldr	r3, [sp, #32]
 800049a:	1d18      	adds	r0, r3, #4
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80004a2:	9a00      	ldr	r2, [sp, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	f002 fa5b 	bl	8002960 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	9309      	str	r3, [sp, #36]	; 0x24
 80004ae:	e002      	b.n	80004b6 <xEventGroupSync+0x76>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80004b0:	9b08      	ldr	r3, [sp, #32]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	9309      	str	r3, [sp, #36]	; 0x24
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80004b6:	f002 f807 	bl	80024c8 <xTaskResumeAll>
 80004ba:	9005      	str	r0, [sp, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 80004bc:	9b00      	ldr	r3, [sp, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d02c      	beq.n	800051c <xEventGroupSync+0xdc>
	{
		if( xAlreadyYielded == pdFALSE )
 80004c2:	9b05      	ldr	r3, [sp, #20]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d107      	bne.n	80004d8 <xEventGroupSync+0x98>
		{
			portYIELD_WITHIN_API();
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <xEventGroupSync+0xe8>)
 80004ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	f3bf 8f4f 	dsb	sy
 80004d4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80004d8:	f002 fe86 	bl	80031e8 <uxTaskResetEventItemValue>
 80004dc:	9009      	str	r0, [sp, #36]	; 0x24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80004de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80004e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d115      	bne.n	8000514 <xEventGroupSync+0xd4>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 80004e8:	f000 fbc0 	bl	8000c6c <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 80004ec:	9b08      	ldr	r3, [sp, #32]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	9309      	str	r3, [sp, #36]	; 0x24

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80004f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80004f4:	9b01      	ldr	r3, [sp, #4]
 80004f6:	401a      	ands	r2, r3
 80004f8:	9b01      	ldr	r3, [sp, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d106      	bne.n	800050c <xEventGroupSync+0xcc>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004fe:	9b08      	ldr	r3, [sp, #32]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	9b01      	ldr	r3, [sp, #4]
 8000504:	43db      	mvns	r3, r3
 8000506:	401a      	ands	r2, r3
 8000508:	9b08      	ldr	r3, [sp, #32]
 800050a:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800050c:	f000 fbc2 	bl	8000c94 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
 8000510:	2301      	movs	r3, #1
 8000512:	9307      	str	r3, [sp, #28]
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000516:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800051a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
 800051c:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 800051e:	4618      	mov	r0, r3
 8000520:	b00b      	add	sp, #44	; 0x2c
 8000522:	f85d fb04 	ldr.w	pc, [sp], #4
 8000526:	bf00      	nop
 8000528:	e000ed04 	.word	0xe000ed04

0800052c <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800052c:	b500      	push	{lr}
 800052e:	b08d      	sub	sp, #52	; 0x34
 8000530:	9003      	str	r0, [sp, #12]
 8000532:	9102      	str	r1, [sp, #8]
 8000534:	9201      	str	r2, [sp, #4]
 8000536:	9300      	str	r3, [sp, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8000538:	9b03      	ldr	r3, [sp, #12]
 800053a:	9309      	str	r3, [sp, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	930a      	str	r3, [sp, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8000540:	2300      	movs	r3, #0
 8000542:	9308      	str	r3, [sp, #32]
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
 8000544:	f001 ffb6 	bl	80024b4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8000548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	9307      	str	r3, [sp, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800054e:	9a00      	ldr	r2, [sp, #0]
 8000550:	9902      	ldr	r1, [sp, #8]
 8000552:	9807      	ldr	r0, [sp, #28]
 8000554:	f000 f94c 	bl	80007f0 <prvTestWaitCondition>
 8000558:	9006      	str	r0, [sp, #24]

		if( xWaitConditionMet != pdFALSE )
 800055a:	9b06      	ldr	r3, [sp, #24]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00e      	beq.n	800057e <xEventGroupWaitBits+0x52>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8000560:	9b07      	ldr	r3, [sp, #28]
 8000562:	930b      	str	r3, [sp, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
 8000564:	2300      	movs	r3, #0
 8000566:	930e      	str	r3, [sp, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d026      	beq.n	80005bc <xEventGroupWaitBits+0x90>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	9b02      	ldr	r3, [sp, #8]
 8000574:	43db      	mvns	r3, r3
 8000576:	401a      	ands	r2, r3
 8000578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	e01e      	b.n	80005bc <xEventGroupWaitBits+0x90>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800057e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <xEventGroupWaitBits+0x5e>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8000584:	9b07      	ldr	r3, [sp, #28]
 8000586:	930b      	str	r3, [sp, #44]	; 0x2c
 8000588:	e018      	b.n	80005bc <xEventGroupWaitBits+0x90>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <xEventGroupWaitBits+0x6c>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8000590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000596:	930a      	str	r3, [sp, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8000598:	9b00      	ldr	r3, [sp, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d003      	beq.n	80005a6 <xEventGroupWaitBits+0x7a>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800059e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005a4:	930a      	str	r3, [sp, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80005a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80005a8:	1d18      	adds	r0, r3, #4
 80005aa:	9a02      	ldr	r2, [sp, #8]
 80005ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005ae:	4313      	orrs	r3, r2
 80005b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80005b2:	4619      	mov	r1, r3
 80005b4:	f002 f9d4 	bl	8002960 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	930b      	str	r3, [sp, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80005bc:	f001 ff84 	bl	80024c8 <xTaskResumeAll>
 80005c0:	9005      	str	r0, [sp, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
 80005c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d031      	beq.n	800062c <xEventGroupWaitBits+0x100>
	{
		if( xAlreadyYielded == pdFALSE )
 80005c8:	9b05      	ldr	r3, [sp, #20]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d107      	bne.n	80005de <xEventGroupWaitBits+0xb2>
		{
			portYIELD_WITHIN_API();
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <xEventGroupWaitBits+0x10c>)
 80005d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80005de:	f002 fe03 	bl	80031e8 <uxTaskResetEventItemValue>
 80005e2:	900b      	str	r0, [sp, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80005e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80005e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d11a      	bne.n	8000624 <xEventGroupWaitBits+0xf8>
		{
			taskENTER_CRITICAL();
 80005ee:	f000 fb3d 	bl	8000c6c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80005f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	930b      	str	r3, [sp, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80005f8:	9a00      	ldr	r2, [sp, #0]
 80005fa:	9902      	ldr	r1, [sp, #8]
 80005fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80005fe:	f000 f8f7 	bl	80007f0 <prvTestWaitCondition>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d009      	beq.n	800061c <xEventGroupWaitBits+0xf0>
				{
					if( xClearOnExit != pdFALSE )
 8000608:	9b01      	ldr	r3, [sp, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <xEventGroupWaitBits+0xf0>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800060e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	9b02      	ldr	r3, [sp, #8]
 8000614:	43db      	mvns	r3, r3
 8000616:	401a      	ands	r2, r3
 8000618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800061a:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800061c:	f000 fb3a 	bl	8000c94 <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
 8000620:	2300      	movs	r3, #0
 8000622:	9308      	str	r3, [sp, #32]
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000626:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800062a:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
 800062c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 800062e:	4618      	mov	r0, r3
 8000630:	b00d      	add	sp, #52	; 0x34
 8000632:	f85d fb04 	ldr.w	pc, [sp], #4
 8000636:	bf00      	nop
 8000638:	e000ed04 	.word	0xe000ed04

0800063c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800063c:	b500      	push	{lr}
 800063e:	b085      	sub	sp, #20
 8000640:	9001      	str	r0, [sp, #4]
 8000642:	9100      	str	r1, [sp, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8000644:	9b01      	ldr	r3, [sp, #4]
 8000646:	9303      	str	r3, [sp, #12]
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
 8000648:	f000 fb10 	bl	8000c6c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800064c:	9b03      	ldr	r3, [sp, #12]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	9302      	str	r3, [sp, #8]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000652:	9b03      	ldr	r3, [sp, #12]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	9b00      	ldr	r3, [sp, #0]
 8000658:	43db      	mvns	r3, r3
 800065a:	401a      	ands	r2, r3
 800065c:	9b03      	ldr	r3, [sp, #12]
 800065e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8000660:	f000 fb18 	bl	8000c94 <vPortExitCritical>

	return uxReturn;
 8000664:	9b02      	ldr	r3, [sp, #8]
}
 8000666:	4618      	mov	r0, r3
 8000668:	b005      	add	sp, #20
 800066a:	f85d fb04 	ldr.w	pc, [sp], #4

0800066e <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800066e:	b088      	sub	sp, #32
 8000670:	9001      	str	r0, [sp, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8000672:	9b01      	ldr	r3, [sp, #4]
 8000674:	9307      	str	r3, [sp, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000676:	f3ef 8211 	mrs	r2, BASEPRI
 800067a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	9203      	str	r2, [sp, #12]
 800068c:	9302      	str	r3, [sp, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800068e:	9b03      	ldr	r3, [sp, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000690:	9306      	str	r3, [sp, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8000692:	9b07      	ldr	r3, [sp, #28]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	9305      	str	r3, [sp, #20]
 8000698:	9b06      	ldr	r3, [sp, #24]
 800069a:	9304      	str	r3, [sp, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800069c:	9b04      	ldr	r3, [sp, #16]
 800069e:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80006a2:	9b05      	ldr	r3, [sp, #20]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	b008      	add	sp, #32
 80006a8:	4770      	bx	lr

080006aa <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80006aa:	b500      	push	{lr}
 80006ac:	b08d      	sub	sp, #52	; 0x34
 80006ae:	9001      	str	r0, [sp, #4]
 80006b0:	9100      	str	r1, [sp, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80006b2:	2300      	movs	r3, #0
 80006b4:	930a      	str	r3, [sp, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80006b6:	9b01      	ldr	r3, [sp, #4]
 80006b8:	9308      	str	r3, [sp, #32]
BaseType_t xMatchFound = pdFALSE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	9309      	str	r3, [sp, #36]	; 0x24
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80006be:	9b08      	ldr	r3, [sp, #32]
 80006c0:	3304      	adds	r3, #4
 80006c2:	9307      	str	r3, [sp, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80006c4:	9b07      	ldr	r3, [sp, #28]
 80006c6:	3308      	adds	r3, #8
 80006c8:	9306      	str	r3, [sp, #24]
	vTaskSuspendAll();
 80006ca:	f001 fef3 	bl	80024b4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80006ce:	9b07      	ldr	r3, [sp, #28]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	930b      	str	r3, [sp, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80006d4:	9b08      	ldr	r3, [sp, #32]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	9b00      	ldr	r3, [sp, #0]
 80006da:	431a      	orrs	r2, r3
 80006dc:	9b08      	ldr	r3, [sp, #32]
 80006de:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80006e0:	e03c      	b.n	800075c <xEventGroupSetBits+0xb2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80006e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	9305      	str	r3, [sp, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80006e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	9304      	str	r3, [sp, #16]
			xMatchFound = pdFALSE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	9309      	str	r3, [sp, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80006f2:	9b04      	ldr	r3, [sp, #16]
 80006f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80006f8:	9303      	str	r3, [sp, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80006fa:	9b04      	ldr	r3, [sp, #16]
 80006fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000700:	9304      	str	r3, [sp, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000702:	9b03      	ldr	r3, [sp, #12]
 8000704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d108      	bne.n	800071e <xEventGroupSetBits+0x74>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800070c:	9b08      	ldr	r3, [sp, #32]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	9b04      	ldr	r3, [sp, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00b      	beq.n	8000730 <xEventGroupSetBits+0x86>
				{
					xMatchFound = pdTRUE;
 8000718:	2301      	movs	r3, #1
 800071a:	9309      	str	r3, [sp, #36]	; 0x24
 800071c:	e008      	b.n	8000730 <xEventGroupSetBits+0x86>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800071e:	9b08      	ldr	r3, [sp, #32]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	9b04      	ldr	r3, [sp, #16]
 8000724:	401a      	ands	r2, r3
 8000726:	9b04      	ldr	r3, [sp, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <xEventGroupSetBits+0x86>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800072c:	2301      	movs	r3, #1
 800072e:	9309      	str	r3, [sp, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8000730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000732:	2b00      	cmp	r3, #0
 8000734:	d010      	beq.n	8000758 <xEventGroupSetBits+0xae>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000736:	9b03      	ldr	r3, [sp, #12]
 8000738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <xEventGroupSetBits+0x9e>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8000740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000742:	9b04      	ldr	r3, [sp, #16]
 8000744:	4313      	orrs	r3, r2
 8000746:	930a      	str	r3, [sp, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000748:	9b08      	ldr	r3, [sp, #32]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000750:	4619      	mov	r1, r3
 8000752:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000754:	f002 f974 	bl	8002a40 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8000758:	9b05      	ldr	r3, [sp, #20]
 800075a:	930b      	str	r3, [sp, #44]	; 0x2c
		while( pxListItem != pxListEnd )
 800075c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800075e:	9b06      	ldr	r3, [sp, #24]
 8000760:	429a      	cmp	r2, r3
 8000762:	d1be      	bne.n	80006e2 <xEventGroupSetBits+0x38>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000764:	9b08      	ldr	r3, [sp, #32]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800076a:	43db      	mvns	r3, r3
 800076c:	401a      	ands	r2, r3
 800076e:	9b08      	ldr	r3, [sp, #32]
 8000770:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8000772:	f001 fea9 	bl	80024c8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8000776:	9b08      	ldr	r3, [sp, #32]
 8000778:	681b      	ldr	r3, [r3, #0]
}
 800077a:	4618      	mov	r0, r3
 800077c:	b00d      	add	sp, #52	; 0x34
 800077e:	f85d fb04 	ldr.w	pc, [sp], #4

08000782 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8000782:	b500      	push	{lr}
 8000784:	b085      	sub	sp, #20
 8000786:	9001      	str	r0, [sp, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8000788:	9b01      	ldr	r3, [sp, #4]
 800078a:	9303      	str	r3, [sp, #12]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800078c:	9b03      	ldr	r3, [sp, #12]
 800078e:	3304      	adds	r3, #4
 8000790:	9302      	str	r3, [sp, #8]

	vTaskSuspendAll();
 8000792:	f001 fe8f 	bl	80024b4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8000796:	e006      	b.n	80007a6 <vEventGroupDelete+0x24>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8000798:	9b02      	ldr	r3, [sp, #8]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 f94d 	bl	8002a40 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80007a6:	9b02      	ldr	r3, [sp, #8]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f4      	bne.n	8000798 <vEventGroupDelete+0x16>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 80007ae:	9803      	ldr	r0, [sp, #12]
 80007b0:	f000 f8d8 	bl	8000964 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 80007b4:	f001 fe88 	bl	80024c8 <xTaskResumeAll>
}
 80007b8:	bf00      	nop
 80007ba:	b005      	add	sp, #20
 80007bc:	f85d fb04 	ldr.w	pc, [sp], #4

080007c0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80007c0:	b500      	push	{lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	9001      	str	r0, [sp, #4]
 80007c6:	9100      	str	r1, [sp, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80007c8:	9900      	ldr	r1, [sp, #0]
 80007ca:	9801      	ldr	r0, [sp, #4]
 80007cc:	f7ff ff6d 	bl	80006aa <xEventGroupSetBits>
}
 80007d0:	bf00      	nop
 80007d2:	b003      	add	sp, #12
 80007d4:	f85d fb04 	ldr.w	pc, [sp], #4

080007d8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80007d8:	b500      	push	{lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	9001      	str	r0, [sp, #4]
 80007de:	9100      	str	r1, [sp, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80007e0:	9900      	ldr	r1, [sp, #0]
 80007e2:	9801      	ldr	r0, [sp, #4]
 80007e4:	f7ff ff2a 	bl	800063c <xEventGroupClearBits>
}
 80007e8:	bf00      	nop
 80007ea:	b003      	add	sp, #12
 80007ec:	f85d fb04 	ldr.w	pc, [sp], #4

080007f0 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80007f0:	b086      	sub	sp, #24
 80007f2:	9003      	str	r0, [sp, #12]
 80007f4:	9102      	str	r1, [sp, #8]
 80007f6:	9201      	str	r2, [sp, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	9305      	str	r3, [sp, #20]

	if( xWaitForAllBits == pdFALSE )
 80007fc:	9b01      	ldr	r3, [sp, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d107      	bne.n	8000812 <prvTestWaitCondition+0x22>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000802:	9a03      	ldr	r2, [sp, #12]
 8000804:	9b02      	ldr	r3, [sp, #8]
 8000806:	4013      	ands	r3, r2
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00a      	beq.n	8000822 <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
 800080c:	2301      	movs	r3, #1
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	e007      	b.n	8000822 <prvTestWaitCondition+0x32>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000812:	9a03      	ldr	r2, [sp, #12]
 8000814:	9b02      	ldr	r3, [sp, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	9b02      	ldr	r3, [sp, #8]
 800081a:	429a      	cmp	r2, r3
 800081c:	d101      	bne.n	8000822 <prvTestWaitCondition+0x32>
		{
			xWaitConditionMet = pdTRUE;
 800081e:	2301      	movs	r3, #1
 8000820:	9305      	str	r3, [sp, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8000822:	9b05      	ldr	r3, [sp, #20]
}
 8000824:	4618      	mov	r0, r3
 8000826:	b006      	add	sp, #24
 8000828:	4770      	bx	lr

0800082a <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
 800082a:	b084      	sub	sp, #16
 800082c:	9001      	str	r0, [sp, #4]
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800082e:	9b01      	ldr	r3, [sp, #4]
 8000830:	9302      	str	r3, [sp, #8]

		if( xEventGroup == NULL )
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <uxEventGroupGetNumber+0x14>
		{
			xReturn = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	9303      	str	r3, [sp, #12]
 800083c:	e002      	b.n	8000844 <uxEventGroupGetNumber+0x1a>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 800083e:	9b02      	ldr	r3, [sp, #8]
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	9303      	str	r3, [sp, #12]
		}

		return xReturn;
 8000844:	9b03      	ldr	r3, [sp, #12]
	}
 8000846:	4618      	mov	r0, r3
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr

0800084c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800084c:	b500      	push	{lr}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	9001      	str	r0, [sp, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8000852:	2300      	movs	r3, #0
 8000854:	9305      	str	r3, [sp, #20]

	vTaskSuspendAll();
 8000856:	f001 fe2d 	bl	80024b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <pvPortMalloc+0x108>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <pvPortMalloc+0x20>
		{
			prvHeapInit();
 8000862:	f000 f8bf 	bl	80009e4 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <pvPortMalloc+0x108>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800086c:	9b01      	ldr	r3, [sp, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d00e      	beq.n	8000890 <pvPortMalloc+0x44>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000872:	2308      	movs	r3, #8
 8000874:	461a      	mov	r2, r3
 8000876:	9b01      	ldr	r3, [sp, #4]
 8000878:	4413      	add	r3, r2
 800087a:	9301      	str	r3, [sp, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800087c:	9b01      	ldr	r3, [sp, #4]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <pvPortMalloc+0x44>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000886:	9b01      	ldr	r3, [sp, #4]
 8000888:	f023 0307 	bic.w	r3, r3, #7
 800088c:	3308      	adds	r3, #8
 800088e:	9301      	str	r3, [sp, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8000890:	9b01      	ldr	r3, [sp, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d057      	beq.n	8000946 <pvPortMalloc+0xfa>
 8000896:	9b01      	ldr	r3, [sp, #4]
 8000898:	f241 32f7 	movw	r2, #5111	; 0x13f7
 800089c:	4293      	cmp	r3, r2
 800089e:	d852      	bhi.n	8000946 <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <pvPortMalloc+0x10c>)
 80008a2:	9306      	str	r3, [sp, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <pvPortMalloc+0x10c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80008aa:	e004      	b.n	80008b6 <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
 80008ac:	9b07      	ldr	r3, [sp, #28]
 80008ae:	9306      	str	r3, [sp, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80008b0:	9b07      	ldr	r3, [sp, #28]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	9307      	str	r3, [sp, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80008b6:	9b07      	ldr	r3, [sp, #28]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	9b01      	ldr	r3, [sp, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d203      	bcs.n	80008c8 <pvPortMalloc+0x7c>
 80008c0:	9b07      	ldr	r3, [sp, #28]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f1      	bne.n	80008ac <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80008c8:	9b07      	ldr	r3, [sp, #28]
 80008ca:	4a24      	ldr	r2, [pc, #144]	; (800095c <pvPortMalloc+0x110>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d03a      	beq.n	8000946 <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80008d0:	9b06      	ldr	r3, [sp, #24]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2208      	movs	r2, #8
 80008d6:	4413      	add	r3, r2
 80008d8:	9305      	str	r3, [sp, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80008da:	9b07      	ldr	r3, [sp, #28]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	9b06      	ldr	r3, [sp, #24]
 80008e0:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80008e2:	9b07      	ldr	r3, [sp, #28]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	9b01      	ldr	r3, [sp, #4]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	2208      	movs	r2, #8
 80008ec:	0052      	lsls	r2, r2, #1
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d922      	bls.n	8000938 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80008f2:	9a07      	ldr	r2, [sp, #28]
 80008f4:	9b01      	ldr	r3, [sp, #4]
 80008f6:	4413      	add	r3, r2
 80008f8:	9303      	str	r3, [sp, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80008fa:	9b07      	ldr	r3, [sp, #28]
 80008fc:	685a      	ldr	r2, [r3, #4]
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	1ad2      	subs	r2, r2, r3
 8000902:	9b03      	ldr	r3, [sp, #12]
 8000904:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8000906:	9b07      	ldr	r3, [sp, #28]
 8000908:	9a01      	ldr	r2, [sp, #4]
 800090a:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800090c:	9b03      	ldr	r3, [sp, #12]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <pvPortMalloc+0x10c>)
 8000914:	9304      	str	r3, [sp, #16]
 8000916:	e002      	b.n	800091e <pvPortMalloc+0xd2>
 8000918:	9b04      	ldr	r3, [sp, #16]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	9304      	str	r3, [sp, #16]
 800091e:	9b04      	ldr	r3, [sp, #16]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	9b02      	ldr	r3, [sp, #8]
 8000926:	429a      	cmp	r2, r3
 8000928:	d3f6      	bcc.n	8000918 <pvPortMalloc+0xcc>
 800092a:	9b04      	ldr	r3, [sp, #16]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	9b03      	ldr	r3, [sp, #12]
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	9b04      	ldr	r3, [sp, #16]
 8000934:	9a03      	ldr	r2, [sp, #12]
 8000936:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <pvPortMalloc+0x114>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	9b07      	ldr	r3, [sp, #28]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	4a07      	ldr	r2, [pc, #28]	; (8000960 <pvPortMalloc+0x114>)
 8000944:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000946:	f001 fdbf 	bl	80024c8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800094a:	9b05      	ldr	r3, [sp, #20]
}
 800094c:	4618      	mov	r0, r3
 800094e:	b009      	add	sp, #36	; 0x24
 8000950:	f85d fb04 	ldr.w	pc, [sp], #4
 8000954:	20001420 	.word	0x20001420
 8000958:	20001410 	.word	0x20001410
 800095c:	20001418 	.word	0x20001418
 8000960:	20000004 	.word	0x20000004

08000964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000964:	b500      	push	{lr}
 8000966:	b087      	sub	sp, #28
 8000968:	9001      	str	r0, [sp, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800096a:	9b01      	ldr	r3, [sp, #4]
 800096c:	9304      	str	r3, [sp, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800096e:	9b01      	ldr	r3, [sp, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d027      	beq.n	80009c4 <vPortFree+0x60>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8000974:	2308      	movs	r3, #8
 8000976:	425b      	negs	r3, r3
 8000978:	9a04      	ldr	r2, [sp, #16]
 800097a:	4413      	add	r3, r2
 800097c:	9304      	str	r3, [sp, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800097e:	9b04      	ldr	r3, [sp, #16]
 8000980:	9303      	str	r3, [sp, #12]

		vTaskSuspendAll();
 8000982:	f001 fd97 	bl	80024b4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000986:	9b03      	ldr	r3, [sp, #12]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <vPortFree+0x68>)
 800098e:	9305      	str	r3, [sp, #20]
 8000990:	e002      	b.n	8000998 <vPortFree+0x34>
 8000992:	9b05      	ldr	r3, [sp, #20]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	9305      	str	r3, [sp, #20]
 8000998:	9b05      	ldr	r3, [sp, #20]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	9b02      	ldr	r3, [sp, #8]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3f6      	bcc.n	8000992 <vPortFree+0x2e>
 80009a4:	9b05      	ldr	r3, [sp, #20]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	9b03      	ldr	r3, [sp, #12]
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	9b05      	ldr	r3, [sp, #20]
 80009ae:	9a03      	ldr	r2, [sp, #12]
 80009b0:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80009b2:	9b03      	ldr	r3, [sp, #12]
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <vPortFree+0x6c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <vPortFree+0x6c>)
 80009be:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80009c0:	f001 fd82 	bl	80024c8 <xTaskResumeAll>
	}
}
 80009c4:	bf00      	nop
 80009c6:	b007      	add	sp, #28
 80009c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80009cc:	20001410 	.word	0x20001410
 80009d0:	20000004 	.word	0x20000004

080009d4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
 80009d4:	4b01      	ldr	r3, [pc, #4]	; (80009dc <xPortGetFreeHeapSize+0x8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	4770      	bx	lr
 80009dc:	20000004 	.word	0x20000004

080009e0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
 80009e0:	bf00      	nop
 80009e2:	4770      	bx	lr

080009e4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009e4:	b082      	sub	sp, #8
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <prvHeapInit+0x3c>)
 80009e8:	f023 0307 	bic.w	r3, r3, #7
 80009ec:	9301      	str	r3, [sp, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ee:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <prvHeapInit+0x40>)
 80009f0:	9b01      	ldr	r3, [sp, #4]
 80009f2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <prvHeapInit+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <prvHeapInit+0x44>)
 80009fc:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8000a00:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <prvHeapInit+0x44>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a08:	9b01      	ldr	r3, [sp, #4]
 8000a0a:	9300      	str	r3, [sp, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000a0c:	9b00      	ldr	r3, [sp, #0]
 8000a0e:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8000a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000a14:	9b00      	ldr	r3, [sp, #0]
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <prvHeapInit+0x44>)
 8000a18:	601a      	str	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	b002      	add	sp, #8
 8000a1e:	4770      	bx	lr
 8000a20:	20000018 	.word	0x20000018
 8000a24:	20001410 	.word	0x20001410
 8000a28:	20001418 	.word	0x20001418

08000a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	9001      	str	r0, [sp, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a30:	9b01      	ldr	r3, [sp, #4]
 8000a32:	f103 0208 	add.w	r2, r3, #8
 8000a36:	9b01      	ldr	r3, [sp, #4]
 8000a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a3a:	9b01      	ldr	r3, [sp, #4]
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a42:	9b01      	ldr	r3, [sp, #4]
 8000a44:	f103 0208 	add.w	r2, r3, #8
 8000a48:	9b01      	ldr	r3, [sp, #4]
 8000a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a4c:	9b01      	ldr	r3, [sp, #4]
 8000a4e:	f103 0208 	add.w	r2, r3, #8
 8000a52:	9b01      	ldr	r3, [sp, #4]
 8000a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a56:	9b01      	ldr	r3, [sp, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a5c:	bf00      	nop
 8000a5e:	b002      	add	sp, #8
 8000a60:	4770      	bx	lr

08000a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a62:	b082      	sub	sp, #8
 8000a64:	9001      	str	r0, [sp, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000a66:	9b01      	ldr	r3, [sp, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a6c:	bf00      	nop
 8000a6e:	b002      	add	sp, #8
 8000a70:	4770      	bx	lr

08000a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a72:	b084      	sub	sp, #16
 8000a74:	9001      	str	r0, [sp, #4]
 8000a76:	9100      	str	r1, [sp, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a78:	9b01      	ldr	r3, [sp, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	9303      	str	r3, [sp, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a7e:	9b00      	ldr	r3, [sp, #0]
 8000a80:	9a03      	ldr	r2, [sp, #12]
 8000a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a84:	9b03      	ldr	r3, [sp, #12]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	9b00      	ldr	r3, [sp, #0]
 8000a8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a8c:	9b03      	ldr	r3, [sp, #12]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	9a00      	ldr	r2, [sp, #0]
 8000a92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a94:	9b03      	ldr	r3, [sp, #12]
 8000a96:	9a00      	ldr	r2, [sp, #0]
 8000a98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000a9a:	9b00      	ldr	r3, [sp, #0]
 8000a9c:	9a01      	ldr	r2, [sp, #4]
 8000a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000aa0:	9b01      	ldr	r3, [sp, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	9b01      	ldr	r3, [sp, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	9001      	str	r0, [sp, #4]
 8000ab4:	9100      	str	r1, [sp, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ab6:	9b00      	ldr	r3, [sp, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	9302      	str	r3, [sp, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000abc:	9b02      	ldr	r3, [sp, #8]
 8000abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ac2:	d103      	bne.n	8000acc <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ac4:	9b01      	ldr	r3, [sp, #4]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	e00c      	b.n	8000ae6 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000acc:	9b01      	ldr	r3, [sp, #4]
 8000ace:	3308      	adds	r3, #8
 8000ad0:	9303      	str	r3, [sp, #12]
 8000ad2:	e002      	b.n	8000ada <vListInsert+0x2a>
 8000ad4:	9b03      	ldr	r3, [sp, #12]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	9303      	str	r3, [sp, #12]
 8000ada:	9b03      	ldr	r3, [sp, #12]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	9b02      	ldr	r3, [sp, #8]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d9f6      	bls.n	8000ad4 <vListInsert+0x24>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000ae6:	9b03      	ldr	r3, [sp, #12]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	9b00      	ldr	r3, [sp, #0]
 8000aec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000aee:	9b00      	ldr	r3, [sp, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	9a00      	ldr	r2, [sp, #0]
 8000af4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000af6:	9b00      	ldr	r3, [sp, #0]
 8000af8:	9a03      	ldr	r2, [sp, #12]
 8000afa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000afc:	9b03      	ldr	r3, [sp, #12]
 8000afe:	9a00      	ldr	r2, [sp, #0]
 8000b00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000b02:	9b00      	ldr	r3, [sp, #0]
 8000b04:	9a01      	ldr	r2, [sp, #4]
 8000b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	9b01      	ldr	r3, [sp, #4]
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b18:	b084      	sub	sp, #16
 8000b1a:	9001      	str	r0, [sp, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000b1c:	9b01      	ldr	r3, [sp, #4]
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	9303      	str	r3, [sp, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b22:	9b01      	ldr	r3, [sp, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	9a01      	ldr	r2, [sp, #4]
 8000b28:	6892      	ldr	r2, [r2, #8]
 8000b2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b2c:	9b01      	ldr	r3, [sp, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	9a01      	ldr	r2, [sp, #4]
 8000b32:	6852      	ldr	r2, [r2, #4]
 8000b34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b36:	9b03      	ldr	r3, [sp, #12]
 8000b38:	685a      	ldr	r2, [r3, #4]
 8000b3a:	9b01      	ldr	r3, [sp, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d103      	bne.n	8000b48 <uxListRemove+0x30>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b40:	9b01      	ldr	r3, [sp, #4]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	9b03      	ldr	r3, [sp, #12]
 8000b46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000b48:	9b01      	ldr	r3, [sp, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b4e:	9b03      	ldr	r3, [sp, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	9b03      	ldr	r3, [sp, #12]
 8000b56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b58:	9b03      	ldr	r3, [sp, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	b004      	add	sp, #16
 8000b60:	4770      	bx	lr
	...

08000b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000b64:	b084      	sub	sp, #16
 8000b66:	9003      	str	r0, [sp, #12]
 8000b68:	9102      	str	r1, [sp, #8]
 8000b6a:	9201      	str	r2, [sp, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000b6c:	9b03      	ldr	r3, [sp, #12]
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000b72:	9b03      	ldr	r3, [sp, #12]
 8000b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b7a:	9b03      	ldr	r3, [sp, #12]
 8000b7c:	3b04      	subs	r3, #4
 8000b7e:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000b80:	9b02      	ldr	r3, [sp, #8]
 8000b82:	f023 0201 	bic.w	r2, r3, #1
 8000b86:	9b03      	ldr	r3, [sp, #12]
 8000b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b8a:	9b03      	ldr	r3, [sp, #12]
 8000b8c:	3b04      	subs	r3, #4
 8000b8e:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <pxPortInitialiseStack+0x4c>)
 8000b92:	9b03      	ldr	r3, [sp, #12]
 8000b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000b96:	9b03      	ldr	r3, [sp, #12]
 8000b98:	3b14      	subs	r3, #20
 8000b9a:	9303      	str	r3, [sp, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000b9c:	9a01      	ldr	r2, [sp, #4]
 8000b9e:	9b03      	ldr	r3, [sp, #12]
 8000ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	3b20      	subs	r3, #32
 8000ba6:	9303      	str	r3, [sp, #12]

	return pxTopOfStack;
 8000ba8:	9b03      	ldr	r3, [sp, #12]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr
 8000bb0:	08000bb5 	.word	0x08000bb5

08000bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000bb4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
	__asm volatile
 8000bba:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000bbe:	f383 8811 	msr	BASEPRI, r3
 8000bc2:	f3bf 8f6f 	isb	sy
 8000bc6:	f3bf 8f4f 	dsb	sy
 8000bca:	9301      	str	r3, [sp, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000bcc:	bf00      	nop
 8000bce:	9b00      	ldr	r3, [sp, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0fc      	beq.n	8000bce <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	b002      	add	sp, #8
 8000bd8:	4770      	bx	lr
 8000bda:	0000      	movs	r0, r0
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <pxCurrentTCBConst2>)
 8000be2:	6819      	ldr	r1, [r3, #0]
 8000be4:	6808      	ldr	r0, [r1, #0]
 8000be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000bea:	f380 8809 	msr	PSP, r0
 8000bee:	f3bf 8f6f 	isb	sy
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	f380 8811 	msr	BASEPRI, r0
 8000bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8000bfe:	4770      	bx	lr

08000c00 <pxCurrentTCBConst2>:
 8000c00:	20001424 	.word	0x20001424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop

08000c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <prvPortStartFirstTask+0x1c>)
 8000c0a:	6800      	ldr	r0, [r0, #0]
 8000c0c:	6800      	ldr	r0, [r0, #0]
 8000c0e:	f380 8808 	msr	MSP, r0
 8000c12:	b662      	cpsie	i
 8000c14:	b661      	cpsie	f
 8000c16:	f3bf 8f4f 	dsb	sy
 8000c1a:	f3bf 8f6f 	isb	sy
 8000c1e:	df00      	svc	0
 8000c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000c22:	bf00      	nop
 8000c24:	e000ed08 	.word	0xe000ed08

08000c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000c28:	b508      	push	{r3, lr}
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <xPortStartScheduler+0x38>)
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <xPortStartScheduler+0x38>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000c34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <xPortStartScheduler+0x38>)
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <xPortStartScheduler+0x38>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000c40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000c42:	f000 f881 	bl	8000d48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <xPortStartScheduler+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000c4c:	f7ff ffdc 	bl	8000c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000c50:	f001 fe2c 	bl	80028ac <vTaskSwitchContext>
	prvTaskExitError();
 8000c54:	f7ff ffae 	bl	8000bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd08      	pop	{r3, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000ed20 	.word	0xe000ed20
 8000c64:	20000008 	.word	0x20000008

08000c68 <vPortEndScheduler>:
void vPortEndScheduler( void )
{
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
}
 8000c68:	bf00      	nop
 8000c6a:	4770      	bx	lr

08000c6c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000c72:	f383 8811 	msr	BASEPRI, r3
 8000c76:	f3bf 8f6f 	isb	sy
 8000c7a:	f3bf 8f4f 	dsb	sy
 8000c7e:	9301      	str	r3, [sp, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <vPortEnterCritical+0x24>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a02      	ldr	r2, [pc, #8]	; (8000c90 <vPortEnterCritical+0x24>)
 8000c88:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	b002      	add	sp, #8
 8000c8e:	4770      	bx	lr
 8000c90:	20000008 	.word	0x20000008

08000c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000c94:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <vPortExitCritical+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <vPortExitCritical+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <vPortExitCritical+0x24>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <vPortExitCritical+0x1e>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9301      	str	r3, [sp, #4]
	__asm volatile
 8000cac:	9b01      	ldr	r3, [sp, #4]
 8000cae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	b002      	add	sp, #8
 8000cb6:	4770      	bx	lr
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000cc0:	f3ef 8009 	mrs	r0, PSP
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <pxCurrentTCBConst>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000cd0:	6010      	str	r0, [r2, #0]
 8000cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000cd6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000cda:	f380 8811 	msr	BASEPRI, r0
 8000cde:	f001 fde5 	bl	80028ac <vTaskSwitchContext>
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	f380 8811 	msr	BASEPRI, r0
 8000cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cee:	6819      	ldr	r1, [r3, #0]
 8000cf0:	6808      	ldr	r0, [r1, #0]
 8000cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000cf6:	f380 8809 	msr	PSP, r0
 8000cfa:	f3bf 8f6f 	isb	sy
 8000cfe:	4770      	bx	lr

08000d00 <pxCurrentTCBConst>:
 8000d00:	20001424 	.word	0x20001424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop

08000d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000d08:	b500      	push	{lr}
 8000d0a:	b083      	sub	sp, #12
	__asm volatile
 8000d0c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d10:	f383 8811 	msr	BASEPRI, r3
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	f3bf 8f4f 	dsb	sy
 8000d1c:	9301      	str	r3, [sp, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000d1e:	f001 fd19 	bl	8002754 <xTaskIncrementTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <xPortSysTickHandler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <xPortSysTickHandler+0x3c>)
 8000d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
	__asm volatile
 8000d34:	9b00      	ldr	r3, [sp, #0]
 8000d36:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000d3a:	bf00      	nop
 8000d3c:	b003      	add	sp, #12
 8000d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d42:	bf00      	nop
 8000d44:	e000ed04 	.word	0xe000ed04

08000d48 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <vPortSetupTimerInterrupt+0x1c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <vPortSetupTimerInterrupt+0x20>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <vPortSetupTimerInterrupt+0x24>)
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <vPortSetupTimerInterrupt+0x28>)
 8000d58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000d5a:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <vPortSetupTimerInterrupt+0x1c>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	4770      	bx	lr
 8000d64:	e000e010 	.word	0xe000e010
 8000d68:	e000e018 	.word	0xe000e018
 8000d6c:	e000e014 	.word	0xe000e014
 8000d70:	000afc7f 	.word	0x000afc7f

08000d74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d74:	b500      	push	{lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	9001      	str	r0, [sp, #4]
 8000d7a:	9100      	str	r1, [sp, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000d7c:	9b01      	ldr	r3, [sp, #4]
 8000d7e:	9303      	str	r3, [sp, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8000d80:	f7ff ff74 	bl	8000c6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000d84:	9b03      	ldr	r3, [sp, #12]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	9b03      	ldr	r3, [sp, #12]
 8000d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8c:	9903      	ldr	r1, [sp, #12]
 8000d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	9b03      	ldr	r3, [sp, #12]
 8000d98:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d9a:	9b03      	ldr	r3, [sp, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000da0:	9b03      	ldr	r3, [sp, #12]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	9b03      	ldr	r3, [sp, #12]
 8000da6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000da8:	9b03      	ldr	r3, [sp, #12]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	9b03      	ldr	r3, [sp, #12]
 8000dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db0:	3b01      	subs	r3, #1
 8000db2:	9903      	ldr	r1, [sp, #12]
 8000db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000db6:	fb01 f303 	mul.w	r3, r1, r3
 8000dba:	441a      	add	r2, r3
 8000dbc:	9b03      	ldr	r3, [sp, #12]
 8000dbe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000dc0:	9b03      	ldr	r3, [sp, #12]
 8000dc2:	22ff      	movs	r2, #255	; 0xff
 8000dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000dc8:	9b03      	ldr	r3, [sp, #12]
 8000dca:	22ff      	movs	r2, #255	; 0xff
 8000dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000dd0:	9b00      	ldr	r3, [sp, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d114      	bne.n	8000e00 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dd6:	9b03      	ldr	r3, [sp, #12]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d01a      	beq.n	8000e14 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dde:	9b03      	ldr	r3, [sp, #12]
 8000de0:	3310      	adds	r3, #16
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fdd8 	bl	8002998 <xTaskRemoveFromEventList>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d012      	beq.n	8000e14 <xQueueGenericReset+0xa0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <xQueueGenericReset+0xb0>)
 8000df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	f3bf 8f4f 	dsb	sy
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	e009      	b.n	8000e14 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e00:	9b03      	ldr	r3, [sp, #12]
 8000e02:	3310      	adds	r3, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe11 	bl	8000a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000e0a:	9b03      	ldr	r3, [sp, #12]
 8000e0c:	3324      	adds	r3, #36	; 0x24
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe0c 	bl	8000a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000e14:	f7ff ff3e 	bl	8000c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop
 8000e24:	e000ed04 	.word	0xe000ed04

08000e28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000e28:	b500      	push	{lr}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	9005      	str	r0, [sp, #20]
 8000e2e:	9104      	str	r1, [sp, #16]
 8000e30:	4613      	mov	r3, r2
 8000e32:	f88d 300f 	strb.w	r3, [sp, #15]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000e36:	9b04      	ldr	r3, [sp, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e40:	e004      	b.n	8000e4c <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e42:	9b05      	ldr	r3, [sp, #20]
 8000e44:	9a04      	ldr	r2, [sp, #16]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	9309      	str	r3, [sp, #36]	; 0x24
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e4e:	3350      	adds	r3, #80	; 0x50
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fcfb 	bl	800084c <pvPortMalloc>
 8000e56:	9008      	str	r0, [sp, #32]

		if( pxNewQueue != NULL )
 8000e58:	9b08      	ldr	r3, [sp, #32]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00c      	beq.n	8000e78 <xQueueGenericCreate+0x50>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000e5e:	9b08      	ldr	r3, [sp, #32]
 8000e60:	3350      	adds	r3, #80	; 0x50
 8000e62:	9307      	str	r3, [sp, #28]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e64:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000e68:	9b08      	ldr	r3, [sp, #32]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	9a07      	ldr	r2, [sp, #28]
 8000e70:	9904      	ldr	r1, [sp, #16]
 8000e72:	9805      	ldr	r0, [sp, #20]
 8000e74:	f000 f805 	bl	8000e82 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8000e78:	9b08      	ldr	r3, [sp, #32]
	}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	b00b      	add	sp, #44	; 0x2c
 8000e7e:	f85d fb04 	ldr.w	pc, [sp], #4

08000e82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e82:	b500      	push	{lr}
 8000e84:	b085      	sub	sp, #20
 8000e86:	9003      	str	r0, [sp, #12]
 8000e88:	9102      	str	r1, [sp, #8]
 8000e8a:	9201      	str	r2, [sp, #4]
 8000e8c:	f88d 3003 	strb.w	r3, [sp, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000e90:	9b02      	ldr	r3, [sp, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e96:	9b06      	ldr	r3, [sp, #24]
 8000e98:	9a06      	ldr	r2, [sp, #24]
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e002      	b.n	8000ea4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e9e:	9b06      	ldr	r3, [sp, #24]
 8000ea0:	9a01      	ldr	r2, [sp, #4]
 8000ea2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000ea4:	9b06      	ldr	r3, [sp, #24]
 8000ea6:	9a03      	ldr	r2, [sp, #12]
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000eaa:	9b06      	ldr	r3, [sp, #24]
 8000eac:	9a02      	ldr	r2, [sp, #8]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	9806      	ldr	r0, [sp, #24]
 8000eb4:	f7ff ff5e 	bl	8000d74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000eb8:	9b06      	ldr	r3, [sp, #24]
 8000eba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000ebe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ec2:	bf00      	nop
 8000ec4:	b005      	add	sp, #20
 8000ec6:	f85d fb04 	ldr.w	pc, [sp], #4

08000eca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8000eca:	b500      	push	{lr}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	9001      	str	r0, [sp, #4]
		if( pxNewQueue != NULL )
 8000ed0:	9b01      	ldr	r3, [sp, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <prvInitialiseMutex+0x2a>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8000ed6:	9b01      	ldr	r3, [sp, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000edc:	9b01      	ldr	r3, [sp, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8000ee2:	9b01      	ldr	r3, [sp, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	9801      	ldr	r0, [sp, #4]
 8000ef0:	f000 f87c 	bl	8000fec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8000ef4:	bf00      	nop
 8000ef6:	b003      	add	sp, #12
 8000ef8:	f85d fb04 	ldr.w	pc, [sp], #4

08000efc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8000efc:	b500      	push	{lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	4603      	mov	r3, r0
 8000f02:	f88d 3007 	strb.w	r3, [sp, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000f06:	2301      	movs	r3, #1
 8000f08:	9305      	str	r3, [sp, #20]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9304      	str	r3, [sp, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000f0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f12:	461a      	mov	r2, r3
 8000f14:	9904      	ldr	r1, [sp, #16]
 8000f16:	9805      	ldr	r0, [sp, #20]
 8000f18:	f7ff ff86 	bl	8000e28 <xQueueGenericCreate>
 8000f1c:	9003      	str	r0, [sp, #12]
		prvInitialiseMutex( pxNewQueue );
 8000f1e:	9803      	ldr	r0, [sp, #12]
 8000f20:	f7ff ffd3 	bl	8000eca <prvInitialiseMutex>

		return pxNewQueue;
 8000f24:	9b03      	ldr	r3, [sp, #12]
	}
 8000f26:	4618      	mov	r0, r3
 8000f28:	b007      	add	sp, #28
 8000f2a:	f85d fb04 	ldr.w	pc, [sp], #4

08000f2e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8000f2e:	b510      	push	{r4, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000f34:	9b01      	ldr	r3, [sp, #4]
 8000f36:	9302      	str	r3, [sp, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8000f38:	9b02      	ldr	r3, [sp, #8]
 8000f3a:	685c      	ldr	r4, [r3, #4]
 8000f3c:	f001 ffe6 	bl	8002f0c <xTaskGetCurrentTaskHandle>
 8000f40:	4603      	mov	r3, r0
 8000f42:	429c      	cmp	r4, r3
 8000f44:	d111      	bne.n	8000f6a <xQueueGiveMutexRecursive+0x3c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8000f46:	9b02      	ldr	r3, [sp, #8]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	9b02      	ldr	r3, [sp, #8]
 8000f4e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8000f50:	9b02      	ldr	r3, [sp, #8]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <xQueueGiveMutexRecursive+0x36>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	9802      	ldr	r0, [sp, #8]
 8000f60:	f000 f844 	bl	8000fec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8000f64:	2301      	movs	r3, #1
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	e001      	b.n	8000f6e <xQueueGiveMutexRecursive+0x40>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9303      	str	r3, [sp, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8000f6e:	9b03      	ldr	r3, [sp, #12]
	}
 8000f70:	4618      	mov	r0, r3
 8000f72:	b004      	add	sp, #16
 8000f74:	bd10      	pop	{r4, pc}

08000f76 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8000f76:	b510      	push	{r4, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	9001      	str	r0, [sp, #4]
 8000f7c:	9100      	str	r1, [sp, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	9302      	str	r3, [sp, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000f82:	9b02      	ldr	r3, [sp, #8]
 8000f84:	685c      	ldr	r4, [r3, #4]
 8000f86:	f001 ffc1 	bl	8002f0c <xTaskGetCurrentTaskHandle>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	429c      	cmp	r4, r3
 8000f8e:	d107      	bne.n	8000fa0 <xQueueTakeMutexRecursive+0x2a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8000f90:	9b02      	ldr	r3, [sp, #8]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	9b02      	ldr	r3, [sp, #8]
 8000f98:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9303      	str	r3, [sp, #12]
 8000f9e:	e00c      	b.n	8000fba <xQueueTakeMutexRecursive+0x44>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8000fa0:	9900      	ldr	r1, [sp, #0]
 8000fa2:	9802      	ldr	r0, [sp, #8]
 8000fa4:	f000 fa16 	bl	80013d4 <xQueueSemaphoreTake>
 8000fa8:	9003      	str	r0, [sp, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8000faa:	9b03      	ldr	r3, [sp, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <xQueueTakeMutexRecursive+0x44>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8000fb0:	9b02      	ldr	r3, [sp, #8]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	9b02      	ldr	r3, [sp, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8000fba:	9b03      	ldr	r3, [sp, #12]
	}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd10      	pop	{r4, pc}

08000fc2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8000fc2:	b500      	push	{lr}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	9001      	str	r0, [sp, #4]
 8000fc8:	9100      	str	r1, [sp, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000fca:	2202      	movs	r2, #2
 8000fcc:	2100      	movs	r1, #0
 8000fce:	9801      	ldr	r0, [sp, #4]
 8000fd0:	f7ff ff2a 	bl	8000e28 <xQueueGenericCreate>
 8000fd4:	9003      	str	r0, [sp, #12]

		if( xHandle != NULL )
 8000fd6:	9b03      	ldr	r3, [sp, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <xQueueCreateCountingSemaphore+0x20>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000fdc:	9b03      	ldr	r3, [sp, #12]
 8000fde:	9a00      	ldr	r2, [sp, #0]
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8000fe2:	9b03      	ldr	r3, [sp, #12]
	}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	b005      	add	sp, #20
 8000fe8:	f85d fb04 	ldr.w	pc, [sp], #4

08000fec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000fec:	b500      	push	{lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
 8000ff0:	9003      	str	r0, [sp, #12]
 8000ff2:	9102      	str	r1, [sp, #8]
 8000ff4:	9201      	str	r2, [sp, #4]
 8000ff6:	9300      	str	r3, [sp, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000ffc:	9b03      	ldr	r3, [sp, #12]
 8000ffe:	9308      	str	r3, [sp, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001000:	f7ff fe34 	bl	8000c6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001004:	9b08      	ldr	r3, [sp, #32]
 8001006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001008:	9b08      	ldr	r3, [sp, #32]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	429a      	cmp	r2, r3
 800100e:	d302      	bcc.n	8001016 <xQueueGenericSend+0x2a>
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d129      	bne.n	800106a <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001016:	9a00      	ldr	r2, [sp, #0]
 8001018:	9902      	ldr	r1, [sp, #8]
 800101a:	9808      	ldr	r0, [sp, #32]
 800101c:	f000 fc2d 	bl	800187a <prvCopyDataToQueue>
 8001020:	9007      	str	r0, [sp, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001022:	9b08      	ldr	r3, [sp, #32]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	2b00      	cmp	r3, #0
 8001028:	d010      	beq.n	800104c <xQueueGenericSend+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800102a:	9b08      	ldr	r3, [sp, #32]
 800102c:	3324      	adds	r3, #36	; 0x24
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fcb2 	bl	8002998 <xTaskRemoveFromEventList>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d013      	beq.n	8001062 <xQueueGenericSend+0x76>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <xQueueGenericSend+0x14c>)
 800103c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	f3bf 8f4f 	dsb	sy
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	e00a      	b.n	8001062 <xQueueGenericSend+0x76>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800104c:	9b07      	ldr	r3, [sp, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <xQueueGenericSend+0x76>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <xQueueGenericSend+0x14c>)
 8001054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001062:	f7ff fe17 	bl	8000c94 <vPortExitCritical>
				return pdPASS;
 8001066:	2301      	movs	r3, #1
 8001068:	e061      	b.n	800112e <xQueueGenericSend+0x142>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001070:	f7ff fe10 	bl	8000c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001074:	2300      	movs	r3, #0
 8001076:	e05a      	b.n	800112e <xQueueGenericSend+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800107a:	2b00      	cmp	r3, #0
 800107c:	d105      	bne.n	800108a <xQueueGenericSend+0x9e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800107e:	ab05      	add	r3, sp, #20
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fd37 	bl	8002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001086:	2301      	movs	r3, #1
 8001088:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800108a:	f7ff fe03 	bl	8000c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800108e:	f001 fa11 	bl	80024b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001092:	f7ff fdeb 	bl	8000c6c <vPortEnterCritical>
 8001096:	9b08      	ldr	r3, [sp, #32]
 8001098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800109c:	b25b      	sxtb	r3, r3
 800109e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a2:	d103      	bne.n	80010ac <xQueueGenericSend+0xc0>
 80010a4:	9b08      	ldr	r3, [sp, #32]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010ac:	9b08      	ldr	r3, [sp, #32]
 80010ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b8:	d103      	bne.n	80010c2 <xQueueGenericSend+0xd6>
 80010ba:	9b08      	ldr	r3, [sp, #32]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010c2:	f7ff fde7 	bl	8000c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010c6:	aa01      	add	r2, sp, #4
 80010c8:	ab05      	add	r3, sp, #20
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fd23 	bl	8002b18 <xTaskCheckForTimeOut>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d124      	bne.n	8001122 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80010d8:	9808      	ldr	r0, [sp, #32]
 80010da:	f000 fcd7 	bl	8001a8c <prvIsQueueFull>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d018      	beq.n	8001116 <xQueueGenericSend+0x12a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80010e4:	9b08      	ldr	r3, [sp, #32]
 80010e6:	3310      	adds	r3, #16
 80010e8:	9a01      	ldr	r2, [sp, #4]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fc21 	bl	8002934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80010f2:	9808      	ldr	r0, [sp, #32]
 80010f4:	f000 fc4f 	bl	8001996 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80010f8:	f001 f9e6 	bl	80024c8 <xTaskResumeAll>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f af7e 	bne.w	8001000 <xQueueGenericSend+0x14>
				{
					portYIELD_WITHIN_API();
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <xQueueGenericSend+0x14c>)
 8001106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	f3bf 8f6f 	isb	sy
 8001114:	e774      	b.n	8001000 <xQueueGenericSend+0x14>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001116:	9808      	ldr	r0, [sp, #32]
 8001118:	f000 fc3d 	bl	8001996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800111c:	f001 f9d4 	bl	80024c8 <xTaskResumeAll>
 8001120:	e76e      	b.n	8001000 <xQueueGenericSend+0x14>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001122:	9808      	ldr	r0, [sp, #32]
 8001124:	f000 fc37 	bl	8001996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001128:	f001 f9ce 	bl	80024c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800112c:	2300      	movs	r3, #0
		}
	}
}
 800112e:	4618      	mov	r0, r3
 8001130:	b00b      	add	sp, #44	; 0x2c
 8001132:	f85d fb04 	ldr.w	pc, [sp], #4
 8001136:	bf00      	nop
 8001138:	e000ed04 	.word	0xe000ed04

0800113c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800113c:	b500      	push	{lr}
 800113e:	b08d      	sub	sp, #52	; 0x34
 8001140:	9003      	str	r0, [sp, #12]
 8001142:	9102      	str	r1, [sp, #8]
 8001144:	9201      	str	r2, [sp, #4]
 8001146:	9300      	str	r3, [sp, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	930a      	str	r3, [sp, #40]	; 0x28
	__asm volatile
 800114c:	f3ef 8211 	mrs	r2, BASEPRI
 8001150:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f3bf 8f6f 	isb	sy
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	9207      	str	r2, [sp, #28]
 8001162:	9306      	str	r3, [sp, #24]
	return ulOriginalBASEPRI;
 8001164:	9b07      	ldr	r3, [sp, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001166:	9309      	str	r3, [sp, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800116a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800116c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	429a      	cmp	r2, r3
 8001172:	d302      	bcc.n	800117a <xQueueGenericSendFromISR+0x3e>
 8001174:	9b00      	ldr	r3, [sp, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d12c      	bne.n	80011d4 <xQueueGenericSendFromISR+0x98>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800117a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800117c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001180:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001184:	9a00      	ldr	r2, [sp, #0]
 8001186:	9902      	ldr	r1, [sp, #8]
 8001188:	980a      	ldr	r0, [sp, #40]	; 0x28
 800118a:	f000 fb76 	bl	800187a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800118e:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
 8001192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001196:	d112      	bne.n	80011be <xQueueGenericSendFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <xQueueGenericSendFromISR+0x92>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011a2:	3324      	adds	r3, #36	; 0x24
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fbf7 	bl	8002998 <xTaskRemoveFromEventList>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00e      	beq.n	80011ce <xQueueGenericSendFromISR+0x92>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80011b0:	9b01      	ldr	r3, [sp, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <xQueueGenericSendFromISR+0x92>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80011b6:	9b01      	ldr	r3, [sp, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	e007      	b.n	80011ce <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80011be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	b25a      	sxtb	r2, r3
 80011c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80011ce:	2301      	movs	r3, #1
 80011d0:	930b      	str	r3, [sp, #44]	; 0x2c
		{
 80011d2:	e001      	b.n	80011d8 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80011d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011da:	9305      	str	r3, [sp, #20]
	__asm volatile
 80011dc:	9b05      	ldr	r3, [sp, #20]
 80011de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80011e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	b00d      	add	sp, #52	; 0x34
 80011e8:	f85d fb04 	ldr.w	pc, [sp], #4

080011ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80011ec:	b500      	push	{lr}
 80011ee:	b08b      	sub	sp, #44	; 0x2c
 80011f0:	9001      	str	r0, [sp, #4]
 80011f2:	9100      	str	r1, [sp, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80011f4:	9b01      	ldr	r3, [sp, #4]
 80011f6:	9308      	str	r3, [sp, #32]
	__asm volatile
 80011f8:	f3ef 8211 	mrs	r2, BASEPRI
 80011fc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001200:	f383 8811 	msr	BASEPRI, r3
 8001204:	f3bf 8f6f 	isb	sy
 8001208:	f3bf 8f4f 	dsb	sy
 800120c:	9204      	str	r2, [sp, #16]
 800120e:	9303      	str	r3, [sp, #12]
	return ulOriginalBASEPRI;
 8001210:	9b04      	ldr	r3, [sp, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001212:	9307      	str	r3, [sp, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001214:	9b08      	ldr	r3, [sp, #32]
 8001216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001218:	9306      	str	r3, [sp, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800121a:	9b08      	ldr	r3, [sp, #32]
 800121c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800121e:	9b06      	ldr	r3, [sp, #24]
 8001220:	429a      	cmp	r2, r3
 8001222:	d92b      	bls.n	800127c <xQueueGiveFromISR+0x90>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001224:	9b08      	ldr	r3, [sp, #32]
 8001226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800122a:	f88d 3017 	strb.w	r3, [sp, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800122e:	9b06      	ldr	r3, [sp, #24]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	9b08      	ldr	r3, [sp, #32]
 8001234:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001236:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 800123a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800123e:	d112      	bne.n	8001266 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001240:	9b08      	ldr	r3, [sp, #32]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2b00      	cmp	r3, #0
 8001246:	d016      	beq.n	8001276 <xQueueGiveFromISR+0x8a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001248:	9b08      	ldr	r3, [sp, #32]
 800124a:	3324      	adds	r3, #36	; 0x24
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fba3 	bl	8002998 <xTaskRemoveFromEventList>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <xQueueGiveFromISR+0x8a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001258:	9b00      	ldr	r3, [sp, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <xQueueGiveFromISR+0x8a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e007      	b.n	8001276 <xQueueGiveFromISR+0x8a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001266:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800126a:	3301      	adds	r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	b25a      	sxtb	r2, r3
 8001270:	9b08      	ldr	r3, [sp, #32]
 8001272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001276:	2301      	movs	r3, #1
 8001278:	9309      	str	r3, [sp, #36]	; 0x24
 800127a:	e001      	b.n	8001280 <xQueueGiveFromISR+0x94>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800127c:	2300      	movs	r3, #0
 800127e:	9309      	str	r3, [sp, #36]	; 0x24
 8001280:	9b07      	ldr	r3, [sp, #28]
 8001282:	9302      	str	r3, [sp, #8]
	__asm volatile
 8001284:	9b02      	ldr	r3, [sp, #8]
 8001286:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800128a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 800128c:	4618      	mov	r0, r3
 800128e:	b00b      	add	sp, #44	; 0x2c
 8001290:	f85d fb04 	ldr.w	pc, [sp], #4

08001294 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001294:	b500      	push	{lr}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	9003      	str	r0, [sp, #12]
 800129a:	9102      	str	r1, [sp, #8]
 800129c:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800129e:	2300      	movs	r3, #0
 80012a0:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80012a2:	9b03      	ldr	r3, [sp, #12]
 80012a4:	9308      	str	r3, [sp, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80012a6:	f7ff fce1 	bl	8000c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012aa:	9b08      	ldr	r3, [sp, #32]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ae:	9307      	str	r3, [sp, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012b0:	9b07      	ldr	r3, [sp, #28]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d01f      	beq.n	80012f6 <xQueueReceive+0x62>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80012b6:	9902      	ldr	r1, [sp, #8]
 80012b8:	9808      	ldr	r0, [sp, #32]
 80012ba:	f000 fb47 	bl	800194c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80012be:	9b07      	ldr	r3, [sp, #28]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	9b08      	ldr	r3, [sp, #32]
 80012c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012c6:	9b08      	ldr	r3, [sp, #32]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00f      	beq.n	80012ee <xQueueReceive+0x5a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012ce:	9b08      	ldr	r3, [sp, #32]
 80012d0:	3310      	adds	r3, #16
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fb60 	bl	8002998 <xTaskRemoveFromEventList>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <xQueueReceive+0x5a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80012de:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <xQueueReceive+0x13c>)
 80012e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80012ee:	f7ff fcd1 	bl	8000c94 <vPortExitCritical>
				return pdPASS;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e067      	b.n	80013c6 <xQueueReceive+0x132>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <xQueueReceive+0x70>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80012fc:	f7ff fcca 	bl	8000c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001300:	2300      	movs	r3, #0
 8001302:	e060      	b.n	80013c6 <xQueueReceive+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001306:	2b00      	cmp	r3, #0
 8001308:	d105      	bne.n	8001316 <xQueueReceive+0x82>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800130a:	ab05      	add	r3, sp, #20
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fbf1 	bl	8002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001312:	2301      	movs	r3, #1
 8001314:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001316:	f7ff fcbd 	bl	8000c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800131a:	f001 f8cb 	bl	80024b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800131e:	f7ff fca5 	bl	8000c6c <vPortEnterCritical>
 8001322:	9b08      	ldr	r3, [sp, #32]
 8001324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001328:	b25b      	sxtb	r3, r3
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800132e:	d103      	bne.n	8001338 <xQueueReceive+0xa4>
 8001330:	9b08      	ldr	r3, [sp, #32]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001338:	9b08      	ldr	r3, [sp, #32]
 800133a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800133e:	b25b      	sxtb	r3, r3
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001344:	d103      	bne.n	800134e <xQueueReceive+0xba>
 8001346:	9b08      	ldr	r3, [sp, #32]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800134e:	f7ff fca1 	bl	8000c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001352:	aa01      	add	r2, sp, #4
 8001354:	ab05      	add	r3, sp, #20
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fbdd 	bl	8002b18 <xTaskCheckForTimeOut>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d123      	bne.n	80013ac <xQueueReceive+0x118>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001364:	9808      	ldr	r0, [sp, #32]
 8001366:	f000 fb6d 	bl	8001a44 <prvIsQueueEmpty>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d017      	beq.n	80013a0 <xQueueReceive+0x10c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001370:	9b08      	ldr	r3, [sp, #32]
 8001372:	3324      	adds	r3, #36	; 0x24
 8001374:	9a01      	ldr	r2, [sp, #4]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fadb 	bl	8002934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800137e:	9808      	ldr	r0, [sp, #32]
 8001380:	f000 fb09 	bl	8001996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001384:	f001 f8a0 	bl	80024c8 <xTaskResumeAll>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d18b      	bne.n	80012a6 <xQueueReceive+0x12>
				{
					portYIELD_WITHIN_API();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <xQueueReceive+0x13c>)
 8001390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f3bf 8f4f 	dsb	sy
 800139a:	f3bf 8f6f 	isb	sy
 800139e:	e782      	b.n	80012a6 <xQueueReceive+0x12>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80013a0:	9808      	ldr	r0, [sp, #32]
 80013a2:	f000 faf8 	bl	8001996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013a6:	f001 f88f 	bl	80024c8 <xTaskResumeAll>
 80013aa:	e77c      	b.n	80012a6 <xQueueReceive+0x12>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80013ac:	9808      	ldr	r0, [sp, #32]
 80013ae:	f000 faf2 	bl	8001996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013b2:	f001 f889 	bl	80024c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013b6:	9808      	ldr	r0, [sp, #32]
 80013b8:	f000 fb44 	bl	8001a44 <prvIsQueueEmpty>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f43f af71 	beq.w	80012a6 <xQueueReceive+0x12>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80013c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	b00b      	add	sp, #44	; 0x2c
 80013ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ce:	bf00      	nop
 80013d0:	e000ed04 	.word	0xe000ed04

080013d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80013d4:	b500      	push	{lr}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	9001      	str	r0, [sp, #4]
 80013da:	9100      	str	r1, [sp, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80013dc:	2300      	movs	r3, #0
 80013de:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	9307      	str	r3, [sp, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	9308      	str	r3, [sp, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80013e8:	f7ff fc40 	bl	8000c6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80013ec:	9b07      	ldr	r3, [sp, #28]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f0:	9306      	str	r3, [sp, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80013f2:	9b06      	ldr	r3, [sp, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d024      	beq.n	8001442 <xQueueSemaphoreTake+0x6e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80013f8:	9b06      	ldr	r3, [sp, #24]
 80013fa:	1e5a      	subs	r2, r3, #1
 80013fc:	9b07      	ldr	r3, [sp, #28]
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001400:	9b07      	ldr	r3, [sp, #28]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <xQueueSemaphoreTake+0x3e>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001408:	f001 ff02 	bl	8003210 <pvTaskIncrementMutexHeldCount>
 800140c:	4602      	mov	r2, r0
 800140e:	9b07      	ldr	r3, [sp, #28]
 8001410:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001412:	9b07      	ldr	r3, [sp, #28]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00f      	beq.n	800143a <xQueueSemaphoreTake+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800141a:	9b07      	ldr	r3, [sp, #28]
 800141c:	3310      	adds	r3, #16
 800141e:	4618      	mov	r0, r3
 8001420:	f001 faba 	bl	8002998 <xTaskRemoveFromEventList>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <xQueueSemaphoreTake+0x66>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800142a:	4b4c      	ldr	r3, [pc, #304]	; (800155c <xQueueSemaphoreTake+0x188>)
 800142c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f3bf 8f4f 	dsb	sy
 8001436:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800143a:	f7ff fc2b 	bl	8000c94 <vPortExitCritical>
				return pdPASS;
 800143e:	2301      	movs	r3, #1
 8001440:	e087      	b.n	8001552 <xQueueSemaphoreTake+0x17e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001442:	9b00      	ldr	r3, [sp, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <xQueueSemaphoreTake+0x7c>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001448:	f7ff fc24 	bl	8000c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800144c:	2300      	movs	r3, #0
 800144e:	e080      	b.n	8001552 <xQueueSemaphoreTake+0x17e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	d105      	bne.n	8001462 <xQueueSemaphoreTake+0x8e>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001456:	ab03      	add	r3, sp, #12
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fb4b 	bl	8002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800145e:	2301      	movs	r3, #1
 8001460:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001462:	f7ff fc17 	bl	8000c94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001466:	f001 f825 	bl	80024b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800146a:	f7ff fbff 	bl	8000c6c <vPortEnterCritical>
 800146e:	9b07      	ldr	r3, [sp, #28]
 8001470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001474:	b25b      	sxtb	r3, r3
 8001476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800147a:	d103      	bne.n	8001484 <xQueueSemaphoreTake+0xb0>
 800147c:	9b07      	ldr	r3, [sp, #28]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001484:	9b07      	ldr	r3, [sp, #28]
 8001486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800148a:	b25b      	sxtb	r3, r3
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001490:	d103      	bne.n	800149a <xQueueSemaphoreTake+0xc6>
 8001492:	9b07      	ldr	r3, [sp, #28]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800149a:	f7ff fbfb 	bl	8000c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800149e:	466a      	mov	r2, sp
 80014a0:	ab03      	add	r3, sp, #12
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fb37 	bl	8002b18 <xTaskCheckForTimeOut>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d132      	bne.n	8001516 <xQueueSemaphoreTake+0x142>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80014b0:	9807      	ldr	r0, [sp, #28]
 80014b2:	f000 fac7 	bl	8001a44 <prvIsQueueEmpty>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d026      	beq.n	800150a <xQueueSemaphoreTake+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80014bc:	9b07      	ldr	r3, [sp, #28]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <xQueueSemaphoreTake+0x104>
					{
						taskENTER_CRITICAL();
 80014c4:	f7ff fbd2 	bl	8000c6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80014c8:	9b07      	ldr	r3, [sp, #28]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fd27 	bl	8002f20 <xTaskPriorityInherit>
 80014d2:	9008      	str	r0, [sp, #32]
						}
						taskEXIT_CRITICAL();
 80014d4:	f7ff fbde 	bl	8000c94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80014d8:	9b07      	ldr	r3, [sp, #28]
 80014da:	3324      	adds	r3, #36	; 0x24
 80014dc:	9a00      	ldr	r2, [sp, #0]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fa27 	bl	8002934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80014e6:	9807      	ldr	r0, [sp, #28]
 80014e8:	f000 fa55 	bl	8001996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80014ec:	f000 ffec 	bl	80024c8 <xTaskResumeAll>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f47f af78 	bne.w	80013e8 <xQueueSemaphoreTake+0x14>
				{
					portYIELD_WITHIN_API();
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <xQueueSemaphoreTake+0x188>)
 80014fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	e76e      	b.n	80013e8 <xQueueSemaphoreTake+0x14>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800150a:	9807      	ldr	r0, [sp, #28]
 800150c:	f000 fa43 	bl	8001996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001510:	f000 ffda 	bl	80024c8 <xTaskResumeAll>
 8001514:	e768      	b.n	80013e8 <xQueueSemaphoreTake+0x14>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001516:	9807      	ldr	r0, [sp, #28]
 8001518:	f000 fa3d 	bl	8001996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800151c:	f000 ffd4 	bl	80024c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001520:	9807      	ldr	r0, [sp, #28]
 8001522:	f000 fa8f 	bl	8001a44 <prvIsQueueEmpty>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f43f af5d 	beq.w	80013e8 <xQueueSemaphoreTake+0x14>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800152e:	9b08      	ldr	r3, [sp, #32]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00d      	beq.n	8001550 <xQueueSemaphoreTake+0x17c>
					{
						taskENTER_CRITICAL();
 8001534:	f7ff fb9a 	bl	8000c6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001538:	9807      	ldr	r0, [sp, #28]
 800153a:	f000 f98b 	bl	8001854 <prvGetDisinheritPriorityAfterTimeout>
 800153e:	9005      	str	r0, [sp, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8001540:	9b07      	ldr	r3, [sp, #28]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	9905      	ldr	r1, [sp, #20]
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fdd2 	bl	80030f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800154c:	f7ff fba2 	bl	8000c94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001552:	4618      	mov	r0, r3
 8001554:	b00b      	add	sp, #44	; 0x2c
 8001556:	f85d fb04 	ldr.w	pc, [sp], #4
 800155a:	bf00      	nop
 800155c:	e000ed04 	.word	0xe000ed04

08001560 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001560:	b500      	push	{lr}
 8001562:	b08b      	sub	sp, #44	; 0x2c
 8001564:	9003      	str	r0, [sp, #12]
 8001566:	9102      	str	r1, [sp, #8]
 8001568:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800156a:	2300      	movs	r3, #0
 800156c:	9309      	str	r3, [sp, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800156e:	9b03      	ldr	r3, [sp, #12]
 8001570:	9308      	str	r3, [sp, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001572:	f7ff fb7b 	bl	8000c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001576:	9b08      	ldr	r3, [sp, #32]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	9307      	str	r3, [sp, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800157c:	9b07      	ldr	r3, [sp, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d021      	beq.n	80015c6 <xQueuePeek+0x66>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001582:	9b08      	ldr	r3, [sp, #32]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	9306      	str	r3, [sp, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001588:	9902      	ldr	r1, [sp, #8]
 800158a:	9808      	ldr	r0, [sp, #32]
 800158c:	f000 f9de 	bl	800194c <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001590:	9b08      	ldr	r3, [sp, #32]
 8001592:	9a06      	ldr	r2, [sp, #24]
 8001594:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001596:	9b08      	ldr	r3, [sp, #32]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00f      	beq.n	80015be <xQueuePeek+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800159e:	9b08      	ldr	r3, [sp, #32]
 80015a0:	3324      	adds	r3, #36	; 0x24
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 f9f8 	bl	8002998 <xTaskRemoveFromEventList>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <xQueuePeek+0x5e>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80015ae:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <xQueuePeek+0x140>)
 80015b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f3bf 8f4f 	dsb	sy
 80015ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80015be:	f7ff fb69 	bl	8000c94 <vPortExitCritical>
				return pdPASS;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e067      	b.n	8001696 <xQueuePeek+0x136>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80015c6:	9b01      	ldr	r3, [sp, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <xQueuePeek+0x74>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80015cc:	f7ff fb62 	bl	8000c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e060      	b.n	8001696 <xQueuePeek+0x136>
				}
				else if( xEntryTimeSet == pdFALSE )
 80015d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <xQueuePeek+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80015da:	ab04      	add	r3, sp, #16
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fa89 	bl	8002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	9309      	str	r3, [sp, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80015e6:	f7ff fb55 	bl	8000c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80015ea:	f000 ff63 	bl	80024b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80015ee:	f7ff fb3d 	bl	8000c6c <vPortEnterCritical>
 80015f2:	9b08      	ldr	r3, [sp, #32]
 80015f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015fe:	d103      	bne.n	8001608 <xQueuePeek+0xa8>
 8001600:	9b08      	ldr	r3, [sp, #32]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001608:	9b08      	ldr	r3, [sp, #32]
 800160a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001614:	d103      	bne.n	800161e <xQueuePeek+0xbe>
 8001616:	9b08      	ldr	r3, [sp, #32]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800161e:	f7ff fb39 	bl	8000c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001622:	aa01      	add	r2, sp, #4
 8001624:	ab04      	add	r3, sp, #16
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f001 fa75 	bl	8002b18 <xTaskCheckForTimeOut>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d123      	bne.n	800167c <xQueuePeek+0x11c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001634:	9808      	ldr	r0, [sp, #32]
 8001636:	f000 fa05 	bl	8001a44 <prvIsQueueEmpty>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <xQueuePeek+0x110>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001640:	9b08      	ldr	r3, [sp, #32]
 8001642:	3324      	adds	r3, #36	; 0x24
 8001644:	9a01      	ldr	r2, [sp, #4]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f001 f973 	bl	8002934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800164e:	9808      	ldr	r0, [sp, #32]
 8001650:	f000 f9a1 	bl	8001996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001654:	f000 ff38 	bl	80024c8 <xTaskResumeAll>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d189      	bne.n	8001572 <xQueuePeek+0x12>
				{
					portYIELD_WITHIN_API();
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <xQueuePeek+0x140>)
 8001660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f3bf 8f4f 	dsb	sy
 800166a:	f3bf 8f6f 	isb	sy
 800166e:	e780      	b.n	8001572 <xQueuePeek+0x12>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8001670:	9808      	ldr	r0, [sp, #32]
 8001672:	f000 f990 	bl	8001996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001676:	f000 ff27 	bl	80024c8 <xTaskResumeAll>
 800167a:	e77a      	b.n	8001572 <xQueuePeek+0x12>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800167c:	9808      	ldr	r0, [sp, #32]
 800167e:	f000 f98a 	bl	8001996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001682:	f000 ff21 	bl	80024c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001686:	9808      	ldr	r0, [sp, #32]
 8001688:	f000 f9dc 	bl	8001a44 <prvIsQueueEmpty>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f43f af6f 	beq.w	8001572 <xQueuePeek+0x12>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001696:	4618      	mov	r0, r3
 8001698:	b00b      	add	sp, #44	; 0x2c
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
 800169e:	bf00      	nop
 80016a0:	e000ed04 	.word	0xe000ed04

080016a4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80016a4:	b500      	push	{lr}
 80016a6:	b08d      	sub	sp, #52	; 0x34
 80016a8:	9003      	str	r0, [sp, #12]
 80016aa:	9102      	str	r1, [sp, #8]
 80016ac:	9201      	str	r2, [sp, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80016ae:	9b03      	ldr	r3, [sp, #12]
 80016b0:	930a      	str	r3, [sp, #40]	; 0x28
	__asm volatile
 80016b2:	f3ef 8211 	mrs	r2, BASEPRI
 80016b6:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	9206      	str	r2, [sp, #24]
 80016c8:	9305      	str	r3, [sp, #20]
	return ulOriginalBASEPRI;
 80016ca:	9b06      	ldr	r3, [sp, #24]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80016cc:	9309      	str	r3, [sp, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	9308      	str	r3, [sp, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016d4:	9b08      	ldr	r3, [sp, #32]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02f      	beq.n	800173a <xQueueReceiveFromISR+0x96>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80016da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016e0:	f88d 301f 	strb.w	r3, [sp, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80016e4:	9902      	ldr	r1, [sp, #8]
 80016e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80016e8:	f000 f930 	bl	800194c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80016ec:	9b08      	ldr	r3, [sp, #32]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80016f4:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016fc:	d112      	bne.n	8001724 <xQueueReceiveFromISR+0x80>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d016      	beq.n	8001734 <xQueueReceiveFromISR+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001708:	3310      	adds	r3, #16
 800170a:	4618      	mov	r0, r3
 800170c:	f001 f944 	bl	8002998 <xTaskRemoveFromEventList>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00e      	beq.n	8001734 <xQueueReceiveFromISR+0x90>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001716:	9b01      	ldr	r3, [sp, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00b      	beq.n	8001734 <xQueueReceiveFromISR+0x90>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800171c:	9b01      	ldr	r3, [sp, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <xQueueReceiveFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001724:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001728:	3301      	adds	r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	b25a      	sxtb	r2, r3
 800172e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8001734:	2301      	movs	r3, #1
 8001736:	930b      	str	r3, [sp, #44]	; 0x2c
 8001738:	e001      	b.n	800173e <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
 800173a:	2300      	movs	r3, #0
 800173c:	930b      	str	r3, [sp, #44]	; 0x2c
 800173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001740:	9304      	str	r3, [sp, #16]
	__asm volatile
 8001742:	9b04      	ldr	r3, [sp, #16]
 8001744:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
 800174a:	4618      	mov	r0, r3
 800174c:	b00d      	add	sp, #52	; 0x34
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4

08001752 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8001752:	b500      	push	{lr}
 8001754:	b08b      	sub	sp, #44	; 0x2c
 8001756:	9001      	str	r0, [sp, #4]
 8001758:	9100      	str	r1, [sp, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800175a:	9b01      	ldr	r3, [sp, #4]
 800175c:	9308      	str	r3, [sp, #32]
	__asm volatile
 800175e:	f3ef 8211 	mrs	r2, BASEPRI
 8001762:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001766:	f383 8811 	msr	BASEPRI, r3
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	f3bf 8f4f 	dsb	sy
 8001772:	9205      	str	r2, [sp, #20]
 8001774:	9304      	str	r3, [sp, #16]
	return ulOriginalBASEPRI;
 8001776:	9b05      	ldr	r3, [sp, #20]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001778:	9307      	str	r3, [sp, #28]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800177a:	9b08      	ldr	r3, [sp, #32]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <xQueuePeekFromISR+0x4a>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001782:	9b08      	ldr	r3, [sp, #32]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	9306      	str	r3, [sp, #24]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001788:	9900      	ldr	r1, [sp, #0]
 800178a:	9808      	ldr	r0, [sp, #32]
 800178c:	f000 f8de 	bl	800194c <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001790:	9b08      	ldr	r3, [sp, #32]
 8001792:	9a06      	ldr	r2, [sp, #24]
 8001794:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8001796:	2301      	movs	r3, #1
 8001798:	9309      	str	r3, [sp, #36]	; 0x24
 800179a:	e001      	b.n	80017a0 <xQueuePeekFromISR+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800179c:	2300      	movs	r3, #0
 800179e:	9309      	str	r3, [sp, #36]	; 0x24
 80017a0:	9b07      	ldr	r3, [sp, #28]
 80017a2:	9303      	str	r3, [sp, #12]
	__asm volatile
 80017a4:	9b03      	ldr	r3, [sp, #12]
 80017a6:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80017aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	b00b      	add	sp, #44	; 0x2c
 80017b0:	f85d fb04 	ldr.w	pc, [sp], #4

080017b4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80017b4:	b500      	push	{lr}
 80017b6:	b085      	sub	sp, #20
 80017b8:	9001      	str	r0, [sp, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 80017ba:	f7ff fa57 	bl	8000c6c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80017be:	9b01      	ldr	r3, [sp, #4]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	9303      	str	r3, [sp, #12]
	}
	taskEXIT_CRITICAL();
 80017c4:	f7ff fa66 	bl	8000c94 <vPortExitCritical>

	return uxReturn;
 80017c8:	9b03      	ldr	r3, [sp, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80017ca:	4618      	mov	r0, r3
 80017cc:	b005      	add	sp, #20
 80017ce:	f85d fb04 	ldr.w	pc, [sp], #4

080017d2 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80017d2:	b500      	push	{lr}
 80017d4:	b085      	sub	sp, #20
 80017d6:	9001      	str	r0, [sp, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 80017d8:	9b01      	ldr	r3, [sp, #4]
 80017da:	9303      	str	r3, [sp, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80017dc:	f7ff fa46 	bl	8000c6c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80017e0:	9b03      	ldr	r3, [sp, #12]
 80017e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e4:	9b03      	ldr	r3, [sp, #12]
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	9302      	str	r3, [sp, #8]
	}
	taskEXIT_CRITICAL();
 80017ec:	f7ff fa52 	bl	8000c94 <vPortExitCritical>

	return uxReturn;
 80017f0:	9b02      	ldr	r3, [sp, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80017f2:	4618      	mov	r0, r3
 80017f4:	b005      	add	sp, #20
 80017f6:	f85d fb04 	ldr.w	pc, [sp], #4

080017fa <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80017fa:	b084      	sub	sp, #16
 80017fc:	9001      	str	r0, [sp, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80017fe:	9b01      	ldr	r3, [sp, #4]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	9303      	str	r3, [sp, #12]

	return uxReturn;
 8001804:	9b03      	ldr	r3, [sp, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001806:	4618      	mov	r0, r3
 8001808:	b004      	add	sp, #16
 800180a:	4770      	bx	lr

0800180c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800180c:	b500      	push	{lr}
 800180e:	b085      	sub	sp, #20
 8001810:	9001      	str	r0, [sp, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001812:	9b01      	ldr	r3, [sp, #4]
 8001814:	9303      	str	r3, [sp, #12]

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8001816:	9803      	ldr	r0, [sp, #12]
 8001818:	f7ff f8a4 	bl	8000964 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800181c:	bf00      	nop
 800181e:	b005      	add	sp, #20
 8001820:	f85d fb04 	ldr.w	pc, [sp], #4

08001824 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8001824:	b082      	sub	sp, #8
 8001826:	9001      	str	r0, [sp, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001828:	9b01      	ldr	r3, [sp, #4]
 800182a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 800182c:	4618      	mov	r0, r3
 800182e:	b002      	add	sp, #8
 8001830:	4770      	bx	lr

08001832 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8001832:	b082      	sub	sp, #8
 8001834:	9001      	str	r0, [sp, #4]
 8001836:	9100      	str	r1, [sp, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001838:	9b01      	ldr	r3, [sp, #4]
 800183a:	9a00      	ldr	r2, [sp, #0]
 800183c:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800183e:	bf00      	nop
 8001840:	b002      	add	sp, #8
 8001842:	4770      	bx	lr

08001844 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8001844:	b082      	sub	sp, #8
 8001846:	9001      	str	r0, [sp, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 800184e:	4618      	mov	r0, r3
 8001850:	b002      	add	sp, #8
 8001852:	4770      	bx	lr

08001854 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001854:	b084      	sub	sp, #16
 8001856:	9001      	str	r0, [sp, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8001858:	9b01      	ldr	r3, [sp, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <prvGetDisinheritPriorityAfterTimeout+0x1a>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f1c3 0305 	rsb	r3, r3, #5
 800186a:	9303      	str	r3, [sp, #12]
 800186c:	e001      	b.n	8001872 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800186e:	2300      	movs	r3, #0
 8001870:	9303      	str	r3, [sp, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001872:	9b03      	ldr	r3, [sp, #12]
	}
 8001874:	4618      	mov	r0, r3
 8001876:	b004      	add	sp, #16
 8001878:	4770      	bx	lr

0800187a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800187a:	b500      	push	{lr}
 800187c:	b087      	sub	sp, #28
 800187e:	9003      	str	r0, [sp, #12]
 8001880:	9102      	str	r1, [sp, #8]
 8001882:	9201      	str	r2, [sp, #4]
BaseType_t xReturn = pdFALSE;
 8001884:	2300      	movs	r3, #0
 8001886:	9305      	str	r3, [sp, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001888:	9b03      	ldr	r3, [sp, #12]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	9304      	str	r3, [sp, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800188e:	9b03      	ldr	r3, [sp, #12]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <prvCopyDataToQueue+0x38>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001896:	9b03      	ldr	r3, [sp, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d14d      	bne.n	800193a <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800189e:	9b03      	ldr	r3, [sp, #12]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fbc0 	bl	8003028 <xTaskPriorityDisinherit>
 80018a8:	9005      	str	r0, [sp, #20]
				pxQueue->pxMutexHolder = NULL;
 80018aa:	9b03      	ldr	r3, [sp, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	e043      	b.n	800193a <prvCopyDataToQueue+0xc0>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80018b2:	9b01      	ldr	r3, [sp, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d119      	bne.n	80018ec <prvCopyDataToQueue+0x72>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80018b8:	9b03      	ldr	r3, [sp, #12]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	9b03      	ldr	r3, [sp, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	461a      	mov	r2, r3
 80018c2:	9902      	ldr	r1, [sp, #8]
 80018c4:	f009 fbc0 	bl	800b048 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018c8:	9b03      	ldr	r3, [sp, #12]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	9b03      	ldr	r3, [sp, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	441a      	add	r2, r3
 80018d2:	9b03      	ldr	r3, [sp, #12]
 80018d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018d6:	9b03      	ldr	r3, [sp, #12]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	9b03      	ldr	r3, [sp, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d32b      	bcc.n	800193a <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018e2:	9b03      	ldr	r3, [sp, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	9b03      	ldr	r3, [sp, #12]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	e026      	b.n	800193a <prvCopyDataToQueue+0xc0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ec:	9b03      	ldr	r3, [sp, #12]
 80018ee:	68d8      	ldr	r0, [r3, #12]
 80018f0:	9b03      	ldr	r3, [sp, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	461a      	mov	r2, r3
 80018f6:	9902      	ldr	r1, [sp, #8]
 80018f8:	f009 fba6 	bl	800b048 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80018fc:	9b03      	ldr	r3, [sp, #12]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	9b03      	ldr	r3, [sp, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	425b      	negs	r3, r3
 8001906:	441a      	add	r2, r3
 8001908:	9b03      	ldr	r3, [sp, #12]
 800190a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800190c:	9b03      	ldr	r3, [sp, #12]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	9b03      	ldr	r3, [sp, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d207      	bcs.n	8001928 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001918:	9b03      	ldr	r3, [sp, #12]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	9b03      	ldr	r3, [sp, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	425b      	negs	r3, r3
 8001922:	441a      	add	r2, r3
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001928:	9b01      	ldr	r3, [sp, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d105      	bne.n	800193a <prvCopyDataToQueue+0xc0>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800192e:	9b04      	ldr	r3, [sp, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001934:	9b04      	ldr	r3, [sp, #16]
 8001936:	3b01      	subs	r3, #1
 8001938:	9304      	str	r3, [sp, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800193a:	9b04      	ldr	r3, [sp, #16]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	9b03      	ldr	r3, [sp, #12]
 8001940:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001942:	9b05      	ldr	r3, [sp, #20]
}
 8001944:	4618      	mov	r0, r3
 8001946:	b007      	add	sp, #28
 8001948:	f85d fb04 	ldr.w	pc, [sp], #4

0800194c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800194c:	b500      	push	{lr}
 800194e:	b083      	sub	sp, #12
 8001950:	9001      	str	r0, [sp, #4]
 8001952:	9100      	str	r1, [sp, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001954:	9b01      	ldr	r3, [sp, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	2b00      	cmp	r3, #0
 800195a:	d018      	beq.n	800198e <prvCopyDataFromQueue+0x42>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	441a      	add	r2, r3
 8001966:	9b01      	ldr	r3, [sp, #4]
 8001968:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	d303      	bcc.n	800197e <prvCopyDataFromQueue+0x32>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001976:	9b01      	ldr	r3, [sp, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	9b01      	ldr	r3, [sp, #4]
 800197c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	68d9      	ldr	r1, [r3, #12]
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	461a      	mov	r2, r3
 8001988:	9800      	ldr	r0, [sp, #0]
 800198a:	f009 fb5d 	bl	800b048 <memcpy>
	}
}
 800198e:	bf00      	nop
 8001990:	b003      	add	sp, #12
 8001992:	f85d fb04 	ldr.w	pc, [sp], #4

08001996 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001996:	b500      	push	{lr}
 8001998:	b085      	sub	sp, #20
 800199a:	9001      	str	r0, [sp, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800199c:	f7ff f966 	bl	8000c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019a6:	f88d 300f 	strb.w	r3, [sp, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80019aa:	e013      	b.n	80019d4 <prvUnlockQueue+0x3e>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019ac:	9b01      	ldr	r3, [sp, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d014      	beq.n	80019de <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	3324      	adds	r3, #36	; 0x24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 ffed 	bl	8002998 <xTaskRemoveFromEventList>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80019c4:	f001 f8ea 	bl	8002b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80019c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f88d 300f 	strb.w	r3, [sp, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80019d4:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dce7      	bgt.n	80019ac <prvUnlockQueue+0x16>
 80019dc:	e000      	b.n	80019e0 <prvUnlockQueue+0x4a>
					break;
 80019de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80019e0:	9b01      	ldr	r3, [sp, #4]
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80019e8:	f7ff f954 	bl	8000c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80019ec:	f7ff f93e 	bl	8000c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80019f0:	9b01      	ldr	r3, [sp, #4]
 80019f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019f6:	f88d 300e 	strb.w	r3, [sp, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019fa:	e013      	b.n	8001a24 <prvUnlockQueue+0x8e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019fc:	9b01      	ldr	r3, [sp, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d014      	beq.n	8001a2e <prvUnlockQueue+0x98>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a04:	9b01      	ldr	r3, [sp, #4]
 8001a06:	3310      	adds	r3, #16
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 ffc5 	bl	8002998 <xTaskRemoveFromEventList>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
 8001a14:	f001 f8c2 	bl	8002b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001a18:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f88d 300e 	strb.w	r3, [sp, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a24:	f99d 300e 	ldrsb.w	r3, [sp, #14]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dce7      	bgt.n	80019fc <prvUnlockQueue+0x66>
 8001a2c:	e000      	b.n	8001a30 <prvUnlockQueue+0x9a>
			}
			else
			{
				break;
 8001a2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001a30:	9b01      	ldr	r3, [sp, #4]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001a38:	f7ff f92c 	bl	8000c94 <vPortExitCritical>
}
 8001a3c:	bf00      	nop
 8001a3e:	b005      	add	sp, #20
 8001a40:	f85d fb04 	ldr.w	pc, [sp], #4

08001a44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001a44:	b500      	push	{lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a4a:	f7ff f90f 	bl	8000c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <prvIsQueueEmpty+0x18>
		{
			xReturn = pdTRUE;
 8001a56:	2301      	movs	r3, #1
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	e001      	b.n	8001a60 <prvIsQueueEmpty+0x1c>
		}
		else
		{
			xReturn = pdFALSE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001a60:	f7ff f918 	bl	8000c94 <vPortExitCritical>

	return xReturn;
 8001a64:	9b03      	ldr	r3, [sp, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	b005      	add	sp, #20
 8001a6a:	f85d fb04 	ldr.w	pc, [sp], #4

08001a6e <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8001a6e:	b084      	sub	sp, #16
 8001a70:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <xQueueIsQueueEmptyFromISR+0x12>
	{
		xReturn = pdTRUE;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9303      	str	r3, [sp, #12]
 8001a7e:	e001      	b.n	8001a84 <xQueueIsQueueEmptyFromISR+0x16>
	}
	else
	{
		xReturn = pdFALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	9303      	str	r3, [sp, #12]
	}

	return xReturn;
 8001a84:	9b03      	ldr	r3, [sp, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001a86:	4618      	mov	r0, r3
 8001a88:	b004      	add	sp, #16
 8001a8a:	4770      	bx	lr

08001a8c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001a8c:	b500      	push	{lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a92:	f7ff f8eb 	bl	8000c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a96:	9b01      	ldr	r3, [sp, #4]
 8001a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d102      	bne.n	8001aa8 <prvIsQueueFull+0x1c>
		{
			xReturn = pdTRUE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9303      	str	r3, [sp, #12]
 8001aa6:	e001      	b.n	8001aac <prvIsQueueFull+0x20>
		}
		else
		{
			xReturn = pdFALSE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9303      	str	r3, [sp, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001aac:	f7ff f8f2 	bl	8000c94 <vPortExitCritical>

	return xReturn;
 8001ab0:	9b03      	ldr	r3, [sp, #12]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	b005      	add	sp, #20
 8001ab6:	f85d fb04 	ldr.w	pc, [sp], #4

08001aba <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8001aba:	b084      	sub	sp, #16
 8001abc:	9001      	str	r0, [sp, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8001abe:	9b01      	ldr	r3, [sp, #4]
 8001ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ac2:	9b01      	ldr	r3, [sp, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d102      	bne.n	8001ad0 <xQueueIsQueueFullFromISR+0x16>
	{
		xReturn = pdTRUE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	9303      	str	r3, [sp, #12]
 8001ace:	e001      	b.n	8001ad4 <xQueueIsQueueFullFromISR+0x1a>
	}
	else
	{
		xReturn = pdFALSE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9303      	str	r3, [sp, #12]
	}

	return xReturn;
 8001ad4:	9b03      	ldr	r3, [sp, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	b004      	add	sp, #16
 8001ada:	4770      	bx	lr

08001adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001adc:	b500      	push	{lr}
 8001ade:	b08d      	sub	sp, #52	; 0x34
 8001ae0:	9007      	str	r0, [sp, #28]
 8001ae2:	9106      	str	r1, [sp, #24]
 8001ae4:	9304      	str	r3, [sp, #16]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe feaa 	bl	800084c <pvPortMalloc>
 8001af8:	9009      	str	r0, [sp, #36]	; 0x24

			if( pxStack != NULL )
 8001afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001b00:	205c      	movs	r0, #92	; 0x5c
 8001b02:	f7fe fea3 	bl	800084c <pvPortMalloc>
 8001b06:	900b      	str	r0, [sp, #44]	; 0x2c

				if( pxNewTCB != NULL )
 8001b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
 8001b14:	e005      	b.n	8001b22 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b18:	f7fe ff24 	bl	8000964 <vPortFree>
 8001b1c:	e001      	b.n	8001b22 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	930b      	str	r3, [sp, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d014      	beq.n	8001b52 <xTaskCreate+0x76>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b28:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9303      	str	r3, [sp, #12]
 8001b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	9b04      	ldr	r3, [sp, #16]
 8001b3e:	9906      	ldr	r1, [sp, #24]
 8001b40:	9807      	ldr	r0, [sp, #28]
 8001b42:	f000 f80e 	bl	8001b62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001b48:	f000 f882 	bl	8001c50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8001b50:	e002      	b.n	8001b58 <xTaskCreate+0x7c>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b56:	930a      	str	r3, [sp, #40]	; 0x28
		}

		return xReturn;
 8001b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	b00d      	add	sp, #52	; 0x34
 8001b5e:	f85d fb04 	ldr.w	pc, [sp], #4

08001b62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001b62:	b500      	push	{lr}
 8001b64:	b087      	sub	sp, #28
 8001b66:	9003      	str	r0, [sp, #12]
 8001b68:	9102      	str	r1, [sp, #8]
 8001b6a:	9201      	str	r2, [sp, #4]
 8001b6c:	9300      	str	r3, [sp, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b72:	9b01      	ldr	r3, [sp, #4]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	461a      	mov	r2, r3
 8001b78:	21a5      	movs	r1, #165	; 0xa5
 8001b7a:	f009 fa70 	bl	800b05e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b82:	9b01      	ldr	r3, [sp, #4]
 8001b84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	9304      	str	r3, [sp, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001b90:	9b04      	ldr	r3, [sp, #16]
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	9304      	str	r3, [sp, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9305      	str	r3, [sp, #20]
 8001b9c:	e012      	b.n	8001bc4 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b9e:	9a02      	ldr	r2, [sp, #8]
 8001ba0:	9b05      	ldr	r3, [sp, #20]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	7819      	ldrb	r1, [r3, #0]
 8001ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ba8:	9b05      	ldr	r3, [sp, #20]
 8001baa:	4413      	add	r3, r2
 8001bac:	3334      	adds	r3, #52	; 0x34
 8001bae:	460a      	mov	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001bb2:	9a02      	ldr	r2, [sp, #8]
 8001bb4:	9b05      	ldr	r3, [sp, #20]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bbe:	9b05      	ldr	r3, [sp, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	9305      	str	r3, [sp, #20]
 8001bc4:	9b05      	ldr	r3, [sp, #20]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	d9e9      	bls.n	8001b9e <prvInitialiseNewTask+0x3c>
 8001bca:	e000      	b.n	8001bce <prvInitialiseNewTask+0x6c>
		{
			break;
 8001bcc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001bd6:	9b08      	ldr	r3, [sp, #32]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d901      	bls.n	8001be0 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	9308      	str	r3, [sp, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001be2:	9a08      	ldr	r2, [sp, #32]
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001be8:	9a08      	ldr	r2, [sp, #32]
 8001bea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ff33 	bl	8000a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bfe:	3318      	adds	r3, #24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe ff2e 	bl	8000a62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c0c:	9b08      	ldr	r3, [sp, #32]
 8001c0e:	f1c3 0205 	rsb	r2, r3, #5
 8001c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c1e:	2200      	movs	r2, #0
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c2a:	9a00      	ldr	r2, [sp, #0]
 8001c2c:	9903      	ldr	r1, [sp, #12]
 8001c2e:	9804      	ldr	r0, [sp, #16]
 8001c30:	f7fe ff98 	bl	8000b64 <pxPortInitialiseStack>
 8001c34:	4602      	mov	r2, r0
 8001c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c38:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <prvInitialiseNewTask+0xe4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c46:	bf00      	nop
 8001c48:	b007      	add	sp, #28
 8001c4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c50:	b500      	push	{lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	9001      	str	r0, [sp, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c56:	f7ff f809 	bl	8000c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <prvAddNewTaskToReadyList+0xc0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a2b      	ldr	r2, [pc, #172]	; (8001d10 <prvAddNewTaskToReadyList+0xc0>)
 8001c62:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <prvAddNewTaskToReadyList+0xc4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <prvAddNewTaskToReadyList+0x30>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c6c:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <prvAddNewTaskToReadyList+0xc4>)
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c72:	4b27      	ldr	r3, [pc, #156]	; (8001d10 <prvAddNewTaskToReadyList+0xc0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d110      	bne.n	8001c9c <prvAddNewTaskToReadyList+0x4c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c7a:	f000 ffcd 	bl	8002c18 <prvInitialiseTaskLists>
 8001c7e:	e00d      	b.n	8001c9c <prvAddNewTaskToReadyList+0x4c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <prvAddNewTaskToReadyList+0xc8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <prvAddNewTaskToReadyList+0x4c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <prvAddNewTaskToReadyList+0xc4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d802      	bhi.n	8001c9c <prvAddNewTaskToReadyList+0x4c>
				{
					pxCurrentTCB = pxNewTCB;
 8001c96:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <prvAddNewTaskToReadyList+0xc4>)
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <prvAddNewTaskToReadyList+0xcc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <prvAddNewTaskToReadyList+0xcc>)
 8001ca4:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <prvAddNewTaskToReadyList+0xcc>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	9b01      	ldr	r3, [sp, #4]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001cae:	9b01      	ldr	r3, [sp, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <prvAddNewTaskToReadyList+0xd0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <prvAddNewTaskToReadyList+0xd0>)
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	9b01      	ldr	r3, [sp, #4]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <prvAddNewTaskToReadyList+0xd4>)
 8001cce:	441a      	add	r2, r3
 8001cd0:	9b01      	ldr	r3, [sp, #4]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f7fe fecb 	bl	8000a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001cdc:	f7fe ffda 	bl	8000c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <prvAddNewTaskToReadyList+0xc8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <prvAddNewTaskToReadyList+0xb6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <prvAddNewTaskToReadyList+0xc4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	9b01      	ldr	r3, [sp, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d207      	bcs.n	8001d06 <prvAddNewTaskToReadyList+0xb6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <prvAddNewTaskToReadyList+0xd8>)
 8001cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d06:	bf00      	nop
 8001d08:	b003      	add	sp, #12
 8001d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d0e:	bf00      	nop
 8001d10:	200014fc 	.word	0x200014fc
 8001d14:	20001424 	.word	0x20001424
 8001d18:	20001508 	.word	0x20001508
 8001d1c:	20001518 	.word	0x20001518
 8001d20:	20001504 	.word	0x20001504
 8001d24:	20001428 	.word	0x20001428
 8001d28:	e000ed04 	.word	0xe000ed04

08001d2c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001d2c:	b500      	push	{lr}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001d32:	f7fe ff9b 	bl	8000c6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001d36:	9b01      	ldr	r3, [sp, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <vTaskDelete+0x16>
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <vTaskDelete+0xd8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	e000      	b.n	8001d44 <vTaskDelete+0x18>
 8001d42:	9b01      	ldr	r3, [sp, #4]
 8001d44:	9303      	str	r3, [sp, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d46:	9b03      	ldr	r3, [sp, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fee4 	bl	8000b18 <uxListRemove>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <vTaskDelete+0x56>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5a:	492b      	ldr	r1, [pc, #172]	; (8001e08 <vTaskDelete+0xdc>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <vTaskDelete+0x56>
 8001d6c:	9b03      	ldr	r3, [sp, #12]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2201      	movs	r2, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <vTaskDelete+0xe0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <vTaskDelete+0xe0>)
 8001d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d82:	9b03      	ldr	r3, [sp, #12]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <vTaskDelete+0x68>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d8a:	9b03      	ldr	r3, [sp, #12]
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fec2 	bl	8000b18 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <vTaskDelete+0xe4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <vTaskDelete+0xe4>)
 8001d9c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <vTaskDelete+0xd8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	9a03      	ldr	r2, [sp, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d10b      	bne.n	8001dc0 <vTaskDelete+0x94>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <vTaskDelete+0xe8>)
 8001db0:	f7fe fe5f 	bl	8000a72 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001db4:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <vTaskDelete+0xec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <vTaskDelete+0xec>)
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e009      	b.n	8001dd4 <vTaskDelete+0xa8>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <vTaskDelete+0xf0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <vTaskDelete+0xf0>)
 8001dc8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8001dca:	9803      	ldr	r0, [sp, #12]
 8001dcc:	f001 f86e 	bl	8002eac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8001dd0:	f001 f87c 	bl	8002ecc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001dd4:	f7fe ff5e 	bl	8000c94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <vTaskDelete+0xf4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00c      	beq.n	8001dfa <vTaskDelete+0xce>
		{
			if( pxTCB == pxCurrentTCB )
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <vTaskDelete+0xd8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	9a03      	ldr	r2, [sp, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d107      	bne.n	8001dfa <vTaskDelete+0xce>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <vTaskDelete+0xf8>)
 8001dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001dfa:	bf00      	nop
 8001dfc:	b005      	add	sp, #20
 8001dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e02:	bf00      	nop
 8001e04:	20001424 	.word	0x20001424
 8001e08:	20001428 	.word	0x20001428
 8001e0c:	20001504 	.word	0x20001504
 8001e10:	20001518 	.word	0x20001518
 8001e14:	200014d0 	.word	0x200014d0
 8001e18:	200014e4 	.word	0x200014e4
 8001e1c:	200014fc 	.word	0x200014fc
 8001e20:	20001508 	.word	0x20001508
 8001e24:	e000ed04 	.word	0xe000ed04

08001e28 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001e28:	b500      	push	{lr}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	9001      	str	r0, [sp, #4]
 8001e2e:	9100      	str	r1, [sp, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	9305      	str	r3, [sp, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 8001e34:	f000 fb3e 	bl	80024b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <vTaskDelayUntil+0x98>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	9304      	str	r3, [sp, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001e3e:	9b01      	ldr	r3, [sp, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	9b00      	ldr	r3, [sp, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	9303      	str	r3, [sp, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001e48:	9b01      	ldr	r3, [sp, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	9b04      	ldr	r3, [sp, #16]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d90b      	bls.n	8001e6a <vTaskDelayUntil+0x42>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001e52:	9b01      	ldr	r3, [sp, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	9b03      	ldr	r3, [sp, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d911      	bls.n	8001e80 <vTaskDelayUntil+0x58>
 8001e5c:	9a03      	ldr	r2, [sp, #12]
 8001e5e:	9b04      	ldr	r3, [sp, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d90d      	bls.n	8001e80 <vTaskDelayUntil+0x58>
				{
					xShouldDelay = pdTRUE;
 8001e64:	2301      	movs	r3, #1
 8001e66:	9305      	str	r3, [sp, #20]
 8001e68:	e00a      	b.n	8001e80 <vTaskDelayUntil+0x58>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001e6a:	9b01      	ldr	r3, [sp, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	9b03      	ldr	r3, [sp, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d803      	bhi.n	8001e7c <vTaskDelayUntil+0x54>
 8001e74:	9a03      	ldr	r2, [sp, #12]
 8001e76:	9b04      	ldr	r3, [sp, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d901      	bls.n	8001e80 <vTaskDelayUntil+0x58>
				{
					xShouldDelay = pdTRUE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	9305      	str	r3, [sp, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8001e80:	9b01      	ldr	r3, [sp, #4]
 8001e82:	9a03      	ldr	r2, [sp, #12]
 8001e84:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8001e86:	9b05      	ldr	r3, [sp, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <vTaskDelayUntil+0x72>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001e8c:	9a03      	ldr	r2, [sp, #12]
 8001e8e:	9b04      	ldr	r3, [sp, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fc3b 	bl	8003710 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8001e9a:	f000 fb15 	bl	80024c8 <xTaskResumeAll>
 8001e9e:	9002      	str	r0, [sp, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001ea0:	9b02      	ldr	r3, [sp, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <vTaskDelayUntil+0x8e>
		{
			portYIELD_WITHIN_API();
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <vTaskDelayUntil+0x9c>)
 8001ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f3bf 8f4f 	dsb	sy
 8001eb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001eb6:	bf00      	nop
 8001eb8:	b007      	add	sp, #28
 8001eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ebe:	bf00      	nop
 8001ec0:	20001500 	.word	0x20001500
 8001ec4:	e000ed04 	.word	0xe000ed04

08001ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ec8:	b500      	push	{lr}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	9001      	str	r0, [sp, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9303      	str	r3, [sp, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001ed2:	9b01      	ldr	r3, [sp, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <vTaskDelay+0x22>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8001ed8:	f000 faec 	bl	80024b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001edc:	2100      	movs	r1, #0
 8001ede:	9801      	ldr	r0, [sp, #4]
 8001ee0:	f001 fc16 	bl	8003710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001ee4:	f000 faf0 	bl	80024c8 <xTaskResumeAll>
 8001ee8:	9003      	str	r0, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <vTaskDelay+0x40>)
 8001ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f00:	bf00      	nop
 8001f02:	b005      	add	sp, #20
 8001f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f08:	e000ed04 	.word	0xe000ed04

08001f0c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8001f0c:	b500      	push	{lr}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	9001      	str	r0, [sp, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	9304      	str	r3, [sp, #16]

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <eTaskGetState+0x90>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	9a04      	ldr	r2, [sp, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d103      	bne.n	8001f28 <eTaskGetState+0x1c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f88d 3017 	strb.w	r3, [sp, #23]
 8001f26:	e032      	b.n	8001f8e <eTaskGetState+0x82>
		}
		else
		{
			taskENTER_CRITICAL();
 8001f28:	f7fe fea0 	bl	8000c6c <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8001f2c:	9b04      	ldr	r3, [sp, #16]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	9303      	str	r3, [sp, #12]
			}
			taskEXIT_CRITICAL();
 8001f32:	f7fe feaf 	bl	8000c94 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <eTaskGetState+0x94>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	9a03      	ldr	r2, [sp, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d004      	beq.n	8001f4a <eTaskGetState+0x3e>
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <eTaskGetState+0x98>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	9a03      	ldr	r2, [sp, #12]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d103      	bne.n	8001f52 <eTaskGetState+0x46>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f88d 3017 	strb.w	r3, [sp, #23]
 8001f50:	e01d      	b.n	8001f8e <eTaskGetState+0x82>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8001f52:	9b03      	ldr	r3, [sp, #12]
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <eTaskGetState+0x9c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10b      	bne.n	8001f72 <eTaskGetState+0x66>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8001f5a:	9b04      	ldr	r3, [sp, #16]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <eTaskGetState+0x5e>
					{
						eReturn = eSuspended;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f88d 3017 	strb.w	r3, [sp, #23]
 8001f68:	e011      	b.n	8001f8e <eTaskGetState+0x82>
					}
					else
					{
						eReturn = eBlocked;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f88d 3017 	strb.w	r3, [sp, #23]
 8001f70:	e00d      	b.n	8001f8e <eTaskGetState+0x82>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8001f72:	9b03      	ldr	r3, [sp, #12]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <eTaskGetState+0xa0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d002      	beq.n	8001f80 <eTaskGetState+0x74>
 8001f7a:	9b03      	ldr	r3, [sp, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8001f80:	2304      	movs	r3, #4
 8001f82:	f88d 3017 	strb.w	r3, [sp, #23]
 8001f86:	e002      	b.n	8001f8e <eTaskGetState+0x82>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f88d 3017 	strb.w	r3, [sp, #23]
			}
		}

		return eReturn;
 8001f8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001f92:	4618      	mov	r0, r3
 8001f94:	b007      	add	sp, #28
 8001f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f9a:	bf00      	nop
 8001f9c:	20001424 	.word	0x20001424
 8001fa0:	200014b4 	.word	0x200014b4
 8001fa4:	200014b8 	.word	0x200014b8
 8001fa8:	200014e8 	.word	0x200014e8
 8001fac:	200014d0 	.word	0x200014d0

08001fb0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8001fb0:	b500      	push	{lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8001fb6:	f7fe fe59 	bl	8000c6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001fba:	9b01      	ldr	r3, [sp, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <uxTaskPriorityGet+0x16>
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <uxTaskPriorityGet+0x30>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	e000      	b.n	8001fc8 <uxTaskPriorityGet+0x18>
 8001fc6:	9b01      	ldr	r3, [sp, #4]
 8001fc8:	9303      	str	r3, [sp, #12]
			uxReturn = pxTCB->uxPriority;
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	9302      	str	r3, [sp, #8]
		}
		taskEXIT_CRITICAL();
 8001fd0:	f7fe fe60 	bl	8000c94 <vPortExitCritical>

		return uxReturn;
 8001fd4:	9b02      	ldr	r3, [sp, #8]
	}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	b005      	add	sp, #20
 8001fda:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fde:	bf00      	nop
 8001fe0:	20001424 	.word	0x20001424

08001fe4 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
 8001fe4:	b088      	sub	sp, #32
 8001fe6:	9001      	str	r0, [sp, #4]
	__asm volatile
 8001fe8:	f3ef 8211 	mrs	r2, BASEPRI
 8001fec:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	9204      	str	r2, [sp, #16]
 8001ffe:	9303      	str	r3, [sp, #12]
	return ulOriginalBASEPRI;
 8002000:	9b04      	ldr	r3, [sp, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8002002:	9307      	str	r3, [sp, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002004:	9b01      	ldr	r3, [sp, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <uxTaskPriorityGetFromISR+0x2c>
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <uxTaskPriorityGetFromISR+0x48>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e000      	b.n	8002012 <uxTaskPriorityGetFromISR+0x2e>
 8002010:	9b01      	ldr	r3, [sp, #4]
 8002012:	9306      	str	r3, [sp, #24]
			uxReturn = pxTCB->uxPriority;
 8002014:	9b06      	ldr	r3, [sp, #24]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	9305      	str	r3, [sp, #20]
 800201a:	9b07      	ldr	r3, [sp, #28]
 800201c:	9302      	str	r3, [sp, #8]
	__asm volatile
 800201e:	9b02      	ldr	r3, [sp, #8]
 8002020:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8002024:	9b05      	ldr	r3, [sp, #20]
	}
 8002026:	4618      	mov	r0, r3
 8002028:	b008      	add	sp, #32
 800202a:	4770      	bx	lr
 800202c:	20001424 	.word	0x20001424

08002030 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8002030:	b500      	push	{lr}
 8002032:	b087      	sub	sp, #28
 8002034:	9001      	str	r0, [sp, #4]
 8002036:	9100      	str	r1, [sp, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002038:	2300      	movs	r3, #0
 800203a:	9305      	str	r3, [sp, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800203c:	9b00      	ldr	r3, [sp, #0]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d901      	bls.n	8002046 <vTaskPrioritySet+0x16>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002042:	2304      	movs	r3, #4
 8002044:	9300      	str	r3, [sp, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8002046:	f7fe fe11 	bl	8000c6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <vTaskPrioritySet+0x26>
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <vTaskPrioritySet+0x130>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e000      	b.n	8002058 <vTaskPrioritySet+0x28>
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	9304      	str	r3, [sp, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800205a:	9b04      	ldr	r3, [sp, #16]
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	9303      	str	r3, [sp, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002060:	9a03      	ldr	r2, [sp, #12]
 8002062:	9b00      	ldr	r3, [sp, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d074      	beq.n	8002152 <vTaskPrioritySet+0x122>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8002068:	9a00      	ldr	r2, [sp, #0]
 800206a:	9b03      	ldr	r3, [sp, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d90d      	bls.n	800208c <vTaskPrioritySet+0x5c>
				{
					if( pxTCB != pxCurrentTCB )
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <vTaskPrioritySet+0x130>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	9a04      	ldr	r2, [sp, #16]
 8002076:	429a      	cmp	r2, r3
 8002078:	d00f      	beq.n	800209a <vTaskPrioritySet+0x6a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <vTaskPrioritySet+0x130>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002080:	9b00      	ldr	r3, [sp, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d809      	bhi.n	800209a <vTaskPrioritySet+0x6a>
						{
							xYieldRequired = pdTRUE;
 8002086:	2301      	movs	r3, #1
 8002088:	9305      	str	r3, [sp, #20]
 800208a:	e006      	b.n	800209a <vTaskPrioritySet+0x6a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <vTaskPrioritySet+0x130>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	9a04      	ldr	r2, [sp, #16]
 8002092:	429a      	cmp	r2, r3
 8002094:	d101      	bne.n	800209a <vTaskPrioritySet+0x6a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002096:	2301      	movs	r3, #1
 8002098:	9305      	str	r3, [sp, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800209a:	9b04      	ldr	r3, [sp, #16]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	9302      	str	r3, [sp, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80020a0:	9b04      	ldr	r3, [sp, #16]
 80020a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020a4:	9b04      	ldr	r3, [sp, #16]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d102      	bne.n	80020b2 <vTaskPrioritySet+0x82>
					{
						pxTCB->uxPriority = uxNewPriority;
 80020ac:	9b04      	ldr	r3, [sp, #16]
 80020ae:	9a00      	ldr	r2, [sp, #0]
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80020b2:	9b04      	ldr	r3, [sp, #16]
 80020b4:	9a00      	ldr	r2, [sp, #0]
 80020b6:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80020b8:	9b04      	ldr	r3, [sp, #16]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db04      	blt.n	80020ca <vTaskPrioritySet+0x9a>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020c0:	9b00      	ldr	r3, [sp, #0]
 80020c2:	f1c3 0205 	rsb	r2, r3, #5
 80020c6:	9b04      	ldr	r3, [sp, #16]
 80020c8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80020ca:	9b04      	ldr	r3, [sp, #16]
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	9a02      	ldr	r2, [sp, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4a22      	ldr	r2, [pc, #136]	; (8002164 <vTaskPrioritySet+0x134>)
 80020da:	4413      	add	r3, r2
 80020dc:	4299      	cmp	r1, r3
 80020de:	d101      	bne.n	80020e4 <vTaskPrioritySet+0xb4>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <vTaskPrioritySet+0xb6>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d028      	beq.n	800213c <vTaskPrioritySet+0x10c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020ea:	9b04      	ldr	r3, [sp, #16]
 80020ec:	3304      	adds	r3, #4
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fd12 	bl	8000b18 <uxListRemove>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <vTaskPrioritySet+0xde>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80020fa:	2201      	movs	r2, #1
 80020fc:	9b02      	ldr	r3, [sp, #8]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <vTaskPrioritySet+0x138>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4013      	ands	r3, r2
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <vTaskPrioritySet+0x138>)
 800210c:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800210e:	9b04      	ldr	r3, [sp, #16]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2201      	movs	r2, #1
 8002114:	409a      	lsls	r2, r3
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <vTaskPrioritySet+0x138>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <vTaskPrioritySet+0x138>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	9b04      	ldr	r3, [sp, #16]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <vTaskPrioritySet+0x134>)
 800212e:	441a      	add	r2, r3
 8002130:	9b04      	ldr	r3, [sp, #16]
 8002132:	3304      	adds	r3, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4610      	mov	r0, r2
 8002138:	f7fe fc9b 	bl	8000a72 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800213c:	9b05      	ldr	r3, [sp, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <vTaskPrioritySet+0x122>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <vTaskPrioritySet+0x13c>)
 8002144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002152:	f7fe fd9f 	bl	8000c94 <vPortExitCritical>
	}
 8002156:	bf00      	nop
 8002158:	b007      	add	sp, #28
 800215a:	f85d fb04 	ldr.w	pc, [sp], #4
 800215e:	bf00      	nop
 8002160:	20001424 	.word	0x20001424
 8002164:	20001428 	.word	0x20001428
 8002168:	20001504 	.word	0x20001504
 800216c:	e000ed04 	.word	0xe000ed04

08002170 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002170:	b500      	push	{lr}
 8002172:	b085      	sub	sp, #20
 8002174:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002176:	f7fe fd79 	bl	8000c6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800217a:	9b01      	ldr	r3, [sp, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <vTaskSuspend+0x16>
 8002180:	4b34      	ldr	r3, [pc, #208]	; (8002254 <vTaskSuspend+0xe4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	e000      	b.n	8002188 <vTaskSuspend+0x18>
 8002186:	9b01      	ldr	r3, [sp, #4]
 8002188:	9303      	str	r3, [sp, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800218a:	9b03      	ldr	r3, [sp, #12]
 800218c:	3304      	adds	r3, #4
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fcc2 	bl	8000b18 <uxListRemove>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <vTaskSuspend+0x56>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800219a:	9b03      	ldr	r3, [sp, #12]
 800219c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219e:	492e      	ldr	r1, [pc, #184]	; (8002258 <vTaskSuspend+0xe8>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <vTaskSuspend+0x56>
 80021b0:	9b03      	ldr	r3, [sp, #12]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <vTaskSuspend+0xec>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4013      	ands	r3, r2
 80021c2:	4a26      	ldr	r2, [pc, #152]	; (800225c <vTaskSuspend+0xec>)
 80021c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021c6:	9b03      	ldr	r3, [sp, #12]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <vTaskSuspend+0x68>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021ce:	9b03      	ldr	r3, [sp, #12]
 80021d0:	3318      	adds	r3, #24
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fca0 	bl	8000b18 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80021d8:	9b03      	ldr	r3, [sp, #12]
 80021da:	3304      	adds	r3, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4820      	ldr	r0, [pc, #128]	; (8002260 <vTaskSuspend+0xf0>)
 80021e0:	f7fe fc47 	bl	8000a72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80021e4:	9b03      	ldr	r3, [sp, #12]
 80021e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d103      	bne.n	80021f8 <vTaskSuspend+0x88>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80021f0:	9b03      	ldr	r3, [sp, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80021f8:	f7fe fd4c 	bl	8000c94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <vTaskSuspend+0xf4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <vTaskSuspend+0xa0>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002204:	f7fe fd32 	bl	8000c6c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002208:	f000 fe60 	bl	8002ecc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800220c:	f7fe fd42 	bl	8000c94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <vTaskSuspend+0xe4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	9a03      	ldr	r2, [sp, #12]
 8002216:	429a      	cmp	r2, r3
 8002218:	d118      	bne.n	800224c <vTaskSuspend+0xdc>
		{
			if( xSchedulerRunning != pdFALSE )
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <vTaskSuspend+0xf4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <vTaskSuspend+0xf8>)
 8002224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002232:	e00b      	b.n	800224c <vTaskSuspend+0xdc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <vTaskSuspend+0xf0>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <vTaskSuspend+0xfc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d103      	bne.n	8002248 <vTaskSuspend+0xd8>
					pxCurrentTCB = NULL;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <vTaskSuspend+0xe4>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
	}
 8002246:	e001      	b.n	800224c <vTaskSuspend+0xdc>
					vTaskSwitchContext();
 8002248:	f000 fb30 	bl	80028ac <vTaskSwitchContext>
	}
 800224c:	bf00      	nop
 800224e:	b005      	add	sp, #20
 8002250:	f85d fb04 	ldr.w	pc, [sp], #4
 8002254:	20001424 	.word	0x20001424
 8002258:	20001428 	.word	0x20001428
 800225c:	20001504 	.word	0x20001504
 8002260:	200014e8 	.word	0x200014e8
 8002264:	20001508 	.word	0x20001508
 8002268:	e000ed04 	.word	0xe000ed04
 800226c:	200014fc 	.word	0x200014fc

08002270 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002270:	b084      	sub	sp, #16
 8002272:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;
 8002274:	2300      	movs	r3, #0
 8002276:	9303      	str	r3, [sp, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	9302      	str	r3, [sp, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <prvTaskIsTaskSuspended+0x48>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <prvTaskIsTaskSuspended+0x1a>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <prvTaskIsTaskSuspended+0x1c>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00f      	beq.n	80022b0 <prvTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002290:	9b02      	ldr	r3, [sp, #8]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <prvTaskIsTaskSuspended+0x4c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00a      	beq.n	80022b0 <prvTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800229a:	9b02      	ldr	r3, [sp, #8]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <prvTaskIsTaskSuspended+0x36>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <prvTaskIsTaskSuspended+0x38>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <prvTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	9303      	str	r3, [sp, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022b0:	9b03      	ldr	r3, [sp, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80022b2:	4618      	mov	r0, r3
 80022b4:	b004      	add	sp, #16
 80022b6:	4770      	bx	lr
 80022b8:	200014e8 	.word	0x200014e8
 80022bc:	200014bc 	.word	0x200014bc

080022c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80022c0:	b500      	push	{lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	9001      	str	r0, [sp, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	9303      	str	r3, [sp, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d039      	beq.n	8002344 <vTaskResume+0x84>
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <vTaskResume+0x8c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	9a03      	ldr	r2, [sp, #12]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d034      	beq.n	8002344 <vTaskResume+0x84>
		{
			taskENTER_CRITICAL();
 80022da:	f7fe fcc7 	bl	8000c6c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80022de:	9803      	ldr	r0, [sp, #12]
 80022e0:	f7ff ffc6 	bl	8002270 <prvTaskIsTaskSuspended>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d02a      	beq.n	8002340 <vTaskResume+0x80>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80022ea:	9b03      	ldr	r3, [sp, #12]
 80022ec:	3304      	adds	r3, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fc12 	bl	8000b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022f4:	9b03      	ldr	r3, [sp, #12]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <vTaskResume+0x90>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <vTaskResume+0x90>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	9b03      	ldr	r3, [sp, #12]
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <vTaskResume+0x94>)
 8002314:	441a      	add	r2, r3
 8002316:	9b03      	ldr	r3, [sp, #12]
 8002318:	3304      	adds	r3, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7fe fba8 	bl	8000a72 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002322:	9b03      	ldr	r3, [sp, #12]
 8002324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <vTaskResume+0x8c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	429a      	cmp	r2, r3
 800232e:	d307      	bcc.n	8002340 <vTaskResume+0x80>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <vTaskResume+0x98>)
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002340:	f7fe fca8 	bl	8000c94 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002344:	bf00      	nop
 8002346:	b005      	add	sp, #20
 8002348:	f85d fb04 	ldr.w	pc, [sp], #4
 800234c:	20001424 	.word	0x20001424
 8002350:	20001504 	.word	0x20001504
 8002354:	20001428 	.word	0x20001428
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800235c:	b500      	push	{lr}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	9001      	str	r0, [sp, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8002362:	2300      	movs	r3, #0
 8002364:	9307      	str	r3, [sp, #28]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8002366:	9b01      	ldr	r3, [sp, #4]
 8002368:	9306      	str	r3, [sp, #24]
	__asm volatile
 800236a:	f3ef 8211 	mrs	r2, BASEPRI
 800236e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002372:	f383 8811 	msr	BASEPRI, r3
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	f3bf 8f4f 	dsb	sy
 800237e:	9204      	str	r2, [sp, #16]
 8002380:	9303      	str	r3, [sp, #12]
	return ulOriginalBASEPRI;
 8002382:	9b04      	ldr	r3, [sp, #16]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002384:	9305      	str	r3, [sp, #20]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002386:	9806      	ldr	r0, [sp, #24]
 8002388:	f7ff ff72 	bl	8002270 <prvTaskIsTaskSuspended>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02f      	beq.n	80023f2 <xTaskResumeFromISR+0x96>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <xTaskResumeFromISR+0xac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d125      	bne.n	80023e6 <xTaskResumeFromISR+0x8a>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800239a:	9b06      	ldr	r3, [sp, #24]
 800239c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <xTaskResumeFromISR+0xb0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d301      	bcc.n	80023ac <xTaskResumeFromISR+0x50>
					{
						xYieldRequired = pdTRUE;
 80023a8:	2301      	movs	r3, #1
 80023aa:	9307      	str	r3, [sp, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023ac:	9b06      	ldr	r3, [sp, #24]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fbb1 	bl	8000b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80023b6:	9b06      	ldr	r3, [sp, #24]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <xTaskResumeFromISR+0xb4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <xTaskResumeFromISR+0xb4>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	9b06      	ldr	r3, [sp, #24]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <xTaskResumeFromISR+0xb8>)
 80023d6:	441a      	add	r2, r3
 80023d8:	9b06      	ldr	r3, [sp, #24]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fe fb47 	bl	8000a72 <vListInsertEnd>
 80023e4:	e005      	b.n	80023f2 <xTaskResumeFromISR+0x96>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80023e6:	9b06      	ldr	r3, [sp, #24]
 80023e8:	3318      	adds	r3, #24
 80023ea:	4619      	mov	r1, r3
 80023ec:	480a      	ldr	r0, [pc, #40]	; (8002418 <xTaskResumeFromISR+0xbc>)
 80023ee:	f7fe fb40 	bl	8000a72 <vListInsertEnd>
 80023f2:	9b05      	ldr	r3, [sp, #20]
 80023f4:	9302      	str	r3, [sp, #8]
	__asm volatile
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80023fc:	9b07      	ldr	r3, [sp, #28]
	}
 80023fe:	4618      	mov	r0, r3
 8002400:	b009      	add	sp, #36	; 0x24
 8002402:	f85d fb04 	ldr.w	pc, [sp], #4
 8002406:	bf00      	nop
 8002408:	20001524 	.word	0x20001524
 800240c:	20001424 	.word	0x20001424
 8002410:	20001504 	.word	0x20001504
 8002414:	20001428 	.word	0x20001428
 8002418:	200014bc 	.word	0x200014bc

0800241c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800241c:	b500      	push	{lr}
 800241e:	b085      	sub	sp, #20
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <vTaskStartScheduler+0x54>)
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2300      	movs	r3, #0
 800242a:	2278      	movs	r2, #120	; 0x78
 800242c:	4911      	ldr	r1, [pc, #68]	; (8002474 <vTaskStartScheduler+0x58>)
 800242e:	4812      	ldr	r0, [pc, #72]	; (8002478 <vTaskStartScheduler+0x5c>)
 8002430:	f7ff fb54 	bl	8001adc <xTaskCreate>
 8002434:	9003      	str	r0, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002436:	9b03      	ldr	r3, [sp, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d114      	bne.n	8002466 <vTaskStartScheduler+0x4a>
	__asm volatile
 800243c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	9302      	str	r3, [sp, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <vTaskStartScheduler+0x60>)
 8002450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <vTaskStartScheduler+0x64>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <vTaskStartScheduler+0x68>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002462:	f7fe fbe1 	bl	8000c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002466:	bf00      	nop
 8002468:	b005      	add	sp, #20
 800246a:	f85d fb04 	ldr.w	pc, [sp], #4
 800246e:	bf00      	nop
 8002470:	20001520 	.word	0x20001520
 8002474:	0800b07c 	.word	0x0800b07c
 8002478:	08002bed 	.word	0x08002bed
 800247c:	2000151c 	.word	0x2000151c
 8002480:	20001508 	.word	0x20001508
 8002484:	20001500 	.word	0x20001500

08002488 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8002488:	b500      	push	{lr}
 800248a:	b083      	sub	sp, #12
 800248c:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	9301      	str	r3, [sp, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <vTaskEndScheduler+0x28>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 80024a4:	f7fe fbe0 	bl	8000c68 <vPortEndScheduler>
}
 80024a8:	bf00      	nop
 80024aa:	b003      	add	sp, #12
 80024ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80024b0:	20001508 	.word	0x20001508

080024b4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <vTaskSuspendAll+0x10>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4a02      	ldr	r2, [pc, #8]	; (80024c4 <vTaskSuspendAll+0x10>)
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	bf00      	nop
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20001524 	.word	0x20001524

080024c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024c8:	b500      	push	{lr}
 80024ca:	b085      	sub	sp, #20
TCB_t *pxTCB = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	9303      	str	r3, [sp, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	9302      	str	r3, [sp, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024d4:	f7fe fbca 	bl	8000c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024d8:	4b38      	ldr	r3, [pc, #224]	; (80025bc <xTaskResumeAll+0xf4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	4a37      	ldr	r2, [pc, #220]	; (80025bc <xTaskResumeAll+0xf4>)
 80024e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <xTaskResumeAll+0xf4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d161      	bne.n	80025ae <xTaskResumeAll+0xe6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <xTaskResumeAll+0xf8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d05d      	beq.n	80025ae <xTaskResumeAll+0xe6>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024f2:	e02e      	b.n	8002552 <xTaskResumeAll+0x8a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80024f4:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <xTaskResumeAll+0xfc>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	9303      	str	r3, [sp, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024fc:	9b03      	ldr	r3, [sp, #12]
 80024fe:	3318      	adds	r3, #24
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fb09 	bl	8000b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002506:	9b03      	ldr	r3, [sp, #12]
 8002508:	3304      	adds	r3, #4
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fb04 	bl	8000b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002510:	9b03      	ldr	r3, [sp, #12]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2201      	movs	r2, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <xTaskResumeAll+0x100>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4313      	orrs	r3, r2
 800251e:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <xTaskResumeAll+0x100>)
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	9b03      	ldr	r3, [sp, #12]
 8002524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4a27      	ldr	r2, [pc, #156]	; (80025cc <xTaskResumeAll+0x104>)
 8002530:	441a      	add	r2, r3
 8002532:	9b03      	ldr	r3, [sp, #12]
 8002534:	3304      	adds	r3, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f7fe fa9a 	bl	8000a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800253e:	9b03      	ldr	r3, [sp, #12]
 8002540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <xTaskResumeAll+0x108>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <xTaskResumeAll+0x8a>
					{
						xYieldPending = pdTRUE;
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <xTaskResumeAll+0x10c>)
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <xTaskResumeAll+0xfc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1cc      	bne.n	80024f4 <xTaskResumeAll+0x2c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800255a:	9b03      	ldr	r3, [sp, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <xTaskResumeAll+0x9c>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002560:	f000 fcb4 	bl	8002ecc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <xTaskResumeAll+0x110>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	9301      	str	r3, [sp, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <xTaskResumeAll+0xca>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002570:	f000 f8f0 	bl	8002754 <xTaskIncrementTick>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <xTaskResumeAll+0xb8>
							{
								xYieldPending = pdTRUE;
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <xTaskResumeAll+0x10c>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002586:	9b01      	ldr	r3, [sp, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f1      	bne.n	8002570 <xTaskResumeAll+0xa8>

						uxPendedTicks = 0;
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <xTaskResumeAll+0x110>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <xTaskResumeAll+0x10c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <xTaskResumeAll+0xe6>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800259a:	2301      	movs	r3, #1
 800259c:	9302      	str	r3, [sp, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <xTaskResumeAll+0x114>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025ae:	f7fe fb71 	bl	8000c94 <vPortExitCritical>

	return xAlreadyYielded;
 80025b2:	9b02      	ldr	r3, [sp, #8]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	b005      	add	sp, #20
 80025b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80025bc:	20001524 	.word	0x20001524
 80025c0:	200014fc 	.word	0x200014fc
 80025c4:	200014bc 	.word	0x200014bc
 80025c8:	20001504 	.word	0x20001504
 80025cc:	20001428 	.word	0x20001428
 80025d0:	20001424 	.word	0x20001424
 80025d4:	20001510 	.word	0x20001510
 80025d8:	2000150c 	.word	0x2000150c
 80025dc:	e000ed04 	.word	0xe000ed04

080025e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80025e0:	b082      	sub	sp, #8
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <xTaskGetTickCount+0x10>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	9301      	str	r3, [sp, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80025e8:	9b01      	ldr	r3, [sp, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	b002      	add	sp, #8
 80025ee:	4770      	bx	lr
 80025f0:	20001500 	.word	0x20001500

080025f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80025f4:	b082      	sub	sp, #8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
	{
		xReturn = xTickCount;
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <xTaskGetTickCountFromISR+0x14>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	9300      	str	r3, [sp, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002600:	9b00      	ldr	r3, [sp, #0]
}
 8002602:	4618      	mov	r0, r3
 8002604:	b002      	add	sp, #8
 8002606:	4770      	bx	lr
 8002608:	20001500 	.word	0x20001500

0800260c <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800260c:	4b01      	ldr	r3, [pc, #4]	; (8002614 <uxTaskGetNumberOfTasks+0x8>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	4770      	bx	lr
 8002614:	200014fc 	.word	0x200014fc

08002618 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002618:	b084      	sub	sp, #16
 800261a:	9001      	str	r0, [sp, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800261c:	9b01      	ldr	r3, [sp, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <pcTaskGetName+0x10>
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <pcTaskGetName+0x20>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	e000      	b.n	800262a <pcTaskGetName+0x12>
 8002628:	9b01      	ldr	r3, [sp, #4]
 800262a:	9303      	str	r3, [sp, #12]
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	3334      	adds	r3, #52	; 0x34
}
 8002630:	4618      	mov	r0, r3
 8002632:	b004      	add	sp, #16
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20001424 	.word	0x20001424

0800263c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800263c:	b500      	push	{lr}
 800263e:	b087      	sub	sp, #28
 8002640:	9003      	str	r0, [sp, #12]
 8002642:	9102      	str	r1, [sp, #8]
 8002644:	9201      	str	r2, [sp, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8002646:	2300      	movs	r3, #0
 8002648:	9305      	str	r3, [sp, #20]
 800264a:	2305      	movs	r3, #5
 800264c:	9304      	str	r3, [sp, #16]

		vTaskSuspendAll();
 800264e:	f7ff ff31 	bl	80024b4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8002652:	4b3a      	ldr	r3, [pc, #232]	; (800273c <uxTaskGetSystemState+0x100>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	9a02      	ldr	r2, [sp, #8]
 8002658:	429a      	cmp	r2, r3
 800265a:	d368      	bcc.n	800272e <uxTaskGetSystemState+0xf2>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800265c:	9b04      	ldr	r3, [sp, #16]
 800265e:	3b01      	subs	r3, #1
 8002660:	9304      	str	r3, [sp, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8002662:	9a05      	ldr	r2, [sp, #20]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	461a      	mov	r2, r3
 800266e:	9b03      	ldr	r3, [sp, #12]
 8002670:	1898      	adds	r0, r3, r2
 8002672:	9a04      	ldr	r2, [sp, #16]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4a30      	ldr	r2, [pc, #192]	; (8002740 <uxTaskGetSystemState+0x104>)
 800267e:	4413      	add	r3, r2
 8002680:	2201      	movs	r2, #1
 8002682:	4619      	mov	r1, r3
 8002684:	f000 fba8 	bl	8002dd8 <prvListTasksWithinSingleList>
 8002688:	4602      	mov	r2, r0
 800268a:	9b05      	ldr	r3, [sp, #20]
 800268c:	4413      	add	r3, r2
 800268e:	9305      	str	r3, [sp, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002690:	9b04      	ldr	r3, [sp, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e2      	bne.n	800265c <uxTaskGetSystemState+0x20>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8002696:	9a05      	ldr	r2, [sp, #20]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	9b03      	ldr	r3, [sp, #12]
 80026a4:	1898      	adds	r0, r3, r2
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <uxTaskGetSystemState+0x108>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f000 fb93 	bl	8002dd8 <prvListTasksWithinSingleList>
 80026b2:	4602      	mov	r2, r0
 80026b4:	9b05      	ldr	r3, [sp, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	9305      	str	r3, [sp, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80026ba:	9a05      	ldr	r2, [sp, #20]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	9b03      	ldr	r3, [sp, #12]
 80026c8:	1898      	adds	r0, r3, r2
 80026ca:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <uxTaskGetSystemState+0x10c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2202      	movs	r2, #2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f000 fb81 	bl	8002dd8 <prvListTasksWithinSingleList>
 80026d6:	4602      	mov	r2, r0
 80026d8:	9b05      	ldr	r3, [sp, #20]
 80026da:	4413      	add	r3, r2
 80026dc:	9305      	str	r3, [sp, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80026de:	9a05      	ldr	r2, [sp, #20]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	461a      	mov	r2, r3
 80026ea:	9b03      	ldr	r3, [sp, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	2204      	movs	r2, #4
 80026f0:	4916      	ldr	r1, [pc, #88]	; (800274c <uxTaskGetSystemState+0x110>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fb70 	bl	8002dd8 <prvListTasksWithinSingleList>
 80026f8:	4602      	mov	r2, r0
 80026fa:	9b05      	ldr	r3, [sp, #20]
 80026fc:	4413      	add	r3, r2
 80026fe:	9305      	str	r3, [sp, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8002700:	9a05      	ldr	r2, [sp, #20]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	9b03      	ldr	r3, [sp, #12]
 800270e:	4413      	add	r3, r2
 8002710:	2203      	movs	r2, #3
 8002712:	490f      	ldr	r1, [pc, #60]	; (8002750 <uxTaskGetSystemState+0x114>)
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fb5f 	bl	8002dd8 <prvListTasksWithinSingleList>
 800271a:	4602      	mov	r2, r0
 800271c:	9b05      	ldr	r3, [sp, #20]
 800271e:	4413      	add	r3, r2
 8002720:	9305      	str	r3, [sp, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8002722:	9b01      	ldr	r3, [sp, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <uxTaskGetSystemState+0xf2>
					{
						*pulTotalRunTime = 0;
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800272e:	f7ff fecb 	bl	80024c8 <xTaskResumeAll>

		return uxTask;
 8002732:	9b05      	ldr	r3, [sp, #20]
	}
 8002734:	4618      	mov	r0, r3
 8002736:	b007      	add	sp, #28
 8002738:	f85d fb04 	ldr.w	pc, [sp], #4
 800273c:	200014fc 	.word	0x200014fc
 8002740:	20001428 	.word	0x20001428
 8002744:	200014b4 	.word	0x200014b4
 8002748:	200014b8 	.word	0x200014b8
 800274c:	200014d0 	.word	0x200014d0
 8002750:	200014e8 	.word	0x200014e8

08002754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002754:	b500      	push	{lr}
 8002756:	b087      	sub	sp, #28
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002758:	2300      	movs	r3, #0
 800275a:	9305      	str	r3, [sp, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <xTaskIncrementTick+0x12c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d17c      	bne.n	800285e <xTaskIncrementTick+0x10a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <xTaskIncrementTick+0x130>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	9304      	str	r3, [sp, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800276c:	4a45      	ldr	r2, [pc, #276]	; (8002884 <xTaskIncrementTick+0x130>)
 800276e:	9b04      	ldr	r3, [sp, #16]
 8002770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002772:	9b04      	ldr	r3, [sp, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d110      	bne.n	800279a <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <xTaskIncrementTick+0x134>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	9303      	str	r3, [sp, #12]
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <xTaskIncrementTick+0x138>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a41      	ldr	r2, [pc, #260]	; (8002888 <xTaskIncrementTick+0x134>)
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4a41      	ldr	r2, [pc, #260]	; (800288c <xTaskIncrementTick+0x138>)
 8002788:	9b03      	ldr	r3, [sp, #12]
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <xTaskIncrementTick+0x13c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <xTaskIncrementTick+0x13c>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	f000 fb99 	bl	8002ecc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800279a:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <xTaskIncrementTick+0x140>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	9a04      	ldr	r2, [sp, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d34d      	bcc.n	8002840 <xTaskIncrementTick+0xec>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <xTaskIncrementTick+0x134>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <xTaskIncrementTick+0x5e>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <xTaskIncrementTick+0x60>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <xTaskIncrementTick+0x6e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <xTaskIncrementTick+0x140>)
 80027ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027be:	601a      	str	r2, [r3, #0]
					break;
 80027c0:	e03e      	b.n	8002840 <xTaskIncrementTick+0xec>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <xTaskIncrementTick+0x134>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	9302      	str	r3, [sp, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027cc:	9b02      	ldr	r3, [sp, #8]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	9301      	str	r3, [sp, #4]

					if( xConstTickCount < xItemValue )
 80027d2:	9a04      	ldr	r2, [sp, #16]
 80027d4:	9b01      	ldr	r3, [sp, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d203      	bcs.n	80027e2 <xTaskIncrementTick+0x8e>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80027da:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <xTaskIncrementTick+0x140>)
 80027dc:	9b01      	ldr	r3, [sp, #4]
 80027de:	6013      	str	r3, [r2, #0]
						break;
 80027e0:	e02e      	b.n	8002840 <xTaskIncrementTick+0xec>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027e2:	9b02      	ldr	r3, [sp, #8]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe f996 	bl	8000b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027ec:	9b02      	ldr	r3, [sp, #8]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <xTaskIncrementTick+0xaa>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027f4:	9b02      	ldr	r3, [sp, #8]
 80027f6:	3318      	adds	r3, #24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe f98d 	bl	8000b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80027fe:	9b02      	ldr	r3, [sp, #8]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	2201      	movs	r2, #1
 8002804:	409a      	lsls	r2, r3
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <xTaskIncrementTick+0x144>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <xTaskIncrementTick+0x144>)
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	9b02      	ldr	r3, [sp, #8]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4a1f      	ldr	r2, [pc, #124]	; (800289c <xTaskIncrementTick+0x148>)
 800281e:	441a      	add	r2, r3
 8002820:	9b02      	ldr	r3, [sp, #8]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f7fe f923 	bl	8000a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800282c:	9b02      	ldr	r3, [sp, #8]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <xTaskIncrementTick+0x14c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	429a      	cmp	r2, r3
 8002838:	d3b4      	bcc.n	80027a4 <xTaskIncrementTick+0x50>
						{
							xSwitchRequired = pdTRUE;
 800283a:	2301      	movs	r3, #1
 800283c:	9305      	str	r3, [sp, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800283e:	e7b1      	b.n	80027a4 <xTaskIncrementTick+0x50>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <xTaskIncrementTick+0x14c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	4915      	ldr	r1, [pc, #84]	; (800289c <xTaskIncrementTick+0x148>)
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d907      	bls.n	8002868 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8002858:	2301      	movs	r3, #1
 800285a:	9305      	str	r3, [sp, #20]
 800285c:	e004      	b.n	8002868 <xTaskIncrementTick+0x114>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <xTaskIncrementTick+0x150>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <xTaskIncrementTick+0x150>)
 8002866:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <xTaskIncrementTick+0x154>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <xTaskIncrementTick+0x120>
		{
			xSwitchRequired = pdTRUE;
 8002870:	2301      	movs	r3, #1
 8002872:	9305      	str	r3, [sp, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002874:	9b05      	ldr	r3, [sp, #20]
}
 8002876:	4618      	mov	r0, r3
 8002878:	b007      	add	sp, #28
 800287a:	f85d fb04 	ldr.w	pc, [sp], #4
 800287e:	bf00      	nop
 8002880:	20001524 	.word	0x20001524
 8002884:	20001500 	.word	0x20001500
 8002888:	200014b4 	.word	0x200014b4
 800288c:	200014b8 	.word	0x200014b8
 8002890:	20001514 	.word	0x20001514
 8002894:	2000151c 	.word	0x2000151c
 8002898:	20001504 	.word	0x20001504
 800289c:	20001428 	.word	0x20001428
 80028a0:	20001424 	.word	0x20001424
 80028a4:	2000150c 	.word	0x2000150c
 80028a8:	20001510 	.word	0x20001510

080028ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028ac:	b084      	sub	sp, #16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <vTaskSwitchContext+0x74>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <vTaskSwitchContext+0x78>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028bc:	e02c      	b.n	8002918 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 80028be:	4b19      	ldr	r3, [pc, #100]	; (8002924 <vTaskSwitchContext+0x78>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <vTaskSwitchContext+0x7c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	9301      	str	r3, [sp, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	f88d 3003 	strb.w	r3, [sp, #3]
		return ucReturn;
 80028d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028d8:	f1c3 031f 	rsb	r3, r3, #31
 80028dc:	9303      	str	r3, [sp, #12]
 80028de:	9a03      	ldr	r2, [sp, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4a10      	ldr	r2, [pc, #64]	; (800292c <vTaskSwitchContext+0x80>)
 80028ea:	4413      	add	r3, r2
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	9b02      	ldr	r3, [sp, #8]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	9b02      	ldr	r3, [sp, #8]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	9b02      	ldr	r3, [sp, #8]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	9b02      	ldr	r3, [sp, #8]
 80028fe:	3308      	adds	r3, #8
 8002900:	429a      	cmp	r2, r3
 8002902:	d104      	bne.n	800290e <vTaskSwitchContext+0x62>
 8002904:	9b02      	ldr	r3, [sp, #8]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	9b02      	ldr	r3, [sp, #8]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	9b02      	ldr	r3, [sp, #8]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <vTaskSwitchContext+0x84>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	b004      	add	sp, #16
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20001524 	.word	0x20001524
 8002924:	20001510 	.word	0x20001510
 8002928:	20001504 	.word	0x20001504
 800292c:	20001428 	.word	0x20001428
 8002930:	20001424 	.word	0x20001424

08002934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002934:	b500      	push	{lr}
 8002936:	b083      	sub	sp, #12
 8002938:	9001      	str	r0, [sp, #4]
 800293a:	9100      	str	r1, [sp, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <vTaskPlaceOnEventList+0x28>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3318      	adds	r3, #24
 8002942:	4619      	mov	r1, r3
 8002944:	9801      	ldr	r0, [sp, #4]
 8002946:	f7fe f8b3 	bl	8000ab0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800294a:	2101      	movs	r1, #1
 800294c:	9800      	ldr	r0, [sp, #0]
 800294e:	f000 fedf 	bl	8003710 <prvAddCurrentTaskToDelayedList>
}
 8002952:	bf00      	nop
 8002954:	b003      	add	sp, #12
 8002956:	f85d fb04 	ldr.w	pc, [sp], #4
 800295a:	bf00      	nop
 800295c:	20001424 	.word	0x20001424

08002960 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002960:	b500      	push	{lr}
 8002962:	b085      	sub	sp, #20
 8002964:	9003      	str	r0, [sp, #12]
 8002966:	9102      	str	r1, [sp, #8]
 8002968:	9201      	str	r2, [sp, #4]
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <vTaskPlaceOnUnorderedEventList+0x34>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	9a02      	ldr	r2, [sp, #8]
 8002970:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002974:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <vTaskPlaceOnUnorderedEventList+0x34>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3318      	adds	r3, #24
 800297c:	4619      	mov	r1, r3
 800297e:	9803      	ldr	r0, [sp, #12]
 8002980:	f7fe f877 	bl	8000a72 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002984:	2101      	movs	r1, #1
 8002986:	9801      	ldr	r0, [sp, #4]
 8002988:	f000 fec2 	bl	8003710 <prvAddCurrentTaskToDelayedList>
}
 800298c:	bf00      	nop
 800298e:	b005      	add	sp, #20
 8002990:	f85d fb04 	ldr.w	pc, [sp], #4
 8002994:	20001424 	.word	0x20001424

08002998 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002998:	b500      	push	{lr}
 800299a:	b085      	sub	sp, #20
 800299c:	9001      	str	r0, [sp, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800299e:	9b01      	ldr	r3, [sp, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	9302      	str	r3, [sp, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80029a6:	9b02      	ldr	r3, [sp, #8]
 80029a8:	3318      	adds	r3, #24
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f8b4 	bl	8000b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <xTaskRemoveFromEventList+0x90>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11c      	bne.n	80029f2 <xTaskRemoveFromEventList+0x5a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80029b8:	9b02      	ldr	r3, [sp, #8]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe f8ab 	bl	8000b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029c2:	9b02      	ldr	r3, [sp, #8]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <xTaskRemoveFromEventList+0x94>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <xTaskRemoveFromEventList+0x94>)
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	9b02      	ldr	r3, [sp, #8]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <xTaskRemoveFromEventList+0x98>)
 80029e2:	441a      	add	r2, r3
 80029e4:	9b02      	ldr	r3, [sp, #8]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7fe f841 	bl	8000a72 <vListInsertEnd>
 80029f0:	e005      	b.n	80029fe <xTaskRemoveFromEventList+0x66>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029f2:	9b02      	ldr	r3, [sp, #8]
 80029f4:	3318      	adds	r3, #24
 80029f6:	4619      	mov	r1, r3
 80029f8:	480e      	ldr	r0, [pc, #56]	; (8002a34 <xTaskRemoveFromEventList+0x9c>)
 80029fa:	f7fe f83a 	bl	8000a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029fe:	9b02      	ldr	r3, [sp, #8]
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <xTaskRemoveFromEventList+0xa0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d905      	bls.n	8002a18 <xTaskRemoveFromEventList+0x80>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	9303      	str	r3, [sp, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <xTaskRemoveFromEventList+0xa4>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e001      	b.n	8002a1c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		xReturn = pdFALSE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9303      	str	r3, [sp, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002a1c:	9b03      	ldr	r3, [sp, #12]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	b005      	add	sp, #20
 8002a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a26:	bf00      	nop
 8002a28:	20001524 	.word	0x20001524
 8002a2c:	20001504 	.word	0x20001504
 8002a30:	20001428 	.word	0x20001428
 8002a34:	200014bc 	.word	0x200014bc
 8002a38:	20001424 	.word	0x20001424
 8002a3c:	20001510 	.word	0x20001510

08002a40 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8002a40:	b500      	push	{lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	9001      	str	r0, [sp, #4]
 8002a46:	9100      	str	r1, [sp, #0]
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002a48:	9b00      	ldr	r3, [sp, #0]
 8002a4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a4e:	9b01      	ldr	r3, [sp, #4]
 8002a50:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8002a52:	9b01      	ldr	r3, [sp, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	9303      	str	r3, [sp, #12]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 8002a58:	9801      	ldr	r0, [sp, #4]
 8002a5a:	f7fe f85d 	bl	8000b18 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a5e:	9b03      	ldr	r3, [sp, #12]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f858 	bl	8000b18 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002a68:	9b03      	ldr	r3, [sp, #12]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <vTaskRemoveFromUnorderedEventList+0x74>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <vTaskRemoveFromUnorderedEventList+0x74>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	9b03      	ldr	r3, [sp, #12]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8002a88:	441a      	add	r2, r3
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7fd ffee 	bl	8000a72 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <vTaskRemoveFromUnorderedEventList+0x7c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d902      	bls.n	8002aaa <vTaskRemoveFromUnorderedEventList+0x6a>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <vTaskRemoveFromUnorderedEventList+0x80>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
	}
}
 8002aaa:	bf00      	nop
 8002aac:	b005      	add	sp, #20
 8002aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ab2:	bf00      	nop
 8002ab4:	20001504 	.word	0x20001504
 8002ab8:	20001428 	.word	0x20001428
 8002abc:	20001424 	.word	0x20001424
 8002ac0:	20001510 	.word	0x20001510

08002ac4 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ac4:	b500      	push	{lr}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	9001      	str	r0, [sp, #4]
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 8002aca:	f7fe f8cf 	bl	8000c6c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <vTaskSetTimeOutState+0x28>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	9b01      	ldr	r3, [sp, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <vTaskSetTimeOutState+0x2c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	9b01      	ldr	r3, [sp, #4]
 8002adc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8002ade:	f7fe f8d9 	bl	8000c94 <vPortExitCritical>
}
 8002ae2:	bf00      	nop
 8002ae4:	b003      	add	sp, #12
 8002ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aea:	bf00      	nop
 8002aec:	20001514 	.word	0x20001514
 8002af0:	20001500 	.word	0x20001500

08002af4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002af4:	b082      	sub	sp, #8
 8002af6:	9001      	str	r0, [sp, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <vTaskInternalSetTimeOutState+0x1c>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <vTaskInternalSetTimeOutState+0x20>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	9b01      	ldr	r3, [sp, #4]
 8002b06:	605a      	str	r2, [r3, #4]
}
 8002b08:	bf00      	nop
 8002b0a:	b002      	add	sp, #8
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20001514 	.word	0x20001514
 8002b14:	20001500 	.word	0x20001500

08002b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b18:	b500      	push	{lr}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	9001      	str	r0, [sp, #4]
 8002b1e:	9100      	str	r1, [sp, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002b20:	f7fe f8a4 	bl	8000c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <xTaskCheckForTimeOut+0x7c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	9304      	str	r3, [sp, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b2a:	9b01      	ldr	r3, [sp, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	9a04      	ldr	r2, [sp, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	9303      	str	r3, [sp, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002b34:	9b00      	ldr	r3, [sp, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3c:	d102      	bne.n	8002b44 <xTaskCheckForTimeOut+0x2c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9305      	str	r3, [sp, #20]
 8002b42:	e020      	b.n	8002b86 <xTaskCheckForTimeOut+0x6e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b44:	9b01      	ldr	r3, [sp, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <xTaskCheckForTimeOut+0x80>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d007      	beq.n	8002b60 <xTaskCheckForTimeOut+0x48>
 8002b50:	9b01      	ldr	r3, [sp, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	9b04      	ldr	r3, [sp, #16]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d802      	bhi.n	8002b60 <xTaskCheckForTimeOut+0x48>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	9305      	str	r3, [sp, #20]
 8002b5e:	e012      	b.n	8002b86 <xTaskCheckForTimeOut+0x6e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b60:	9b00      	ldr	r3, [sp, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	9b03      	ldr	r3, [sp, #12]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d90b      	bls.n	8002b82 <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002b6a:	9b00      	ldr	r3, [sp, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	1ad2      	subs	r2, r2, r3
 8002b72:	9b00      	ldr	r3, [sp, #0]
 8002b74:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002b76:	9801      	ldr	r0, [sp, #4]
 8002b78:	f7ff ffbc 	bl	8002af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9305      	str	r3, [sp, #20]
 8002b80:	e001      	b.n	8002b86 <xTaskCheckForTimeOut+0x6e>
		}
		else
		{
			xReturn = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	9305      	str	r3, [sp, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002b86:	f7fe f885 	bl	8000c94 <vPortExitCritical>

	return xReturn;
 8002b8a:	9b05      	ldr	r3, [sp, #20]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	b007      	add	sp, #28
 8002b90:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b94:	20001500 	.word	0x20001500
 8002b98:	20001514 	.word	0x20001514

08002b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <vTaskMissedYield+0xc>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20001510 	.word	0x20001510

08002bac <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 8002bac:	b084      	sub	sp, #16
 8002bae:	9001      	str	r0, [sp, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002bb0:	9b01      	ldr	r3, [sp, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <uxTaskGetTaskNumber+0x16>
		{
			pxTCB = ( TCB_t * ) xTask;
 8002bb6:	9b01      	ldr	r3, [sp, #4]
 8002bb8:	9302      	str	r3, [sp, #8]
			uxReturn = pxTCB->uxTaskNumber;
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbe:	9303      	str	r3, [sp, #12]
 8002bc0:	e001      	b.n	8002bc6 <uxTaskGetTaskNumber+0x1a>
		}
		else
		{
			uxReturn = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9303      	str	r3, [sp, #12]
		}

		return uxReturn;
 8002bc6:	9b03      	ldr	r3, [sp, #12]
	}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	b004      	add	sp, #16
 8002bcc:	4770      	bx	lr

08002bce <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8002bce:	b084      	sub	sp, #16
 8002bd0:	9001      	str	r0, [sp, #4]
 8002bd2:	9100      	str	r1, [sp, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
 8002bd4:	9b01      	ldr	r3, [sp, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <vTaskSetTaskNumber+0x16>
		{
			pxTCB = ( TCB_t * ) xTask;
 8002bda:	9b01      	ldr	r3, [sp, #4]
 8002bdc:	9303      	str	r3, [sp, #12]
			pxTCB->uxTaskNumber = uxHandle;
 8002bde:	9b03      	ldr	r3, [sp, #12]
 8002be0:	9a00      	ldr	r2, [sp, #0]
 8002be2:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8002be4:	bf00      	nop
 8002be6:	b004      	add	sp, #16
 8002be8:	4770      	bx	lr
	...

08002bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bec:	b500      	push	{lr}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	9001      	str	r0, [sp, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bf2:	f000 f84f 	bl	8002c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <prvIdleTask+0x24>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d9f9      	bls.n	8002bf2 <prvIdleTask+0x6>
			{
				taskYIELD();
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <prvIdleTask+0x28>)
 8002c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c0e:	e7f0      	b.n	8002bf2 <prvIdleTask+0x6>
 8002c10:	20001428 	.word	0x20001428
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c18:	b500      	push	{lr}
 8002c1a:	b083      	sub	sp, #12
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	e00c      	b.n	8002c3c <prvInitialiseTaskLists+0x24>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c22:	9a01      	ldr	r2, [sp, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <prvInitialiseTaskLists+0x5c>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fefb 	bl	8000a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c36:	9b01      	ldr	r3, [sp, #4]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	9b01      	ldr	r3, [sp, #4]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d9ef      	bls.n	8002c22 <prvInitialiseTaskLists+0xa>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <prvInitialiseTaskLists+0x60>)
 8002c44:	f7fd fef2 	bl	8000a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c48:	480c      	ldr	r0, [pc, #48]	; (8002c7c <prvInitialiseTaskLists+0x64>)
 8002c4a:	f7fd feef 	bl	8000a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c4e:	480c      	ldr	r0, [pc, #48]	; (8002c80 <prvInitialiseTaskLists+0x68>)
 8002c50:	f7fd feec 	bl	8000a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c54:	480b      	ldr	r0, [pc, #44]	; (8002c84 <prvInitialiseTaskLists+0x6c>)
 8002c56:	f7fd fee9 	bl	8000a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c5a:	480b      	ldr	r0, [pc, #44]	; (8002c88 <prvInitialiseTaskLists+0x70>)
 8002c5c:	f7fd fee6 	bl	8000a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <prvInitialiseTaskLists+0x74>)
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <prvInitialiseTaskLists+0x60>)
 8002c64:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <prvInitialiseTaskLists+0x78>)
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <prvInitialiseTaskLists+0x64>)
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	b003      	add	sp, #12
 8002c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c74:	20001428 	.word	0x20001428
 8002c78:	2000148c 	.word	0x2000148c
 8002c7c:	200014a0 	.word	0x200014a0
 8002c80:	200014bc 	.word	0x200014bc
 8002c84:	200014d0 	.word	0x200014d0
 8002c88:	200014e8 	.word	0x200014e8
 8002c8c:	200014b4 	.word	0x200014b4
 8002c90:	200014b8 	.word	0x200014b8

08002c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c94:	b500      	push	{lr}
 8002c96:	b083      	sub	sp, #12
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c98:	e028      	b.n	8002cec <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
 8002c9a:	f7ff fc0b 	bl	80024b4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <prvCheckTasksWaitingTermination+0x68>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	9301      	str	r3, [sp, #4]
			}
			( void ) xTaskResumeAll();
 8002cae:	f7ff fc0b 	bl	80024c8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002cb2:	9b01      	ldr	r3, [sp, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d119      	bne.n	8002cec <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002cb8:	f7fd ffd8 	bl	8000c6c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <prvCheckTasksWaitingTermination+0x68>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	9300      	str	r3, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cc4:	9b00      	ldr	r3, [sp, #0]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ff25 	bl	8000b18 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <prvCheckTasksWaitingTermination+0x6c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <prvCheckTasksWaitingTermination+0x6c>)
 8002cd6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <prvCheckTasksWaitingTermination+0x70>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <prvCheckTasksWaitingTermination+0x70>)
 8002ce0:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002ce2:	f7fd ffd7 	bl	8000c94 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002ce6:	9800      	ldr	r0, [sp, #0]
 8002ce8:	f000 f8e0 	bl	8002eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <prvCheckTasksWaitingTermination+0x70>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1d2      	bne.n	8002c9a <prvCheckTasksWaitingTermination+0x6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002cf4:	bf00      	nop
 8002cf6:	b003      	add	sp, #12
 8002cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cfc:	200014d0 	.word	0x200014d0
 8002d00:	200014fc 	.word	0x200014fc
 8002d04:	200014e4 	.word	0x200014e4

08002d08 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8002d08:	b500      	push	{lr}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	9003      	str	r0, [sp, #12]
 8002d0e:	9102      	str	r1, [sp, #8]
 8002d10:	9201      	str	r2, [sp, #4]
 8002d12:	f88d 3003 	strb.w	r3, [sp, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8002d16:	9b03      	ldr	r3, [sp, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <vTaskGetInfo+0x1a>
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <vTaskGetInfo+0xcc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	e000      	b.n	8002d24 <vTaskGetInfo+0x1c>
 8002d22:	9b03      	ldr	r3, [sp, #12]
 8002d24:	9305      	str	r3, [sp, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8002d26:	9b02      	ldr	r3, [sp, #8]
 8002d28:	9a05      	ldr	r2, [sp, #20]
 8002d2a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8002d2c:	9b05      	ldr	r3, [sp, #20]
 8002d2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002d32:	9b02      	ldr	r3, [sp, #8]
 8002d34:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8002d36:	9b05      	ldr	r3, [sp, #20]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	9b02      	ldr	r3, [sp, #8]
 8002d3c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8002d3e:	9b05      	ldr	r3, [sp, #20]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d42:	9b02      	ldr	r3, [sp, #8]
 8002d44:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8002d46:	9b05      	ldr	r3, [sp, #20]
 8002d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4a:	9b02      	ldr	r3, [sp, #8]
 8002d4c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8002d4e:	9b05      	ldr	r3, [sp, #20]
 8002d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d52:	9b02      	ldr	r3, [sp, #8]
 8002d54:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8002d5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d01c      	beq.n	8002d9e <vTaskGetInfo+0x96>
		{
			if( pxTCB == pxCurrentTCB )
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <vTaskGetInfo+0xcc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	9a05      	ldr	r2, [sp, #20]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d103      	bne.n	8002d76 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8002d6e:	9b02      	ldr	r3, [sp, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	731a      	strb	r2, [r3, #12]
 8002d74:	e01a      	b.n	8002dac <vTaskGetInfo+0xa4>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8002d76:	9b02      	ldr	r3, [sp, #8]
 8002d78:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002d7c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8002d7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d112      	bne.n	8002dac <vTaskGetInfo+0xa4>
					{
						vTaskSuspendAll();
 8002d86:	f7ff fb95 	bl	80024b4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d8a:	9b05      	ldr	r3, [sp, #20]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <vTaskGetInfo+0x90>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8002d92:	9b02      	ldr	r3, [sp, #8]
 8002d94:	2202      	movs	r2, #2
 8002d96:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8002d98:	f7ff fb96 	bl	80024c8 <xTaskResumeAll>
 8002d9c:	e006      	b.n	8002dac <vTaskGetInfo+0xa4>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8002d9e:	9803      	ldr	r0, [sp, #12]
 8002da0:	f7ff f8b4 	bl	8001f0c <eTaskGetState>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	9b02      	ldr	r3, [sp, #8]
 8002daa:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8002dac:	9b01      	ldr	r3, [sp, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <vTaskGetInfo+0xbe>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8002db2:	9b05      	ldr	r3, [sp, #20]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f861 	bl	8002e7e <prvTaskCheckFreeStackSpace>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	9b02      	ldr	r3, [sp, #8]
 8002dc2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8002dc4:	e002      	b.n	8002dcc <vTaskGetInfo+0xc4>
			pxTaskStatus->usStackHighWaterMark = 0;
 8002dc6:	9b02      	ldr	r3, [sp, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	841a      	strh	r2, [r3, #32]
	}
 8002dcc:	bf00      	nop
 8002dce:	b007      	add	sp, #28
 8002dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd4:	20001424 	.word	0x20001424

08002dd8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8002dd8:	b500      	push	{lr}
 8002dda:	b08b      	sub	sp, #44	; 0x2c
 8002ddc:	9003      	str	r0, [sp, #12]
 8002dde:	9102      	str	r1, [sp, #8]
 8002de0:	4613      	mov	r3, r2
 8002de2:	f88d 3007 	strb.w	r3, [sp, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	9309      	str	r3, [sp, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d040      	beq.n	8002e74 <prvListTasksWithinSingleList+0x9c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	9308      	str	r3, [sp, #32]
 8002df6:	9b08      	ldr	r3, [sp, #32]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	9b08      	ldr	r3, [sp, #32]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	9b08      	ldr	r3, [sp, #32]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	9b08      	ldr	r3, [sp, #32]
 8002e06:	3308      	adds	r3, #8
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d104      	bne.n	8002e16 <prvListTasksWithinSingleList+0x3e>
 8002e0c:	9b08      	ldr	r3, [sp, #32]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	9b08      	ldr	r3, [sp, #32]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	9b08      	ldr	r3, [sp, #32]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	9307      	str	r3, [sp, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8002e1e:	9b02      	ldr	r3, [sp, #8]
 8002e20:	9306      	str	r3, [sp, #24]
 8002e22:	9b06      	ldr	r3, [sp, #24]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	9b06      	ldr	r3, [sp, #24]
 8002e2a:	605a      	str	r2, [r3, #4]
 8002e2c:	9b06      	ldr	r3, [sp, #24]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	9b06      	ldr	r3, [sp, #24]
 8002e32:	3308      	adds	r3, #8
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d104      	bne.n	8002e42 <prvListTasksWithinSingleList+0x6a>
 8002e38:	9b06      	ldr	r3, [sp, #24]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	9b06      	ldr	r3, [sp, #24]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	9b06      	ldr	r3, [sp, #24]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	9305      	str	r3, [sp, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8002e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	461a      	mov	r2, r3
 8002e56:	9b03      	ldr	r3, [sp, #12]
 8002e58:	1899      	adds	r1, r3, r2
 8002e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	9805      	ldr	r0, [sp, #20]
 8002e62:	f7ff ff51 	bl	8002d08 <vTaskGetInfo>
				uxTask++;
 8002e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	9309      	str	r3, [sp, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8002e6c:	9a05      	ldr	r2, [sp, #20]
 8002e6e:	9b07      	ldr	r3, [sp, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1d4      	bne.n	8002e1e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8002e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
	}
 8002e76:	4618      	mov	r0, r3
 8002e78:	b00b      	add	sp, #44	; 0x2c
 8002e7a:	f85d fb04 	ldr.w	pc, [sp], #4

08002e7e <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002e7e:	b084      	sub	sp, #16
 8002e80:	9001      	str	r0, [sp, #4]
	uint32_t ulCount = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	9303      	str	r3, [sp, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002e86:	e005      	b.n	8002e94 <prvTaskCheckFreeStackSpace+0x16>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002e88:	9b01      	ldr	r3, [sp, #4]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	9301      	str	r3, [sp, #4]
			ulCount++;
 8002e8e:	9b03      	ldr	r3, [sp, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	9303      	str	r3, [sp, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002e94:	9b01      	ldr	r3, [sp, #4]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2ba5      	cmp	r3, #165	; 0xa5
 8002e9a:	d0f5      	beq.n	8002e88 <prvTaskCheckFreeStackSpace+0xa>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002e9c:	9b03      	ldr	r3, [sp, #12]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	9303      	str	r3, [sp, #12]

		return ( uint16_t ) ulCount;
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	b29b      	uxth	r3, r3
	}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	b004      	add	sp, #16
 8002eaa:	4770      	bx	lr

08002eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002eac:	b500      	push	{lr}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	9001      	str	r0, [sp, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002eb2:	9b01      	ldr	r3, [sp, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fd54 	bl	8000964 <vPortFree>
			vPortFree( pxTCB );
 8002ebc:	9801      	ldr	r0, [sp, #4]
 8002ebe:	f7fd fd51 	bl	8000964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002ec2:	bf00      	nop
 8002ec4:	b003      	add	sp, #12
 8002ec6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002ecc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ecc:	b082      	sub	sp, #8
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <prvResetNextTaskUnblockTime+0x38>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <prvResetNextTaskUnblockTime+0x10>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <prvResetNextTaskUnblockTime+0x12>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <prvResetNextTaskUnblockTime+0x3c>)
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ee8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002eea:	e008      	b.n	8002efe <prvResetNextTaskUnblockTime+0x32>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <prvResetNextTaskUnblockTime+0x38>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	9301      	str	r3, [sp, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ef6:	9b01      	ldr	r3, [sp, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <prvResetNextTaskUnblockTime+0x3c>)
 8002efc:	6013      	str	r3, [r2, #0]
}
 8002efe:	bf00      	nop
 8002f00:	b002      	add	sp, #8
 8002f02:	4770      	bx	lr
 8002f04:	200014b4 	.word	0x200014b4
 8002f08:	2000151c 	.word	0x2000151c

08002f0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002f0c:	b082      	sub	sp, #8
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002f0e:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <xTaskGetCurrentTaskHandle+0x10>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	9301      	str	r3, [sp, #4]

		return xReturn;
 8002f14:	9b01      	ldr	r3, [sp, #4]
	}
 8002f16:	4618      	mov	r0, r3
 8002f18:	b002      	add	sp, #8
 8002f1a:	4770      	bx	lr
 8002f1c:	20001424 	.word	0x20001424

08002f20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002f20:	b500      	push	{lr}
 8002f22:	b085      	sub	sp, #20
 8002f24:	9001      	str	r0, [sp, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8002f26:	9b01      	ldr	r3, [sp, #4]
 8002f28:	9302      	str	r3, [sp, #8]
	BaseType_t xReturn = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9303      	str	r3, [sp, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002f2e:	9b01      	ldr	r3, [sp, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d06e      	beq.n	8003012 <xTaskPriorityInherit+0xf2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002f34:	9b02      	ldr	r3, [sp, #8]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	4b38      	ldr	r3, [pc, #224]	; (800301c <xTaskPriorityInherit+0xfc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d25e      	bcs.n	8003000 <xTaskPriorityInherit+0xe0>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002f42:	9b02      	ldr	r3, [sp, #8]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db06      	blt.n	8002f58 <xTaskPriorityInherit+0x38>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <xTaskPriorityInherit+0xfc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f1c3 0205 	rsb	r2, r3, #5
 8002f54:	9b02      	ldr	r3, [sp, #8]
 8002f56:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002f58:	9b02      	ldr	r3, [sp, #8]
 8002f5a:	6959      	ldr	r1, [r3, #20]
 8002f5c:	9b02      	ldr	r3, [sp, #8]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <xTaskPriorityInherit+0x100>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	d101      	bne.n	8002f74 <xTaskPriorityInherit+0x54>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <xTaskPriorityInherit+0x56>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d03a      	beq.n	8002ff0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f7a:	9b02      	ldr	r3, [sp, #8]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fdca 	bl	8000b18 <uxListRemove>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <xTaskPriorityInherit+0x96>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002f8a:	9b02      	ldr	r3, [sp, #8]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	4924      	ldr	r1, [pc, #144]	; (8003020 <xTaskPriorityInherit+0x100>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <xTaskPriorityInherit+0x96>
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <xTaskPriorityInherit+0x104>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <xTaskPriorityInherit+0x104>)
 8002fb4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <xTaskPriorityInherit+0xfc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	9b02      	ldr	r3, [sp, #8]
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002fc0:	9b02      	ldr	r3, [sp, #8]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <xTaskPriorityInherit+0x104>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	4a15      	ldr	r2, [pc, #84]	; (8003024 <xTaskPriorityInherit+0x104>)
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	9b02      	ldr	r3, [sp, #8]
 8002fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <xTaskPriorityInherit+0x100>)
 8002fe0:	441a      	add	r2, r3
 8002fe2:	9b02      	ldr	r3, [sp, #8]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7fd fd42 	bl	8000a72 <vListInsertEnd>
 8002fee:	e004      	b.n	8002ffa <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <xTaskPriorityInherit+0xfc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	9b02      	ldr	r3, [sp, #8]
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9303      	str	r3, [sp, #12]
 8002ffe:	e008      	b.n	8003012 <xTaskPriorityInherit+0xf2>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003000:	9b02      	ldr	r3, [sp, #8]
 8003002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <xTaskPriorityInherit+0xfc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	429a      	cmp	r2, r3
 800300c:	d201      	bcs.n	8003012 <xTaskPriorityInherit+0xf2>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	9303      	str	r3, [sp, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003012:	9b03      	ldr	r3, [sp, #12]
	}
 8003014:	4618      	mov	r0, r3
 8003016:	b005      	add	sp, #20
 8003018:	f85d fb04 	ldr.w	pc, [sp], #4
 800301c:	20001424 	.word	0x20001424
 8003020:	20001428 	.word	0x20001428
 8003024:	20001504 	.word	0x20001504

08003028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003028:	b500      	push	{lr}
 800302a:	b085      	sub	sp, #20
 800302c:	9001      	str	r0, [sp, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	9302      	str	r3, [sp, #8]
	BaseType_t xReturn = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	9303      	str	r3, [sp, #12]

		if( pxMutexHolder != NULL )
 8003036:	9b01      	ldr	r3, [sp, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d04f      	beq.n	80030dc <xTaskPriorityDisinherit+0xb4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800303c:	9b02      	ldr	r3, [sp, #8]
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	9b02      	ldr	r3, [sp, #8]
 8003044:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003046:	9b02      	ldr	r3, [sp, #8]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	9b02      	ldr	r3, [sp, #8]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	429a      	cmp	r2, r3
 8003050:	d044      	beq.n	80030dc <xTaskPriorityDisinherit+0xb4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003052:	9b02      	ldr	r3, [sp, #8]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	2b00      	cmp	r3, #0
 8003058:	d140      	bne.n	80030dc <xTaskPriorityDisinherit+0xb4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800305a:	9b02      	ldr	r3, [sp, #8]
 800305c:	3304      	adds	r3, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fd5a 	bl	8000b18 <uxListRemove>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d115      	bne.n	8003096 <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800306a:	9b02      	ldr	r3, [sp, #8]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	491e      	ldr	r1, [pc, #120]	; (80030e8 <xTaskPriorityDisinherit+0xc0>)
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xTaskPriorityDisinherit+0x6e>
 8003080:	9b02      	ldr	r3, [sp, #8]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	2201      	movs	r2, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <xTaskPriorityDisinherit+0xc4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4013      	ands	r3, r2
 8003092:	4a16      	ldr	r2, [pc, #88]	; (80030ec <xTaskPriorityDisinherit+0xc4>)
 8003094:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003096:	9b02      	ldr	r3, [sp, #8]
 8003098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800309a:	9b02      	ldr	r3, [sp, #8]
 800309c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f1c3 0205 	rsb	r2, r3, #5
 80030a6:	9b02      	ldr	r3, [sp, #8]
 80030a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80030aa:	9b02      	ldr	r3, [sp, #8]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <xTaskPriorityDisinherit+0xc4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <xTaskPriorityDisinherit+0xc4>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	9b02      	ldr	r3, [sp, #8]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <xTaskPriorityDisinherit+0xc0>)
 80030ca:	441a      	add	r2, r3
 80030cc:	9b02      	ldr	r3, [sp, #8]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7fd fccd 	bl	8000a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	9303      	str	r3, [sp, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80030dc:	9b03      	ldr	r3, [sp, #12]
	}
 80030de:	4618      	mov	r0, r3
 80030e0:	b005      	add	sp, #20
 80030e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e6:	bf00      	nop
 80030e8:	20001428 	.word	0x20001428
 80030ec:	20001504 	.word	0x20001504

080030f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80030f0:	b500      	push	{lr}
 80030f2:	b087      	sub	sp, #28
 80030f4:	9001      	str	r0, [sp, #4]
 80030f6:	9100      	str	r1, [sp, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80030f8:	9b01      	ldr	r3, [sp, #4]
 80030fa:	9304      	str	r3, [sp, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80030fc:	2301      	movs	r3, #1
 80030fe:	9303      	str	r3, [sp, #12]

		if( pxMutexHolder != NULL )
 8003100:	9b01      	ldr	r3, [sp, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d068      	beq.n	80031d8 <vTaskPriorityDisinheritAfterTimeout+0xe8>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003106:	9b04      	ldr	r3, [sp, #16]
 8003108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800310a:	9b00      	ldr	r3, [sp, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d202      	bcs.n	8003116 <vTaskPriorityDisinheritAfterTimeout+0x26>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003110:	9b00      	ldr	r3, [sp, #0]
 8003112:	9305      	str	r3, [sp, #20]
 8003114:	e002      	b.n	800311c <vTaskPriorityDisinheritAfterTimeout+0x2c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003116:	9b04      	ldr	r3, [sp, #16]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	9305      	str	r3, [sp, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800311c:	9b04      	ldr	r3, [sp, #16]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	9b05      	ldr	r3, [sp, #20]
 8003122:	429a      	cmp	r2, r3
 8003124:	d058      	beq.n	80031d8 <vTaskPriorityDisinheritAfterTimeout+0xe8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003126:	9b04      	ldr	r3, [sp, #16]
 8003128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d153      	bne.n	80031d8 <vTaskPriorityDisinheritAfterTimeout+0xe8>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003130:	9b04      	ldr	r3, [sp, #16]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	9302      	str	r3, [sp, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8003136:	9b04      	ldr	r3, [sp, #16]
 8003138:	9a05      	ldr	r2, [sp, #20]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800313c:	9b04      	ldr	r3, [sp, #16]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db04      	blt.n	800314e <vTaskPriorityDisinheritAfterTimeout+0x5e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003144:	9b05      	ldr	r3, [sp, #20]
 8003146:	f1c3 0205 	rsb	r2, r3, #5
 800314a:	9b04      	ldr	r3, [sp, #16]
 800314c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800314e:	9b04      	ldr	r3, [sp, #16]
 8003150:	6959      	ldr	r1, [r3, #20]
 8003152:	9a02      	ldr	r2, [sp, #8]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 800315e:	4413      	add	r3, r2
 8003160:	4299      	cmp	r1, r3
 8003162:	d101      	bne.n	8003168 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d034      	beq.n	80031d8 <vTaskPriorityDisinheritAfterTimeout+0xe8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800316e:	9b04      	ldr	r3, [sp, #16]
 8003170:	3304      	adds	r3, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fcd0 	bl	8000b18 <uxListRemove>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d115      	bne.n	80031aa <vTaskPriorityDisinheritAfterTimeout+0xba>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003194:	9b04      	ldr	r3, [sp, #16]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	2201      	movs	r2, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43da      	mvns	r2, r3
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4013      	ands	r3, r2
 80031a6:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80031a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80031aa:	9b04      	ldr	r3, [sp, #16]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	9b04      	ldr	r3, [sp, #16]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
 80031ca:	441a      	add	r2, r3
 80031cc:	9b04      	ldr	r3, [sp, #16]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fd fc4d 	bl	8000a72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031d8:	bf00      	nop
 80031da:	b007      	add	sp, #28
 80031dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031e0:	20001428 	.word	0x20001428
 80031e4:	20001504 	.word	0x20001504

080031e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80031e8:	b082      	sub	sp, #8
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <uxTaskResetEventItemValue+0x24>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	9301      	str	r3, [sp, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <uxTaskResetEventItemValue+0x24>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a05      	ldr	r2, [pc, #20]	; (800320c <uxTaskResetEventItemValue+0x24>)
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031fc:	f1c2 0205 	rsb	r2, r2, #5
 8003200:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8003202:	9b01      	ldr	r3, [sp, #4]
}
 8003204:	4618      	mov	r0, r3
 8003206:	b002      	add	sp, #8
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20001424 	.word	0x20001424

08003210 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <pvTaskIncrementMutexHeldCount+0x1c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <pvTaskIncrementMutexHeldCount+0x1c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321e:	3201      	adds	r2, #1
 8003220:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003222:	4b02      	ldr	r3, [pc, #8]	; (800322c <pvTaskIncrementMutexHeldCount+0x1c>)
 8003224:	681b      	ldr	r3, [r3, #0]
	}
 8003226:	4618      	mov	r0, r3
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20001424 	.word	0x20001424

08003230 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8003230:	b500      	push	{lr}
 8003232:	b085      	sub	sp, #20
 8003234:	9001      	str	r0, [sp, #4]
 8003236:	9100      	str	r1, [sp, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8003238:	f7fd fd18 	bl	8000c6c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <ulTaskNotifyTake+0x88>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <ulTaskNotifyTake+0x3e>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003246:	4b1c      	ldr	r3, [pc, #112]	; (80032b8 <ulTaskNotifyTake+0x88>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8003250:	9b00      	ldr	r3, [sp, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <ulTaskNotifyTake+0x3e>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003256:	2101      	movs	r1, #1
 8003258:	9800      	ldr	r0, [sp, #0]
 800325a:	f000 fa59 	bl	8003710 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <ulTaskNotifyTake+0x8c>)
 8003260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800326e:	f7fd fd11 	bl	8000c94 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003272:	f7fd fcfb 	bl	8000c6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <ulTaskNotifyTake+0x88>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	9303      	str	r3, [sp, #12]

			if( ulReturn != 0UL )
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <ulTaskNotifyTake+0x6e>
			{
				if( xClearCountOnExit != pdFALSE )
 8003284:	9b01      	ldr	r3, [sp, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <ulTaskNotifyTake+0x64>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <ulTaskNotifyTake+0x88>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
 8003292:	e004      	b.n	800329e <ulTaskNotifyTake+0x6e>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <ulTaskNotifyTake+0x88>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	9a03      	ldr	r2, [sp, #12]
 800329a:	3a01      	subs	r2, #1
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <ulTaskNotifyTake+0x88>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80032a8:	f7fd fcf4 	bl	8000c94 <vPortExitCritical>

		return ulReturn;
 80032ac:	9b03      	ldr	r3, [sp, #12]
	}
 80032ae:	4618      	mov	r0, r3
 80032b0:	b005      	add	sp, #20
 80032b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b6:	bf00      	nop
 80032b8:	20001424 	.word	0x20001424
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80032c0:	b500      	push	{lr}
 80032c2:	b087      	sub	sp, #28
 80032c4:	9003      	str	r0, [sp, #12]
 80032c6:	9102      	str	r1, [sp, #8]
 80032c8:	9201      	str	r2, [sp, #4]
 80032ca:	9300      	str	r3, [sp, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80032cc:	f7fd fcce 	bl	8000c6c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80032d0:	4b26      	ldr	r3, [pc, #152]	; (800336c <xTaskNotifyWait+0xac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d01a      	beq.n	8003314 <xTaskNotifyWait+0x54>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80032de:	4b23      	ldr	r3, [pc, #140]	; (800336c <xTaskNotifyWait+0xac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032e4:	9a03      	ldr	r2, [sp, #12]
 80032e6:	43d2      	mvns	r2, r2
 80032e8:	400a      	ands	r2, r1
 80032ea:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <xTaskNotifyWait+0xac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80032f6:	9b00      	ldr	r3, [sp, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <xTaskNotifyWait+0x54>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032fc:	2101      	movs	r1, #1
 80032fe:	9800      	ldr	r0, [sp, #0]
 8003300:	f000 fa06 	bl	8003710 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <xTaskNotifyWait+0xb0>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003314:	f7fd fcbe 	bl	8000c94 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003318:	f7fd fca8 	bl	8000c6c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800331c:	9b01      	ldr	r3, [sp, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <xTaskNotifyWait+0x6c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <xTaskNotifyWait+0xac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <xTaskNotifyWait+0xac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d002      	beq.n	8003340 <xTaskNotifyWait+0x80>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	9305      	str	r3, [sp, #20]
 800333e:	e008      	b.n	8003352 <xTaskNotifyWait+0x92>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <xTaskNotifyWait+0xac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003346:	9a02      	ldr	r2, [sp, #8]
 8003348:	43d2      	mvns	r2, r2
 800334a:	400a      	ands	r2, r1
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800334e:	2301      	movs	r3, #1
 8003350:	9305      	str	r3, [sp, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <xTaskNotifyWait+0xac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800335c:	f7fd fc9a 	bl	8000c94 <vPortExitCritical>

		return xReturn;
 8003360:	9b05      	ldr	r3, [sp, #20]
	}
 8003362:	4618      	mov	r0, r3
 8003364:	b007      	add	sp, #28
 8003366:	f85d fb04 	ldr.w	pc, [sp], #4
 800336a:	bf00      	nop
 800336c:	20001424 	.word	0x20001424
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003374:	b500      	push	{lr}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	9003      	str	r0, [sp, #12]
 800337a:	9102      	str	r1, [sp, #8]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	f88d 3007 	strb.w	r3, [sp, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003384:	2301      	movs	r3, #1
 8003386:	9307      	str	r3, [sp, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8003388:	9b03      	ldr	r3, [sp, #12]
 800338a:	9306      	str	r3, [sp, #24]

		taskENTER_CRITICAL();
 800338c:	f7fd fc6e 	bl	8000c6c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003390:	9b00      	ldr	r3, [sp, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <xTaskGenericNotify+0x2a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003396:	9b06      	ldr	r3, [sp, #24]
 8003398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800339a:	9b00      	ldr	r3, [sp, #0]
 800339c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800339e:	9b06      	ldr	r3, [sp, #24]
 80033a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033a4:	f88d 3017 	strb.w	r3, [sp, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80033a8:	9b06      	ldr	r3, [sp, #24]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80033b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d829      	bhi.n	800340c <xTaskGenericNotify+0x98>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <xTaskGenericNotify+0x4c>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	0800340d 	.word	0x0800340d
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033e3 	.word	0x080033e3
 80033cc:	080033ef 	.word	0x080033ef
 80033d0:	080033f7 	.word	0x080033f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80033d4:	9b06      	ldr	r3, [sp, #24]
 80033d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033d8:	9b02      	ldr	r3, [sp, #8]
 80033da:	431a      	orrs	r2, r3
 80033dc:	9b06      	ldr	r3, [sp, #24]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80033e0:	e014      	b.n	800340c <xTaskGenericNotify+0x98>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80033e2:	9b06      	ldr	r3, [sp, #24]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	9b06      	ldr	r3, [sp, #24]
 80033ea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80033ec:	e00e      	b.n	800340c <xTaskGenericNotify+0x98>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80033ee:	9b06      	ldr	r3, [sp, #24]
 80033f0:	9a02      	ldr	r2, [sp, #8]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80033f4:	e00a      	b.n	800340c <xTaskGenericNotify+0x98>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80033f6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d003      	beq.n	8003406 <xTaskGenericNotify+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80033fe:	9b06      	ldr	r3, [sp, #24]
 8003400:	9a02      	ldr	r2, [sp, #8]
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003404:	e001      	b.n	800340a <xTaskGenericNotify+0x96>
						xReturn = pdFAIL;
 8003406:	2300      	movs	r3, #0
 8003408:	9307      	str	r3, [sp, #28]
					break;
 800340a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800340c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d12a      	bne.n	800346a <xTaskGenericNotify+0xf6>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003414:	9b06      	ldr	r3, [sp, #24]
 8003416:	3304      	adds	r3, #4
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd fb7d 	bl	8000b18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800341e:	9b06      	ldr	r3, [sp, #24]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <xTaskGenericNotify+0x104>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	4a12      	ldr	r2, [pc, #72]	; (8003478 <xTaskGenericNotify+0x104>)
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	9b06      	ldr	r3, [sp, #24]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <xTaskGenericNotify+0x108>)
 800343e:	441a      	add	r2, r3
 8003440:	9b06      	ldr	r3, [sp, #24]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f7fd fb13 	bl	8000a72 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800344c:	9b06      	ldr	r3, [sp, #24]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <xTaskGenericNotify+0x10c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	429a      	cmp	r2, r3
 8003458:	d907      	bls.n	800346a <xTaskGenericNotify+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <xTaskGenericNotify+0x110>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800346a:	f7fd fc13 	bl	8000c94 <vPortExitCritical>

		return xReturn;
 800346e:	9b07      	ldr	r3, [sp, #28]
	}
 8003470:	4618      	mov	r0, r3
 8003472:	b009      	add	sp, #36	; 0x24
 8003474:	f85d fb04 	ldr.w	pc, [sp], #4
 8003478:	20001504 	.word	0x20001504
 800347c:	20001428 	.word	0x20001428
 8003480:	20001424 	.word	0x20001424
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003488:	b500      	push	{lr}
 800348a:	b08d      	sub	sp, #52	; 0x34
 800348c:	9003      	str	r0, [sp, #12]
 800348e:	9102      	str	r1, [sp, #8]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	f88d 3007 	strb.w	r3, [sp, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003498:	2301      	movs	r3, #1
 800349a:	930b      	str	r3, [sp, #44]	; 0x2c
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800349c:	9b03      	ldr	r3, [sp, #12]
 800349e:	930a      	str	r3, [sp, #40]	; 0x28
	__asm volatile
 80034a0:	f3ef 8211 	mrs	r2, BASEPRI
 80034a4:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	9207      	str	r2, [sp, #28]
 80034b6:	9306      	str	r3, [sp, #24]
	return ulOriginalBASEPRI;
 80034b8:	9b07      	ldr	r3, [sp, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034ba:	9309      	str	r3, [sp, #36]	; 0x24
		{
			if( pulPreviousNotificationValue != NULL )
 80034bc:	9b00      	ldr	r3, [sp, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <xTaskGenericNotifyFromISR+0x42>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80034c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c6:	9b00      	ldr	r3, [sp, #0]
 80034c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80034ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034cc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034d0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80034d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80034dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d829      	bhi.n	8003538 <xTaskGenericNotifyFromISR+0xb0>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <xTaskGenericNotifyFromISR+0x64>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003539 	.word	0x08003539
 80034f0:	08003501 	.word	0x08003501
 80034f4:	0800350f 	.word	0x0800350f
 80034f8:	0800351b 	.word	0x0800351b
 80034fc:	08003523 	.word	0x08003523
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	431a      	orrs	r2, r3
 8003508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800350c:	e014      	b.n	8003538 <xTaskGenericNotifyFromISR+0xb0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800350e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003518:	e00e      	b.n	8003538 <xTaskGenericNotifyFromISR+0xb0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800351a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800351c:	9a02      	ldr	r2, [sp, #8]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003520:	e00a      	b.n	8003538 <xTaskGenericNotifyFromISR+0xb0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003522:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <xTaskGenericNotifyFromISR+0xaa>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800352a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800352c:	9a02      	ldr	r2, [sp, #8]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003530:	e001      	b.n	8003536 <xTaskGenericNotifyFromISR+0xae>
						xReturn = pdFAIL;
 8003532:	2300      	movs	r3, #0
 8003534:	930b      	str	r3, [sp, #44]	; 0x2c
					break;
 8003536:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003538:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800353c:	2b01      	cmp	r3, #1
 800353e:	d137      	bne.n	80035b0 <xTaskGenericNotifyFromISR+0x128>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <xTaskGenericNotifyFromISR+0x13c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11c      	bne.n	8003582 <xTaskGenericNotifyFromISR+0xfa>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800354a:	3304      	adds	r3, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd fae3 	bl	8000b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	2201      	movs	r2, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <xTaskGenericNotifyFromISR+0x140>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <xTaskGenericNotifyFromISR+0x140>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <xTaskGenericNotifyFromISR+0x144>)
 8003572:	441a      	add	r2, r3
 8003574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003576:	3304      	adds	r3, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f7fd fa79 	bl	8000a72 <vListInsertEnd>
 8003580:	e005      	b.n	800358e <xTaskGenericNotifyFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003584:	3318      	adds	r3, #24
 8003586:	4619      	mov	r1, r3
 8003588:	4811      	ldr	r0, [pc, #68]	; (80035d0 <xTaskGenericNotifyFromISR+0x148>)
 800358a:	f7fd fa72 	bl	8000a72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800358e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <xTaskGenericNotifyFromISR+0x14c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	429a      	cmp	r2, r3
 800359a:	d909      	bls.n	80035b0 <xTaskGenericNotifyFromISR+0x128>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800359c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <xTaskGenericNotifyFromISR+0x122>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80035a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e002      	b.n	80035b0 <xTaskGenericNotifyFromISR+0x128>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <xTaskGenericNotifyFromISR+0x150>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035b2:	9305      	str	r3, [sp, #20]
	__asm volatile
 80035b4:	9b05      	ldr	r3, [sp, #20]
 80035b6:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80035ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	}
 80035bc:	4618      	mov	r0, r3
 80035be:	b00d      	add	sp, #52	; 0x34
 80035c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80035c4:	20001524 	.word	0x20001524
 80035c8:	20001504 	.word	0x20001504
 80035cc:	20001428 	.word	0x20001428
 80035d0:	200014bc 	.word	0x200014bc
 80035d4:	20001424 	.word	0x20001424
 80035d8:	20001510 	.word	0x20001510

080035dc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80035dc:	b500      	push	{lr}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	9001      	str	r0, [sp, #4]
 80035e2:	9100      	str	r1, [sp, #0]
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	9307      	str	r3, [sp, #28]
	__asm volatile
 80035e8:	f3ef 8211 	mrs	r2, BASEPRI
 80035ec:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	9204      	str	r2, [sp, #16]
 80035fe:	9303      	str	r3, [sp, #12]
	return ulOriginalBASEPRI;
 8003600:	9b04      	ldr	r3, [sp, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003602:	9306      	str	r3, [sp, #24]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003604:	9b07      	ldr	r3, [sp, #28]
 8003606:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800360a:	f88d 3017 	strb.w	r3, [sp, #23]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800360e:	9b07      	ldr	r3, [sp, #28]
 8003610:	2202      	movs	r2, #2
 8003612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8003616:	9b07      	ldr	r3, [sp, #28]
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003620:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d137      	bne.n	8003698 <vTaskNotifyGiveFromISR+0xbc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003628:	4b20      	ldr	r3, [pc, #128]	; (80036ac <vTaskNotifyGiveFromISR+0xd0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11c      	bne.n	800366a <vTaskNotifyGiveFromISR+0x8e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003630:	9b07      	ldr	r3, [sp, #28]
 8003632:	3304      	adds	r3, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fa6f 	bl	8000b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800363a:	9b07      	ldr	r3, [sp, #28]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	2201      	movs	r2, #1
 8003640:	409a      	lsls	r2, r3
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <vTaskNotifyGiveFromISR+0xd4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <vTaskNotifyGiveFromISR+0xd4>)
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	9b07      	ldr	r3, [sp, #28]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <vTaskNotifyGiveFromISR+0xd8>)
 800365a:	441a      	add	r2, r3
 800365c:	9b07      	ldr	r3, [sp, #28]
 800365e:	3304      	adds	r3, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f7fd fa05 	bl	8000a72 <vListInsertEnd>
 8003668:	e005      	b.n	8003676 <vTaskNotifyGiveFromISR+0x9a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800366a:	9b07      	ldr	r3, [sp, #28]
 800366c:	3318      	adds	r3, #24
 800366e:	4619      	mov	r1, r3
 8003670:	4811      	ldr	r0, [pc, #68]	; (80036b8 <vTaskNotifyGiveFromISR+0xdc>)
 8003672:	f7fd f9fe 	bl	8000a72 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003676:	9b07      	ldr	r3, [sp, #28]
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <vTaskNotifyGiveFromISR+0xe0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	429a      	cmp	r2, r3
 8003682:	d909      	bls.n	8003698 <vTaskNotifyGiveFromISR+0xbc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003684:	9b00      	ldr	r3, [sp, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <vTaskNotifyGiveFromISR+0xb6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800368a:	9b00      	ldr	r3, [sp, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e002      	b.n	8003698 <vTaskNotifyGiveFromISR+0xbc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <vTaskNotifyGiveFromISR+0xe4>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	9b06      	ldr	r3, [sp, #24]
 800369a:	9302      	str	r3, [sp, #8]
	__asm volatile
 800369c:	9b02      	ldr	r3, [sp, #8]
 800369e:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80036a2:	bf00      	nop
 80036a4:	b009      	add	sp, #36	; 0x24
 80036a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80036aa:	bf00      	nop
 80036ac:	20001524 	.word	0x20001524
 80036b0:	20001504 	.word	0x20001504
 80036b4:	20001428 	.word	0x20001428
 80036b8:	200014bc 	.word	0x200014bc
 80036bc:	20001424 	.word	0x20001424
 80036c0:	20001510 	.word	0x20001510

080036c4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80036c4:	b500      	push	{lr}
 80036c6:	b085      	sub	sp, #20
 80036c8:	9001      	str	r0, [sp, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80036ca:	9b01      	ldr	r3, [sp, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <xTaskNotifyStateClear+0x12>
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <xTaskNotifyStateClear+0x48>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	e000      	b.n	80036d8 <xTaskNotifyStateClear+0x14>
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	9302      	str	r3, [sp, #8]

		taskENTER_CRITICAL();
 80036da:	f7fd fac7 	bl	8000c6c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80036de:	9b02      	ldr	r3, [sp, #8]
 80036e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d106      	bne.n	80036f8 <xTaskNotifyStateClear+0x34>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ea:	9b02      	ldr	r3, [sp, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 80036f2:	2301      	movs	r3, #1
 80036f4:	9303      	str	r3, [sp, #12]
 80036f6:	e001      	b.n	80036fc <xTaskNotifyStateClear+0x38>
			}
			else
			{
				xReturn = pdFAIL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	9303      	str	r3, [sp, #12]
			}
		}
		taskEXIT_CRITICAL();
 80036fc:	f7fd faca 	bl	8000c94 <vPortExitCritical>

		return xReturn;
 8003700:	9b03      	ldr	r3, [sp, #12]
	}
 8003702:	4618      	mov	r0, r3
 8003704:	b005      	add	sp, #20
 8003706:	f85d fb04 	ldr.w	pc, [sp], #4
 800370a:	bf00      	nop
 800370c:	20001424 	.word	0x20001424

08003710 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003710:	b500      	push	{lr}
 8003712:	b085      	sub	sp, #20
 8003714:	9001      	str	r0, [sp, #4]
 8003716:	9100      	str	r1, [sp, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <prvAddCurrentTaskToDelayedList+0xac>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	9303      	str	r3, [sp, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3304      	adds	r3, #4
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd f9f7 	bl	8000b18 <uxListRemove>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <prvAddCurrentTaskToDelayedList+0x38>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43da      	mvns	r2, r3
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4013      	ands	r3, r2
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003746:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003748:	9b01      	ldr	r3, [sp, #4]
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800374e:	d10a      	bne.n	8003766 <prvAddCurrentTaskToDelayedList+0x56>
 8003750:	9b00      	ldr	r3, [sp, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <prvAddCurrentTaskToDelayedList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	481a      	ldr	r0, [pc, #104]	; (80037c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003760:	f7fd f987 	bl	8000a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003764:	e026      	b.n	80037b4 <prvAddCurrentTaskToDelayedList+0xa4>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003766:	9a03      	ldr	r2, [sp, #12]
 8003768:	9b01      	ldr	r3, [sp, #4]
 800376a:	4413      	add	r3, r2
 800376c:	9302      	str	r3, [sp, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	9a02      	ldr	r2, [sp, #8]
 8003774:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003776:	9a02      	ldr	r2, [sp, #8]
 8003778:	9b03      	ldr	r3, [sp, #12]
 800377a:	429a      	cmp	r2, r3
 800377c:	d209      	bcs.n	8003792 <prvAddCurrentTaskToDelayedList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fd f990 	bl	8000ab0 <vListInsert>
}
 8003790:	e010      	b.n	80037b4 <prvAddCurrentTaskToDelayedList+0xa4>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7fd f986 	bl	8000ab0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	9a02      	ldr	r2, [sp, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d202      	bcs.n	80037b4 <prvAddCurrentTaskToDelayedList+0xa4>
					xNextTaskUnblockTime = xTimeToWake;
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037b0:	9b02      	ldr	r3, [sp, #8]
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	b005      	add	sp, #20
 80037b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80037bc:	20001500 	.word	0x20001500
 80037c0:	20001424 	.word	0x20001424
 80037c4:	20001504 	.word	0x20001504
 80037c8:	200014e8 	.word	0x200014e8
 80037cc:	200014b8 	.word	0x200014b8
 80037d0:	200014b4 	.word	0x200014b4
 80037d4:	2000151c 	.word	0x2000151c

080037d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d8:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_Init+0x24>)
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_Init+0x24>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f043 0310 	orr.w	r3, r3, #16
 80037e4:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e6:	2003      	movs	r0, #3
 80037e8:	f000 fa6a 	bl	8003cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 f821 	bl	8003834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f2:	f002 fae5 	bl	8005dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	bd08      	pop	{r3, pc}
 80037fc:	40022000 	.word	0x40022000

08003800 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003800:	b508      	push	{r3, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_DeInit+0x28>)
 8003804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003808:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <HAL_DeInit+0x28>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_DeInit+0x28>)
 8003812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003816:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_DeInit+0x28>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif
  
  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800381e:	f002 fad1 	bl	8005dc4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd08      	pop	{r3, pc}
 8003828:	40021000 	.word	0x40021000
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	4770      	bx	lr
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	4770      	bx	lr

08003834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003834:	b500      	push	{lr}
 8003836:	b083      	sub	sp, #12
 8003838:	9001      	str	r0, [sp, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800383a:	f004 fd23 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_InitTick+0x30>)
 8003842:	fba3 2302 	umull	r2, r3, r3, r2
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fa80 	bl	8003d4e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800384e:	2200      	movs	r2, #0
 8003850:	9901      	ldr	r1, [sp, #4]
 8003852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003856:	f000 fa3d 	bl	8003cd4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	b003      	add	sp, #12
 8003860:	f85d fb04 	ldr.w	pc, [sp], #4
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_IncTick+0x10>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a02      	ldr	r2, [pc, #8]	; (8003878 <HAL_IncTick+0x10>)
 8003870:	6013      	str	r3, [r2, #0]
}
 8003872:	bf00      	nop
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20001528 	.word	0x20001528

0800387c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800387c:	4b01      	ldr	r3, [pc, #4]	; (8003884 <HAL_GetTick+0x8>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	4770      	bx	lr
 8003884:	20001528 	.word	0x20001528

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003888:	b500      	push	{lr}
 800388a:	b085      	sub	sp, #20
 800388c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	9303      	str	r3, [sp, #12]
  tickstart = HAL_GetTick();
 8003892:	f7ff fff3 	bl	800387c <HAL_GetTick>
 8003896:	9003      	str	r0, [sp, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8003898:	bf00      	nop
 800389a:	f7ff ffef 	bl	800387c <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	9b01      	ldr	r3, [sp, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3f7      	bcc.n	800389a <HAL_Delay+0x12>
  {
  }
}
 80038aa:	bf00      	nop
 80038ac:	b005      	add	sp, #20
 80038ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080038b4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <HAL_SuspendTick+0x10>)
 80038b6:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_SuspendTick+0x10>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0302 	bic.w	r3, r3, #2
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	4770      	bx	lr
 80038c4:	e000e010 	.word	0xe000e010

080038c8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80038c8:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_ResumeTick+0x10>)
 80038ca:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_ResumeTick+0x10>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	4770      	bx	lr
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_GetHalVersion>:
  * @brief  This method returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F1xx_HAL_VERSION;
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <HAL_GetHalVersion+0x8>)
}
 80038de:	4618      	mov	r0, r3
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	01000400 	.word	0x01000400

080038e8 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038e8:	b082      	sub	sp, #8
  return((DBGMCU->IDCODE) >> POSITION_VAL(DBGMCU_IDCODE_REV_ID));
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_GetREVID+0x24>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_GetREVID+0x28>)
 80038f0:	9301      	str	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	9b01      	ldr	r3, [sp, #4]
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	9300      	str	r3, [sp, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80038fa:	9b00      	ldr	r3, [sp, #0]
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003904:	4618      	mov	r0, r3
 8003906:	b002      	add	sp, #8
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e0042000 	.word	0xe0042000
 8003910:	ffff0000 	.word	0xffff0000

08003914 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <HAL_GetDEVID+0xc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800391c:	4618      	mov	r0, r3
 800391e:	4770      	bx	lr
 8003920:	e0042000 	.word	0xe0042000

08003924 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003924:	4a03      	ldr	r2, [pc, #12]	; (8003934 <HAL_DBGMCU_EnableDBGSleepMode+0x10>)
 8003926:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_DBGMCU_EnableDBGSleepMode+0x10>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6053      	str	r3, [r2, #4]
}
 8003930:	bf00      	nop
 8003932:	4770      	bx	lr
 8003934:	e0042000 	.word	0xe0042000

08003938 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003938:	4a03      	ldr	r2, [pc, #12]	; (8003948 <HAL_DBGMCU_DisableDBGSleepMode+0x10>)
 800393a:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_DBGMCU_DisableDBGSleepMode+0x10>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	6053      	str	r3, [r2, #4]
}
 8003944:	bf00      	nop
 8003946:	4770      	bx	lr
 8003948:	e0042000 	.word	0xe0042000

0800394c <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_DBGMCU_EnableDBGStopMode+0x10>)
 800394e:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_DBGMCU_EnableDBGStopMode+0x10>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	6053      	str	r3, [r2, #4]
}
 8003958:	bf00      	nop
 800395a:	4770      	bx	lr
 800395c:	e0042000 	.word	0xe0042000

08003960 <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003960:	4a03      	ldr	r2, [pc, #12]	; (8003970 <HAL_DBGMCU_DisableDBGStopMode+0x10>)
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_DBGMCU_DisableDBGStopMode+0x10>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f023 0302 	bic.w	r3, r3, #2
 800396a:	6053      	str	r3, [r2, #4]
}
 800396c:	bf00      	nop
 800396e:	4770      	bx	lr
 8003970:	e0042000 	.word	0xe0042000

08003974 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_DBGMCU_EnableDBGStandbyMode+0x10>)
 8003976:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_DBGMCU_EnableDBGStandbyMode+0x10>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6053      	str	r3, [r2, #4]
}
 8003980:	bf00      	nop
 8003982:	4770      	bx	lr
 8003984:	e0042000 	.word	0xe0042000

08003988 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003988:	4a03      	ldr	r2, [pc, #12]	; (8003998 <HAL_DBGMCU_DisableDBGStandbyMode+0x10>)
 800398a:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_DBGMCU_DisableDBGStandbyMode+0x10>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	6053      	str	r3, [r2, #4]
}
 8003994:	bf00      	nop
 8003996:	4770      	bx	lr
 8003998:	e0042000 	.word	0xe0042000

0800399c <NVIC_SetPriorityGrouping>:
{
 800399c:	b084      	sub	sp, #16
 800399e:	9001      	str	r0, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a0:	9b01      	ldr	r3, [sp, #4]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	9303      	str	r3, [sp, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <NVIC_SetPriorityGrouping+0x3c>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ae:	9a02      	ldr	r2, [sp, #8]
 80039b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b4:	4013      	ands	r3, r2
 80039b6:	9302      	str	r3, [sp, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039bc:	9b02      	ldr	r3, [sp, #8]
 80039be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c8:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 80039ca:	4a03      	ldr	r2, [pc, #12]	; (80039d8 <NVIC_SetPriorityGrouping+0x3c>)
 80039cc:	9b02      	ldr	r3, [sp, #8]
 80039ce:	60d3      	str	r3, [r2, #12]
}
 80039d0:	bf00      	nop
 80039d2:	b004      	add	sp, #16
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <NVIC_GetPriorityGrouping+0x10>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EnableIRQ>:
{
 80039f0:	b082      	sub	sp, #8
 80039f2:	4603      	mov	r3, r0
 80039f4:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <NVIC_EnableIRQ+0x28>)
 80039fa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003a04:	f002 021f 	and.w	r2, r2, #31
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a12:	bf00      	nop
 8003a14:	b002      	add	sp, #8
 8003a16:	4770      	bx	lr
 8003a18:	e000e100 	.word	0xe000e100

08003a1c <NVIC_DisableIRQ>:
{
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a24:	4908      	ldr	r1, [pc, #32]	; (8003a48 <NVIC_DisableIRQ+0x2c>)
 8003a26:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003a30:	f002 021f 	and.w	r2, r2, #31
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a40:	bf00      	nop
 8003a42:	b002      	add	sp, #8
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	e000e100 	.word	0xe000e100

08003a4c <NVIC_GetPendingIRQ>:
{
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f88d 3007 	strb.w	r3, [sp, #7]
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <NVIC_GetPendingIRQ+0x2c>)
 8003a56:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	3340      	adds	r3, #64	; 0x40
 8003a5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	f003 0301 	and.w	r3, r3, #1
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	b002      	add	sp, #8
 8003a76:	4770      	bx	lr
 8003a78:	e000e100 	.word	0xe000e100

08003a7c <NVIC_SetPendingIRQ>:
{
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a84:	4908      	ldr	r1, [pc, #32]	; (8003aa8 <NVIC_SetPendingIRQ+0x2c>)
 8003a86:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003a90:	f002 021f 	and.w	r2, r2, #31
 8003a94:	2001      	movs	r0, #1
 8003a96:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9a:	3340      	adds	r3, #64	; 0x40
 8003a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aa0:	bf00      	nop
 8003aa2:	b002      	add	sp, #8
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000e100 	.word	0xe000e100

08003aac <NVIC_ClearPendingIRQ>:
{
 8003aac:	b082      	sub	sp, #8
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f88d 3007 	strb.w	r3, [sp, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003ab4:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <NVIC_ClearPendingIRQ+0x2c>)
 8003ab6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003ac0:	f002 021f 	and.w	r2, r2, #31
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	3360      	adds	r3, #96	; 0x60
 8003acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ad0:	bf00      	nop
 8003ad2:	b002      	add	sp, #8
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	e000e100 	.word	0xe000e100

08003adc <NVIC_GetActive>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
 */
__STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
{
 8003adc:	b082      	sub	sp, #8
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f88d 3007 	strb.w	r3, [sp, #7]
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8003ae4:	4a08      	ldr	r2, [pc, #32]	; (8003b08 <NVIC_GetActive+0x2c>)
 8003ae6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	3380      	adds	r3, #128	; 0x80
 8003aee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	fa22 f303 	lsr.w	r3, r2, r3
 8003afe:	f003 0301 	and.w	r3, r3, #1
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	b002      	add	sp, #8
 8003b06:	4770      	bx	lr
 8003b08:	e000e100 	.word	0xe000e100

08003b0c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	4603      	mov	r3, r0
 8003b10:	9100      	str	r1, [sp, #0]
 8003b12:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) < 0)
 8003b16:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da0c      	bge.n	8003b38 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	490d      	ldr	r1, [pc, #52]	; (8003b54 <NVIC_SetPriority+0x48>)
 8003b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	3b04      	subs	r3, #4
 8003b2a:	9a00      	ldr	r2, [sp, #0]
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	0112      	lsls	r2, r2, #4
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	440b      	add	r3, r1
 8003b34:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b36:	e009      	b.n	8003b4c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b38:	4907      	ldr	r1, [pc, #28]	; (8003b58 <NVIC_SetPriority+0x4c>)
 8003b3a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003b3e:	9a00      	ldr	r2, [sp, #0]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b4c:	bf00      	nop
 8003b4e:	b002      	add	sp, #8
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000ed00 	.word	0xe000ed00
 8003b58:	e000e100 	.word	0xe000e100

08003b5c <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f88d 3007 	strb.w	r3, [sp, #7]

  if ((int32_t)(IRQn) < 0)
 8003b64:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da0b      	bge.n	8003b84 <NVIC_GetPriority+0x28>
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <NVIC_GetPriority+0x40>)
 8003b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3b04      	subs	r3, #4
 8003b78:	4413      	add	r3, r2
 8003b7a:	7e1b      	ldrb	r3, [r3, #24]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e008      	b.n	8003b96 <NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8003b84:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <NVIC_GetPriority+0x44>)
 8003b86:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	b2db      	uxtb	r3, r3
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	b002      	add	sp, #8
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	9003      	str	r0, [sp, #12]
 8003ba8:	9102      	str	r1, [sp, #8]
 8003baa:	9201      	str	r2, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	9307      	str	r3, [sp, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb4:	9b07      	ldr	r3, [sp, #28]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	bf28      	it	cs
 8003bbe:	2304      	movcs	r3, #4
 8003bc0:	9306      	str	r3, [sp, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc2:	9b07      	ldr	r3, [sp, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d902      	bls.n	8003bd0 <NVIC_EncodePriority+0x2c>
 8003bca:	9b07      	ldr	r3, [sp, #28]
 8003bcc:	3b03      	subs	r3, #3
 8003bce:	e000      	b.n	8003bd2 <NVIC_EncodePriority+0x2e>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9305      	str	r3, [sp, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	9b06      	ldr	r3, [sp, #24]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	9b02      	ldr	r3, [sp, #8]
 8003be0:	401a      	ands	r2, r3
 8003be2:	9b05      	ldr	r3, [sp, #20]
 8003be4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be6:	2101      	movs	r1, #1
 8003be8:	9b05      	ldr	r3, [sp, #20]
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	1e59      	subs	r1, r3, #1
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	4313      	orrs	r3, r2
         );
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	b008      	add	sp, #32
 8003bfa:	4770      	bx	lr

08003bfc <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8003bfc:	b088      	sub	sp, #32
 8003bfe:	9003      	str	r0, [sp, #12]
 8003c00:	9102      	str	r1, [sp, #8]
 8003c02:	9201      	str	r2, [sp, #4]
 8003c04:	9300      	str	r3, [sp, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c06:	9b02      	ldr	r3, [sp, #8]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	9307      	str	r3, [sp, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0e:	9b07      	ldr	r3, [sp, #28]
 8003c10:	f1c3 0307 	rsb	r3, r3, #7
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	bf28      	it	cs
 8003c18:	2304      	movcs	r3, #4
 8003c1a:	9306      	str	r3, [sp, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1c:	9b07      	ldr	r3, [sp, #28]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	2b06      	cmp	r3, #6
 8003c22:	d902      	bls.n	8003c2a <NVIC_DecodePriority+0x2e>
 8003c24:	9b07      	ldr	r3, [sp, #28]
 8003c26:	3b03      	subs	r3, #3
 8003c28:	e000      	b.n	8003c2c <NVIC_DecodePriority+0x30>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9305      	str	r3, [sp, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8003c2e:	9a03      	ldr	r2, [sp, #12]
 8003c30:	9b05      	ldr	r3, [sp, #20]
 8003c32:	40da      	lsrs	r2, r3
 8003c34:	2101      	movs	r1, #1
 8003c36:	9b06      	ldr	r3, [sp, #24]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	401a      	ands	r2, r3
 8003c40:	9b01      	ldr	r3, [sp, #4]
 8003c42:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8003c44:	2201      	movs	r2, #1
 8003c46:	9b05      	ldr	r3, [sp, #20]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	1e5a      	subs	r2, r3, #1
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	401a      	ands	r2, r3
 8003c52:	9b00      	ldr	r3, [sp, #0]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	b008      	add	sp, #32
 8003c5a:	4770      	bx	lr

08003c5c <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003c5c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c60:	4905      	ldr	r1, [pc, #20]	; (8003c78 <NVIC_SystemReset+0x1c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <NVIC_SystemReset+0x1c>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <NVIC_SystemReset+0x20>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60cb      	str	r3, [r1, #12]
 8003c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003c74:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003c76:	e7fd      	b.n	8003c74 <NVIC_SystemReset+0x18>
 8003c78:	e000ed00 	.word	0xe000ed00
 8003c7c:	05fa0004 	.word	0x05fa0004

08003c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c80:	b500      	push	{lr}
 8003c82:	b083      	sub	sp, #12
 8003c84:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c86:	9b01      	ldr	r3, [sp, #4]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c8e:	d301      	bcc.n	8003c94 <SysTick_Config+0x14>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c90:	2301      	movs	r3, #1
 8003c92:	e00f      	b.n	8003cb4 <SysTick_Config+0x34>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c94:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <SysTick_Config+0x3c>)
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9c:	210f      	movs	r1, #15
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca2:	f7ff ff33 	bl	8003b0c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <SysTick_Config+0x3c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <SysTick_Config+0x3c>)
 8003cae:	2207      	movs	r2, #7
 8003cb0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	b003      	add	sp, #12
 8003cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b500      	push	{lr}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc6:	9801      	ldr	r0, [sp, #4]
 8003cc8:	f7ff fe68 	bl	800399c <NVIC_SetPriorityGrouping>
}
 8003ccc:	bf00      	nop
 8003cce:	b003      	add	sp, #12
 8003cd0:	f85d fb04 	ldr.w	pc, [sp], #4

08003cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd4:	b500      	push	{lr}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	4603      	mov	r3, r0
 8003cda:	9102      	str	r1, [sp, #8]
 8003cdc:	9201      	str	r2, [sp, #4]
 8003cde:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t prioritygroup = 0x00;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9305      	str	r3, [sp, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce6:	f7ff fe79 	bl	80039dc <NVIC_GetPriorityGrouping>
 8003cea:	9005      	str	r0, [sp, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cec:	9a01      	ldr	r2, [sp, #4]
 8003cee:	9902      	ldr	r1, [sp, #8]
 8003cf0:	9805      	ldr	r0, [sp, #20]
 8003cf2:	f7ff ff57 	bl	8003ba4 <NVIC_EncodePriority>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff04 	bl	8003b0c <NVIC_SetPriority>
}
 8003d04:	bf00      	nop
 8003d06:	b007      	add	sp, #28
 8003d08:	f85d fb04 	ldr.w	pc, [sp], #4

08003d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0c:	b500      	push	{lr}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	4603      	mov	r3, r0
 8003d12:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d16:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe68 	bl	80039f0 <NVIC_EnableIRQ>
}
 8003d20:	bf00      	nop
 8003d22:	b003      	add	sp, #12
 8003d24:	f85d fb04 	ldr.w	pc, [sp], #4

08003d28 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d28:	b500      	push	{lr}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));


  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d32:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fe70 	bl	8003a1c <NVIC_DisableIRQ>
}
 8003d3c:	bf00      	nop
 8003d3e:	b003      	add	sp, #12
 8003d40:	f85d fb04 	ldr.w	pc, [sp], #4

08003d44 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003d44:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8003d46:	f7ff ff89 	bl	8003c5c <NVIC_SystemReset>
}
 8003d4a:	bf00      	nop
 8003d4c:	bd08      	pop	{r3, pc}

08003d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4e:	b500      	push	{lr}
 8003d50:	b083      	sub	sp, #12
 8003d52:	9001      	str	r0, [sp, #4]
   return SysTick_Config(TicksNumb);
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	f7ff ff93 	bl	8003c80 <SysTick_Config>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	b003      	add	sp, #12
 8003d60:	f85d fb04 	ldr.w	pc, [sp], #4

08003d64 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8003d64:	b508      	push	{r3, lr}
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8003d66:	f7ff fe39 	bl	80039dc <NVIC_GetPriorityGrouping>
 8003d6a:	4603      	mov	r3, r0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd08      	pop	{r3, pc}

08003d70 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
 8003d70:	b500      	push	{lr}
 8003d72:	b085      	sub	sp, #20
 8003d74:	9102      	str	r1, [sp, #8]
 8003d76:	9201      	str	r2, [sp, #4]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f88d 300f 	strb.w	r3, [sp, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8003d80:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fee9 	bl	8003b5c <NVIC_GetPriority>
 8003d8a:	9b00      	ldr	r3, [sp, #0]
 8003d8c:	9a01      	ldr	r2, [sp, #4]
 8003d8e:	9902      	ldr	r1, [sp, #8]
 8003d90:	f7ff ff34 	bl	8003bfc <NVIC_DecodePriority>
}
 8003d94:	bf00      	nop
 8003d96:	b005      	add	sp, #20
 8003d98:	f85d fb04 	ldr.w	pc, [sp], #4

08003d9c <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 8003d9c:	b500      	push	{lr}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	4603      	mov	r3, r0
 8003da2:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003da6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fe66 	bl	8003a7c <NVIC_SetPendingIRQ>
}
 8003db0:	bf00      	nop
 8003db2:	b003      	add	sp, #12
 8003db4:	f85d fb04 	ldr.w	pc, [sp], #4

08003db8 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8003db8:	b500      	push	{lr}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8003dc2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fe40 	bl	8003a4c <NVIC_GetPendingIRQ>
 8003dcc:	4603      	mov	r3, r0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	b003      	add	sp, #12
 8003dd2:	f85d fb04 	ldr.w	pc, [sp], #4

08003dd6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8003dd6:	b500      	push	{lr}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003de0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fe61 	bl	8003aac <NVIC_ClearPendingIRQ>
}
 8003dea:	bf00      	nop
 8003dec:	b003      	add	sp, #12
 8003dee:	f85d fb04 	ldr.w	pc, [sp], #4

08003df2 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{ 
 8003df2:	b500      	push	{lr}
 8003df4:	b083      	sub	sp, #12
 8003df6:	4603      	mov	r3, r0
 8003df8:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8003dfc:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fe6b 	bl	8003adc <NVIC_GetActive>
 8003e06:	4603      	mov	r3, r0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	b003      	add	sp, #12
 8003e0c:	f85d fb04 	ldr.w	pc, [sp], #4

08003e10 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003e10:	b082      	sub	sp, #8
 8003e12:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003e14:	9b01      	ldr	r3, [sp, #4]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d106      	bne.n	8003e28 <HAL_SYSTICK_CLKSourceConfig+0x18>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003e26:	e005      	b.n	8003e34 <HAL_SYSTICK_CLKSourceConfig+0x24>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0304 	bic.w	r3, r3, #4
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	b002      	add	sp, #8
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e010 	.word	0xe000e010

08003e40 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003e40:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003e42:	f000 f802 	bl	8003e4a <HAL_SYSTICK_Callback>
}
 8003e46:	bf00      	nop
 8003e48:	bd08      	pop	{r3, pc}

08003e4a <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	4770      	bx	lr

08003e4e <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003e4e:	b084      	sub	sp, #16
 8003e50:	9001      	str	r0, [sp, #4]
  uint32_t tmp = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	9303      	str	r3, [sp, #12]
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e56:	9b01      	ldr	r3, [sp, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e039      	b.n	8003ed4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8003e60:	9b01      	ldr	r3, [sp, #4]
 8003e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_DMA_Init+0x24>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8003e6a:	9b01      	ldr	r3, [sp, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2020 	strb.w	r2, [r3, #32]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e72:	9b01      	ldr	r3, [sp, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e7a:	9b01      	ldr	r3, [sp, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	9303      	str	r3, [sp, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e88:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003e8c:	9303      	str	r3, [sp, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e8e:	9b01      	ldr	r3, [sp, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e92:	9b01      	ldr	r3, [sp, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e98:	9b01      	ldr	r3, [sp, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9e:	9b01      	ldr	r3, [sp, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea4:	9b01      	ldr	r3, [sp, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eaa:	9b01      	ldr	r3, [sp, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003eb6:	9a03      	ldr	r2, [sp, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	9303      	str	r3, [sp, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003ebc:	9b01      	ldr	r3, [sp, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	9a03      	ldr	r2, [sp, #12]
 8003ec2:	601a      	str	r2, [r3, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003eca:	9b01      	ldr	r3, [sp, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	b004      	add	sp, #16
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003edc:	b082      	sub	sp, #8
 8003ede:	9001      	str	r0, [sp, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ee0:	9b01      	ldr	r3, [sp, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_DMA_DeInit+0xe>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0d2      	b.n	8004090 <HAL_DMA_DeInit+0x1b4>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_DMA_DeInit+0x1c>
  {
     return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cb      	b.n	8004090 <HAL_DMA_DeInit+0x1b4>
  }

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003ef8:	9b01      	ldr	r3, [sp, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	9a01      	ldr	r2, [sp, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
  
  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8003f08:	9b01      	ldr	r3, [sp, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
  
  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0;
 8003f10:	9b01      	ldr	r3, [sp, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]
  
  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0;
 8003f18:	9b01      	ldr	r3, [sp, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0;
 8003f20:	9b01      	ldr	r3, [sp, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2200      	movs	r2, #0
 8003f26:	60da      	str	r2, [r3, #12]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f28:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_DMA_DeInit+0x1bc>)
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4b5a      	ldr	r3, [pc, #360]	; (800409c <HAL_DMA_DeInit+0x1c0>)
 8003f32:	4299      	cmp	r1, r3
 8003f34:	d02e      	beq.n	8003f94 <HAL_DMA_DeInit+0xb8>
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <HAL_DMA_DeInit+0x1c4>)
 8003f3e:	4299      	cmp	r1, r3
 8003f40:	d026      	beq.n	8003f90 <HAL_DMA_DeInit+0xb4>
 8003f42:	9b01      	ldr	r3, [sp, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_DMA_DeInit+0x1c8>)
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	d01d      	beq.n	8003f8a <HAL_DMA_DeInit+0xae>
 8003f4e:	9b01      	ldr	r3, [sp, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4b54      	ldr	r3, [pc, #336]	; (80040a8 <HAL_DMA_DeInit+0x1cc>)
 8003f56:	4299      	cmp	r1, r3
 8003f58:	d014      	beq.n	8003f84 <HAL_DMA_DeInit+0xa8>
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4b52      	ldr	r3, [pc, #328]	; (80040ac <HAL_DMA_DeInit+0x1d0>)
 8003f62:	4299      	cmp	r1, r3
 8003f64:	d00b      	beq.n	8003f7e <HAL_DMA_DeInit+0xa2>
 8003f66:	9b01      	ldr	r3, [sp, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <HAL_DMA_DeInit+0x1d4>)
 8003f6e:	4299      	cmp	r1, r3
 8003f70:	d102      	bne.n	8003f78 <HAL_DMA_DeInit+0x9c>
 8003f72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f76:	e00e      	b.n	8003f96 <HAL_DMA_DeInit+0xba>
 8003f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7c:	e00b      	b.n	8003f96 <HAL_DMA_DeInit+0xba>
 8003f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f82:	e008      	b.n	8003f96 <HAL_DMA_DeInit+0xba>
 8003f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f88:	e005      	b.n	8003f96 <HAL_DMA_DeInit+0xba>
 8003f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f8e:	e002      	b.n	8003f96 <HAL_DMA_DeInit+0xba>
 8003f90:	2320      	movs	r3, #32
 8003f92:	e000      	b.n	8003f96 <HAL_DMA_DeInit+0xba>
 8003f94:	2302      	movs	r3, #2
 8003f96:	6053      	str	r3, [r2, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003f98:	4a3f      	ldr	r2, [pc, #252]	; (8004098 <HAL_DMA_DeInit+0x1bc>)
 8003f9a:	9b01      	ldr	r3, [sp, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_DMA_DeInit+0x1c0>)
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d02e      	beq.n	8004004 <HAL_DMA_DeInit+0x128>
 8003fa6:	9b01      	ldr	r3, [sp, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4b3c      	ldr	r3, [pc, #240]	; (80040a0 <HAL_DMA_DeInit+0x1c4>)
 8003fae:	4299      	cmp	r1, r3
 8003fb0:	d026      	beq.n	8004000 <HAL_DMA_DeInit+0x124>
 8003fb2:	9b01      	ldr	r3, [sp, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <HAL_DMA_DeInit+0x1c8>)
 8003fba:	4299      	cmp	r1, r3
 8003fbc:	d01d      	beq.n	8003ffa <HAL_DMA_DeInit+0x11e>
 8003fbe:	9b01      	ldr	r3, [sp, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4b38      	ldr	r3, [pc, #224]	; (80040a8 <HAL_DMA_DeInit+0x1cc>)
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	d014      	beq.n	8003ff4 <HAL_DMA_DeInit+0x118>
 8003fca:	9b01      	ldr	r3, [sp, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_DMA_DeInit+0x1d0>)
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	d00b      	beq.n	8003fee <HAL_DMA_DeInit+0x112>
 8003fd6:	9b01      	ldr	r3, [sp, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <HAL_DMA_DeInit+0x1d4>)
 8003fde:	4299      	cmp	r1, r3
 8003fe0:	d102      	bne.n	8003fe8 <HAL_DMA_DeInit+0x10c>
 8003fe2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003fe6:	e00e      	b.n	8004006 <HAL_DMA_DeInit+0x12a>
 8003fe8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fec:	e00b      	b.n	8004006 <HAL_DMA_DeInit+0x12a>
 8003fee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ff2:	e008      	b.n	8004006 <HAL_DMA_DeInit+0x12a>
 8003ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff8:	e005      	b.n	8004006 <HAL_DMA_DeInit+0x12a>
 8003ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ffe:	e002      	b.n	8004006 <HAL_DMA_DeInit+0x12a>
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	e000      	b.n	8004006 <HAL_DMA_DeInit+0x12a>
 8004004:	2308      	movs	r3, #8
 8004006:	6053      	str	r3, [r2, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004008:	4a23      	ldr	r2, [pc, #140]	; (8004098 <HAL_DMA_DeInit+0x1bc>)
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_DMA_DeInit+0x1c0>)
 8004012:	4299      	cmp	r1, r3
 8004014:	d02e      	beq.n	8004074 <HAL_DMA_DeInit+0x198>
 8004016:	9b01      	ldr	r3, [sp, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_DMA_DeInit+0x1c4>)
 800401e:	4299      	cmp	r1, r3
 8004020:	d026      	beq.n	8004070 <HAL_DMA_DeInit+0x194>
 8004022:	9b01      	ldr	r3, [sp, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <HAL_DMA_DeInit+0x1c8>)
 800402a:	4299      	cmp	r1, r3
 800402c:	d01d      	beq.n	800406a <HAL_DMA_DeInit+0x18e>
 800402e:	9b01      	ldr	r3, [sp, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4619      	mov	r1, r3
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_DMA_DeInit+0x1cc>)
 8004036:	4299      	cmp	r1, r3
 8004038:	d014      	beq.n	8004064 <HAL_DMA_DeInit+0x188>
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <HAL_DMA_DeInit+0x1d0>)
 8004042:	4299      	cmp	r1, r3
 8004044:	d00b      	beq.n	800405e <HAL_DMA_DeInit+0x182>
 8004046:	9b01      	ldr	r3, [sp, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4619      	mov	r1, r3
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <HAL_DMA_DeInit+0x1d4>)
 800404e:	4299      	cmp	r1, r3
 8004050:	d102      	bne.n	8004058 <HAL_DMA_DeInit+0x17c>
 8004052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004056:	e00e      	b.n	8004076 <HAL_DMA_DeInit+0x19a>
 8004058:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800405c:	e00b      	b.n	8004076 <HAL_DMA_DeInit+0x19a>
 800405e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004062:	e008      	b.n	8004076 <HAL_DMA_DeInit+0x19a>
 8004064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004068:	e005      	b.n	8004076 <HAL_DMA_DeInit+0x19a>
 800406a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406e:	e002      	b.n	8004076 <HAL_DMA_DeInit+0x19a>
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	e000      	b.n	8004076 <HAL_DMA_DeInit+0x19a>
 8004074:	2304      	movs	r3, #4
 8004076:	6053      	str	r3, [r2, #4]
  
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004078:	9b01      	ldr	r3, [sp, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800407e:	9b01      	ldr	r3, [sp, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004086:	9b01      	ldr	r3, [sp, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	b002      	add	sp, #8
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40020000 	.word	0x40020000
 800409c:	40020008 	.word	0x40020008
 80040a0:	4002001c 	.word	0x4002001c
 80040a4:	40020030 	.word	0x40020030
 80040a8:	40020044 	.word	0x40020044
 80040ac:	40020058 	.word	0x40020058
 80040b0:	4002006c 	.word	0x4002006c

080040b4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b500      	push	{lr}
 80040b6:	b085      	sub	sp, #20
 80040b8:	9003      	str	r0, [sp, #12]
 80040ba:	9102      	str	r1, [sp, #8]
 80040bc:	9201      	str	r2, [sp, #4]
 80040be:	9300      	str	r3, [sp, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_DMA_Start+0x1a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e01e      	b.n	800410c <HAL_DMA_Start+0x58>
 80040ce:	9b03      	ldr	r3, [sp, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040d6:	9b03      	ldr	r3, [sp, #12]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	9a03      	ldr	r2, [sp, #12]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ee:	9b00      	ldr	r3, [sp, #0]
 80040f0:	9a01      	ldr	r2, [sp, #4]
 80040f2:	9902      	ldr	r1, [sp, #8]
 80040f4:	9803      	ldr	r0, [sp, #12]
 80040f6:	f000 fc58 	bl	80049aa <DMA_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 80040fa:	9b03      	ldr	r3, [sp, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	9a03      	ldr	r2, [sp, #12]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

  return HAL_OK; 
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	b005      	add	sp, #20
 8004110:	f85d fb04 	ldr.w	pc, [sp], #4

08004114 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004114:	b500      	push	{lr}
 8004116:	b085      	sub	sp, #20
 8004118:	9003      	str	r0, [sp, #12]
 800411a:	9102      	str	r1, [sp, #8]
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	9300      	str	r3, [sp, #0]
  /* Process locked */
  __HAL_LOCK(hdma);
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_DMA_Start_IT+0x1a>
 800412a:	2302      	movs	r3, #2
 800412c:	e036      	b.n	800419c <HAL_DMA_Start_IT+0x88>
 800412e:	9b03      	ldr	r3, [sp, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2020 	strb.w	r2, [r3, #32]

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004136:	9b03      	ldr	r3, [sp, #12]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	9a03      	ldr	r2, [sp, #12]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
  
  /* Configure the source, destination address and the data length */
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800414e:	9b00      	ldr	r3, [sp, #0]
 8004150:	9a01      	ldr	r2, [sp, #4]
 8004152:	9902      	ldr	r1, [sp, #8]
 8004154:	9803      	ldr	r0, [sp, #12]
 8004156:	f000 fc28 	bl	80049aa <DMA_SetConfig>
  
  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 800415a:	9b03      	ldr	r3, [sp, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	9a03      	ldr	r2, [sp, #12]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	f042 0202 	orr.w	r2, r2, #2
 8004168:	601a      	str	r2, [r3, #0]

  /* Enable the Half transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	9a03      	ldr	r2, [sp, #12]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	f042 0204 	orr.w	r2, r2, #4
 8004178:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 800417a:	9b03      	ldr	r3, [sp, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	9a03      	ldr	r2, [sp, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	f042 0208 	orr.w	r2, r2, #8
 8004188:	601a      	str	r2, [r3, #0]
  
   /* Enable the Peripheral */
  __HAL_DMA_ENABLE(hdma);
 800418a:	9b03      	ldr	r3, [sp, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9a03      	ldr	r2, [sp, #12]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
} 
 800419c:	4618      	mov	r0, r3
 800419e:	b005      	add	sp, #20
 80041a0:	f85d fb04 	ldr.w	pc, [sp], #4

080041a4 <HAL_DMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a4:	b500      	push	{lr}
 80041a6:	b085      	sub	sp, #20
 80041a8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0x00;
 80041aa:	2300      	movs	r3, #0
 80041ac:	9303      	str	r3, [sp, #12]
  
  /* Disable the channel */
  __HAL_DMA_DISABLE(hdma);
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	9a01      	ldr	r2, [sp, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041be:	f7ff fb5d 	bl	800387c <HAL_GetTick>
 80041c2:	9003      	str	r0, [sp, #12]
  
  /* Check if the DMA Channel is effectively disabled */
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
 80041c4:	e017      	b.n	80041f6 <HAL_DMA_Abort+0x52>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80041c6:	f7ff fb59 	bl	800387c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d4:	d90f      	bls.n	80041f6 <HAL_DMA_Abort+0x52>
    {
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80041d6:	9b01      	ldr	r3, [sp, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e2:	9b01      	ldr	r3, [sp, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ea:	9b01      	ldr	r3, [sp, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e00f      	b.n	8004216 <HAL_DMA_Abort+0x72>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0)
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e0      	bne.n	80041c6 <HAL_DMA_Abort+0x22>
    }
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004204:	9b01      	ldr	r3, [sp, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800420c:	9b01      	ldr	r3, [sp, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	b005      	add	sp, #20
 800421a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004220 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.  
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8004220:	b500      	push	{lr}
 8004222:	b087      	sub	sp, #28
 8004224:	9003      	str	r0, [sp, #12]
 8004226:	9102      	str	r1, [sp, #8]
 8004228:	9201      	str	r2, [sp, #4]
  uint32_t temp;
  uint32_t tickstart = 0x00;
 800422a:	2300      	movs	r3, #0
 800422c:	9304      	str	r3, [sp, #16]
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800422e:	9b02      	ldr	r3, [sp, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d137      	bne.n	80042a4 <HAL_DMA_PollForTransfer+0x84>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4ba3      	ldr	r3, [pc, #652]	; (80044c8 <HAL_DMA_PollForTransfer+0x2a8>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d02e      	beq.n	800429e <HAL_DMA_PollForTransfer+0x7e>
 8004240:	9b03      	ldr	r3, [sp, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4ba1      	ldr	r3, [pc, #644]	; (80044cc <HAL_DMA_PollForTransfer+0x2ac>)
 8004248:	429a      	cmp	r2, r3
 800424a:	d026      	beq.n	800429a <HAL_DMA_PollForTransfer+0x7a>
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b9f      	ldr	r3, [pc, #636]	; (80044d0 <HAL_DMA_PollForTransfer+0x2b0>)
 8004254:	429a      	cmp	r2, r3
 8004256:	d01d      	beq.n	8004294 <HAL_DMA_PollForTransfer+0x74>
 8004258:	9b03      	ldr	r3, [sp, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b9d      	ldr	r3, [pc, #628]	; (80044d4 <HAL_DMA_PollForTransfer+0x2b4>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d014      	beq.n	800428e <HAL_DMA_PollForTransfer+0x6e>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4b9b      	ldr	r3, [pc, #620]	; (80044d8 <HAL_DMA_PollForTransfer+0x2b8>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d00b      	beq.n	8004288 <HAL_DMA_PollForTransfer+0x68>
 8004270:	9b03      	ldr	r3, [sp, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b99      	ldr	r3, [pc, #612]	; (80044dc <HAL_DMA_PollForTransfer+0x2bc>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d102      	bne.n	8004282 <HAL_DMA_PollForTransfer+0x62>
 800427c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004280:	e00e      	b.n	80042a0 <HAL_DMA_PollForTransfer+0x80>
 8004282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004286:	e00b      	b.n	80042a0 <HAL_DMA_PollForTransfer+0x80>
 8004288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800428c:	e008      	b.n	80042a0 <HAL_DMA_PollForTransfer+0x80>
 800428e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004292:	e005      	b.n	80042a0 <HAL_DMA_PollForTransfer+0x80>
 8004294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004298:	e002      	b.n	80042a0 <HAL_DMA_PollForTransfer+0x80>
 800429a:	2320      	movs	r3, #32
 800429c:	e000      	b.n	80042a0 <HAL_DMA_PollForTransfer+0x80>
 800429e:	2302      	movs	r3, #2
 80042a0:	9305      	str	r3, [sp, #20]
 80042a2:	e036      	b.n	8004312 <HAL_DMA_PollForTransfer+0xf2>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 80042a4:	9b03      	ldr	r3, [sp, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b87      	ldr	r3, [pc, #540]	; (80044c8 <HAL_DMA_PollForTransfer+0x2a8>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d02e      	beq.n	800430e <HAL_DMA_PollForTransfer+0xee>
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b85      	ldr	r3, [pc, #532]	; (80044cc <HAL_DMA_PollForTransfer+0x2ac>)
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d026      	beq.n	800430a <HAL_DMA_PollForTransfer+0xea>
 80042bc:	9b03      	ldr	r3, [sp, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b83      	ldr	r3, [pc, #524]	; (80044d0 <HAL_DMA_PollForTransfer+0x2b0>)
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d01d      	beq.n	8004304 <HAL_DMA_PollForTransfer+0xe4>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_DMA_PollForTransfer+0x2b4>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d014      	beq.n	80042fe <HAL_DMA_PollForTransfer+0xde>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b7f      	ldr	r3, [pc, #508]	; (80044d8 <HAL_DMA_PollForTransfer+0x2b8>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d00b      	beq.n	80042f8 <HAL_DMA_PollForTransfer+0xd8>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b7d      	ldr	r3, [pc, #500]	; (80044dc <HAL_DMA_PollForTransfer+0x2bc>)
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d102      	bne.n	80042f2 <HAL_DMA_PollForTransfer+0xd2>
 80042ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042f0:	e00e      	b.n	8004310 <HAL_DMA_PollForTransfer+0xf0>
 80042f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042f6:	e00b      	b.n	8004310 <HAL_DMA_PollForTransfer+0xf0>
 80042f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042fc:	e008      	b.n	8004310 <HAL_DMA_PollForTransfer+0xf0>
 80042fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004302:	e005      	b.n	8004310 <HAL_DMA_PollForTransfer+0xf0>
 8004304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004308:	e002      	b.n	8004310 <HAL_DMA_PollForTransfer+0xf0>
 800430a:	2340      	movs	r3, #64	; 0x40
 800430c:	e000      	b.n	8004310 <HAL_DMA_PollForTransfer+0xf0>
 800430e:	2304      	movs	r3, #4
 8004310:	9305      	str	r3, [sp, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004312:	f7ff fab3 	bl	800387c <HAL_GetTick>
 8004316:	9004      	str	r0, [sp, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8004318:	e0a1      	b.n	800445e <HAL_DMA_PollForTransfer+0x23e>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 800431a:	4b71      	ldr	r3, [pc, #452]	; (80044e0 <HAL_DMA_PollForTransfer+0x2c0>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4619      	mov	r1, r3
 8004324:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_DMA_PollForTransfer+0x2a8>)
 8004326:	4299      	cmp	r1, r3
 8004328:	d02e      	beq.n	8004388 <HAL_DMA_PollForTransfer+0x168>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4619      	mov	r1, r3
 8004330:	4b66      	ldr	r3, [pc, #408]	; (80044cc <HAL_DMA_PollForTransfer+0x2ac>)
 8004332:	4299      	cmp	r1, r3
 8004334:	d026      	beq.n	8004384 <HAL_DMA_PollForTransfer+0x164>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
 800433c:	4b64      	ldr	r3, [pc, #400]	; (80044d0 <HAL_DMA_PollForTransfer+0x2b0>)
 800433e:	4299      	cmp	r1, r3
 8004340:	d01d      	beq.n	800437e <HAL_DMA_PollForTransfer+0x15e>
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4b62      	ldr	r3, [pc, #392]	; (80044d4 <HAL_DMA_PollForTransfer+0x2b4>)
 800434a:	4299      	cmp	r1, r3
 800434c:	d014      	beq.n	8004378 <HAL_DMA_PollForTransfer+0x158>
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4619      	mov	r1, r3
 8004354:	4b60      	ldr	r3, [pc, #384]	; (80044d8 <HAL_DMA_PollForTransfer+0x2b8>)
 8004356:	4299      	cmp	r1, r3
 8004358:	d00b      	beq.n	8004372 <HAL_DMA_PollForTransfer+0x152>
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <HAL_DMA_PollForTransfer+0x2bc>)
 8004362:	4299      	cmp	r1, r3
 8004364:	d102      	bne.n	800436c <HAL_DMA_PollForTransfer+0x14c>
 8004366:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800436a:	e00e      	b.n	800438a <HAL_DMA_PollForTransfer+0x16a>
 800436c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004370:	e00b      	b.n	800438a <HAL_DMA_PollForTransfer+0x16a>
 8004372:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004376:	e008      	b.n	800438a <HAL_DMA_PollForTransfer+0x16a>
 8004378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437c:	e005      	b.n	800438a <HAL_DMA_PollForTransfer+0x16a>
 800437e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004382:	e002      	b.n	800438a <HAL_DMA_PollForTransfer+0x16a>
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	e000      	b.n	800438a <HAL_DMA_PollForTransfer+0x16a>
 8004388:	2308      	movs	r3, #8
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d047      	beq.n	8004420 <HAL_DMA_PollForTransfer+0x200>
    {      
      /* Clear the transfer error flags */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004390:	4a53      	ldr	r2, [pc, #332]	; (80044e0 <HAL_DMA_PollForTransfer+0x2c0>)
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4619      	mov	r1, r3
 8004398:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <HAL_DMA_PollForTransfer+0x2a8>)
 800439a:	4299      	cmp	r1, r3
 800439c:	d02e      	beq.n	80043fc <HAL_DMA_PollForTransfer+0x1dc>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4b49      	ldr	r3, [pc, #292]	; (80044cc <HAL_DMA_PollForTransfer+0x2ac>)
 80043a6:	4299      	cmp	r1, r3
 80043a8:	d026      	beq.n	80043f8 <HAL_DMA_PollForTransfer+0x1d8>
 80043aa:	9b03      	ldr	r3, [sp, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_DMA_PollForTransfer+0x2b0>)
 80043b2:	4299      	cmp	r1, r3
 80043b4:	d01d      	beq.n	80043f2 <HAL_DMA_PollForTransfer+0x1d2>
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	4b45      	ldr	r3, [pc, #276]	; (80044d4 <HAL_DMA_PollForTransfer+0x2b4>)
 80043be:	4299      	cmp	r1, r3
 80043c0:	d014      	beq.n	80043ec <HAL_DMA_PollForTransfer+0x1cc>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4619      	mov	r1, r3
 80043c8:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_DMA_PollForTransfer+0x2b8>)
 80043ca:	4299      	cmp	r1, r3
 80043cc:	d00b      	beq.n	80043e6 <HAL_DMA_PollForTransfer+0x1c6>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4619      	mov	r1, r3
 80043d4:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_DMA_PollForTransfer+0x2bc>)
 80043d6:	4299      	cmp	r1, r3
 80043d8:	d102      	bne.n	80043e0 <HAL_DMA_PollForTransfer+0x1c0>
 80043da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80043de:	e00e      	b.n	80043fe <HAL_DMA_PollForTransfer+0x1de>
 80043e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043e4:	e00b      	b.n	80043fe <HAL_DMA_PollForTransfer+0x1de>
 80043e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80043ea:	e008      	b.n	80043fe <HAL_DMA_PollForTransfer+0x1de>
 80043ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f0:	e005      	b.n	80043fe <HAL_DMA_PollForTransfer+0x1de>
 80043f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043f6:	e002      	b.n	80043fe <HAL_DMA_PollForTransfer+0x1de>
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	e000      	b.n	80043fe <HAL_DMA_PollForTransfer+0x1de>
 80043fc:	2308      	movs	r3, #8
 80043fe:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_ERROR;
 800440c:	9b03      	ldr	r3, [sp, #12]
 800440e:	2204      	movs	r2, #4
 8004410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2020 	strb.w	r2, [r3, #32]
      
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b4      	b.n	800458a <HAL_DMA_PollForTransfer+0x36a>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d01a      	beq.n	800445e <HAL_DMA_PollForTransfer+0x23e>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8004428:	9b01      	ldr	r3, [sp, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_DMA_PollForTransfer+0x21e>
 800442e:	f7ff fa25 	bl	800387c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	9b04      	ldr	r3, [sp, #16]
 8004436:	1ad2      	subs	r2, r2, r3
 8004438:	9b01      	ldr	r3, [sp, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d90f      	bls.n	800445e <HAL_DMA_PollForTransfer+0x23e>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	635a      	str	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800444a:	9b03      	ldr	r3, [sp, #12]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2020 	strb.w	r2, [r3, #32]
        
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e095      	b.n	800458a <HAL_DMA_PollForTransfer+0x36a>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_DMA_PollForTransfer+0x2c0>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	9b05      	ldr	r3, [sp, #20]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	f43f af57 	beq.w	800431a <HAL_DMA_PollForTransfer+0xfa>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800446c:	9b02      	ldr	r3, [sp, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d14a      	bne.n	8004508 <HAL_DMA_PollForTransfer+0x2e8>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <HAL_DMA_PollForTransfer+0x2c0>)
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_DMA_PollForTransfer+0x2a8>)
 800447c:	4299      	cmp	r1, r3
 800447e:	d03c      	beq.n	80044fa <HAL_DMA_PollForTransfer+0x2da>
 8004480:	9b03      	ldr	r3, [sp, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4619      	mov	r1, r3
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <HAL_DMA_PollForTransfer+0x2ac>)
 8004488:	4299      	cmp	r1, r3
 800448a:	d034      	beq.n	80044f6 <HAL_DMA_PollForTransfer+0x2d6>
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_DMA_PollForTransfer+0x2b0>)
 8004494:	4299      	cmp	r1, r3
 8004496:	d02b      	beq.n	80044f0 <HAL_DMA_PollForTransfer+0x2d0>
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4619      	mov	r1, r3
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <HAL_DMA_PollForTransfer+0x2b4>)
 80044a0:	4299      	cmp	r1, r3
 80044a2:	d022      	beq.n	80044ea <HAL_DMA_PollForTransfer+0x2ca>
 80044a4:	9b03      	ldr	r3, [sp, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_DMA_PollForTransfer+0x2b8>)
 80044ac:	4299      	cmp	r1, r3
 80044ae:	d019      	beq.n	80044e4 <HAL_DMA_PollForTransfer+0x2c4>
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4619      	mov	r1, r3
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_DMA_PollForTransfer+0x2bc>)
 80044b8:	4299      	cmp	r1, r3
 80044ba:	d102      	bne.n	80044c2 <HAL_DMA_PollForTransfer+0x2a2>
 80044bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044c0:	e01c      	b.n	80044fc <HAL_DMA_PollForTransfer+0x2dc>
 80044c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c6:	e019      	b.n	80044fc <HAL_DMA_PollForTransfer+0x2dc>
 80044c8:	40020008 	.word	0x40020008
 80044cc:	4002001c 	.word	0x4002001c
 80044d0:	40020030 	.word	0x40020030
 80044d4:	40020044 	.word	0x40020044
 80044d8:	40020058 	.word	0x40020058
 80044dc:	4002006c 	.word	0x4002006c
 80044e0:	40020000 	.word	0x40020000
 80044e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e8:	e008      	b.n	80044fc <HAL_DMA_PollForTransfer+0x2dc>
 80044ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ee:	e005      	b.n	80044fc <HAL_DMA_PollForTransfer+0x2dc>
 80044f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f4:	e002      	b.n	80044fc <HAL_DMA_PollForTransfer+0x2dc>
 80044f6:	2320      	movs	r3, #32
 80044f8:	e000      	b.n	80044fc <HAL_DMA_PollForTransfer+0x2dc>
 80044fa:	2302      	movs	r3, #2
 80044fc:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and 
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004506:	e03b      	b.n	8004580 <HAL_DMA_PollForTransfer+0x360>

  }
  else
  { 
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004508:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_DMA_PollForTransfer+0x374>)
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <HAL_DMA_PollForTransfer+0x378>)
 8004512:	4299      	cmp	r1, r3
 8004514:	d02e      	beq.n	8004574 <HAL_DMA_PollForTransfer+0x354>
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	4b1f      	ldr	r3, [pc, #124]	; (800459c <HAL_DMA_PollForTransfer+0x37c>)
 800451e:	4299      	cmp	r1, r3
 8004520:	d026      	beq.n	8004570 <HAL_DMA_PollForTransfer+0x350>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_DMA_PollForTransfer+0x380>)
 800452a:	4299      	cmp	r1, r3
 800452c:	d01d      	beq.n	800456a <HAL_DMA_PollForTransfer+0x34a>
 800452e:	9b03      	ldr	r3, [sp, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_DMA_PollForTransfer+0x384>)
 8004536:	4299      	cmp	r1, r3
 8004538:	d014      	beq.n	8004564 <HAL_DMA_PollForTransfer+0x344>
 800453a:	9b03      	ldr	r3, [sp, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4619      	mov	r1, r3
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_DMA_PollForTransfer+0x388>)
 8004542:	4299      	cmp	r1, r3
 8004544:	d00b      	beq.n	800455e <HAL_DMA_PollForTransfer+0x33e>
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4619      	mov	r1, r3
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <HAL_DMA_PollForTransfer+0x38c>)
 800454e:	4299      	cmp	r1, r3
 8004550:	d102      	bne.n	8004558 <HAL_DMA_PollForTransfer+0x338>
 8004552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004556:	e00e      	b.n	8004576 <HAL_DMA_PollForTransfer+0x356>
 8004558:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800455c:	e00b      	b.n	8004576 <HAL_DMA_PollForTransfer+0x356>
 800455e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004562:	e008      	b.n	8004576 <HAL_DMA_PollForTransfer+0x356>
 8004564:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004568:	e005      	b.n	8004576 <HAL_DMA_PollForTransfer+0x356>
 800456a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800456e:	e002      	b.n	8004576 <HAL_DMA_PollForTransfer+0x356>
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	e000      	b.n	8004576 <HAL_DMA_PollForTransfer+0x356>
 8004574:	2304      	movs	r3, #4
 8004576:	6053      	str	r3, [r2, #4]
  
    /* The selected Channelx EN bit is cleared (DMA is disabled and 
    all transfers of half buffer are complete) */
    hdma->State = HAL_DMA_STATE_READY_HALF;
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	2211      	movs	r2, #17
 800457c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8004580:	9b03      	ldr	r3, [sp, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	b007      	add	sp, #28
 800458e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004592:	bf00      	nop
 8004594:	40020000 	.word	0x40020000
 8004598:	40020008 	.word	0x40020008
 800459c:	4002001c 	.word	0x4002001c
 80045a0:	40020030 	.word	0x40020030
 80045a4:	40020044 	.word	0x40020044
 80045a8:	40020058 	.word	0x40020058
 80045ac:	4002006c 	.word	0x4002006c

080045b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045b0:	b500      	push	{lr}
 80045b2:	b083      	sub	sp, #12
 80045b4:	9001      	str	r0, [sp, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80045b6:	4b8f      	ldr	r3, [pc, #572]	; (80047f4 <HAL_DMA_IRQHandler+0x244>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	9b01      	ldr	r3, [sp, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	4b8d      	ldr	r3, [pc, #564]	; (80047f8 <HAL_DMA_IRQHandler+0x248>)
 80045c2:	4299      	cmp	r1, r3
 80045c4:	d02e      	beq.n	8004624 <HAL_DMA_IRQHandler+0x74>
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4b8b      	ldr	r3, [pc, #556]	; (80047fc <HAL_DMA_IRQHandler+0x24c>)
 80045ce:	4299      	cmp	r1, r3
 80045d0:	d026      	beq.n	8004620 <HAL_DMA_IRQHandler+0x70>
 80045d2:	9b01      	ldr	r3, [sp, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4b89      	ldr	r3, [pc, #548]	; (8004800 <HAL_DMA_IRQHandler+0x250>)
 80045da:	4299      	cmp	r1, r3
 80045dc:	d01d      	beq.n	800461a <HAL_DMA_IRQHandler+0x6a>
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4619      	mov	r1, r3
 80045e4:	4b87      	ldr	r3, [pc, #540]	; (8004804 <HAL_DMA_IRQHandler+0x254>)
 80045e6:	4299      	cmp	r1, r3
 80045e8:	d014      	beq.n	8004614 <HAL_DMA_IRQHandler+0x64>
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4619      	mov	r1, r3
 80045f0:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_DMA_IRQHandler+0x258>)
 80045f2:	4299      	cmp	r1, r3
 80045f4:	d00b      	beq.n	800460e <HAL_DMA_IRQHandler+0x5e>
 80045f6:	9b01      	ldr	r3, [sp, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4b83      	ldr	r3, [pc, #524]	; (800480c <HAL_DMA_IRQHandler+0x25c>)
 80045fe:	4299      	cmp	r1, r3
 8004600:	d102      	bne.n	8004608 <HAL_DMA_IRQHandler+0x58>
 8004602:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004606:	e00e      	b.n	8004626 <HAL_DMA_IRQHandler+0x76>
 8004608:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800460c:	e00b      	b.n	8004626 <HAL_DMA_IRQHandler+0x76>
 800460e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004612:	e008      	b.n	8004626 <HAL_DMA_IRQHandler+0x76>
 8004614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004618:	e005      	b.n	8004626 <HAL_DMA_IRQHandler+0x76>
 800461a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800461e:	e002      	b.n	8004626 <HAL_DMA_IRQHandler+0x76>
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	e000      	b.n	8004626 <HAL_DMA_IRQHandler+0x76>
 8004624:	2308      	movs	r3, #8
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d05c      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x136>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800462c:	9b01      	ldr	r3, [sp, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b08      	cmp	r3, #8
 8004638:	d155      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x136>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	9a01      	ldr	r2, [sp, #4]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	f022 0208 	bic.w	r2, r2, #8
 8004648:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800464a:	4a6a      	ldr	r2, [pc, #424]	; (80047f4 <HAL_DMA_IRQHandler+0x244>)
 800464c:	9b01      	ldr	r3, [sp, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4619      	mov	r1, r3
 8004652:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <HAL_DMA_IRQHandler+0x248>)
 8004654:	4299      	cmp	r1, r3
 8004656:	d02e      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x106>
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	4b67      	ldr	r3, [pc, #412]	; (80047fc <HAL_DMA_IRQHandler+0x24c>)
 8004660:	4299      	cmp	r1, r3
 8004662:	d026      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x102>
 8004664:	9b01      	ldr	r3, [sp, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_DMA_IRQHandler+0x250>)
 800466c:	4299      	cmp	r1, r3
 800466e:	d01d      	beq.n	80046ac <HAL_DMA_IRQHandler+0xfc>
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_DMA_IRQHandler+0x254>)
 8004678:	4299      	cmp	r1, r3
 800467a:	d014      	beq.n	80046a6 <HAL_DMA_IRQHandler+0xf6>
 800467c:	9b01      	ldr	r3, [sp, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	4b61      	ldr	r3, [pc, #388]	; (8004808 <HAL_DMA_IRQHandler+0x258>)
 8004684:	4299      	cmp	r1, r3
 8004686:	d00b      	beq.n	80046a0 <HAL_DMA_IRQHandler+0xf0>
 8004688:	9b01      	ldr	r3, [sp, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	4b5f      	ldr	r3, [pc, #380]	; (800480c <HAL_DMA_IRQHandler+0x25c>)
 8004690:	4299      	cmp	r1, r3
 8004692:	d102      	bne.n	800469a <HAL_DMA_IRQHandler+0xea>
 8004694:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004698:	e00e      	b.n	80046b8 <HAL_DMA_IRQHandler+0x108>
 800469a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800469e:	e00b      	b.n	80046b8 <HAL_DMA_IRQHandler+0x108>
 80046a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80046a4:	e008      	b.n	80046b8 <HAL_DMA_IRQHandler+0x108>
 80046a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046aa:	e005      	b.n	80046b8 <HAL_DMA_IRQHandler+0x108>
 80046ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046b0:	e002      	b.n	80046b8 <HAL_DMA_IRQHandler+0x108>
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	e000      	b.n	80046b8 <HAL_DMA_IRQHandler+0x108>
 80046b6:	2308      	movs	r3, #8
 80046b8:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	f043 0201 	orr.w	r2, r3, #1
 80046c2:	9b01      	ldr	r3, [sp, #4]
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80046c6:	9b01      	ldr	r3, [sp, #4]
 80046c8:	2204      	movs	r2, #4
 80046ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80046ce:	9b01      	ldr	r3, [sp, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2020 	strb.w	r2, [r3, #32]
      
      if (hdma->XferErrorCallback != NULL)
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x136>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046de:	9b01      	ldr	r3, [sp, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	9801      	ldr	r0, [sp, #4]
 80046e4:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80046e6:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_DMA_IRQHandler+0x244>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4619      	mov	r1, r3
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_DMA_IRQHandler+0x248>)
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d02e      	beq.n	8004754 <HAL_DMA_IRQHandler+0x1a4>
 80046f6:	9b01      	ldr	r3, [sp, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4619      	mov	r1, r3
 80046fc:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <HAL_DMA_IRQHandler+0x24c>)
 80046fe:	4299      	cmp	r1, r3
 8004700:	d026      	beq.n	8004750 <HAL_DMA_IRQHandler+0x1a0>
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4619      	mov	r1, r3
 8004708:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <HAL_DMA_IRQHandler+0x250>)
 800470a:	4299      	cmp	r1, r3
 800470c:	d01d      	beq.n	800474a <HAL_DMA_IRQHandler+0x19a>
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_DMA_IRQHandler+0x254>)
 8004716:	4299      	cmp	r1, r3
 8004718:	d014      	beq.n	8004744 <HAL_DMA_IRQHandler+0x194>
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_DMA_IRQHandler+0x258>)
 8004722:	4299      	cmp	r1, r3
 8004724:	d00b      	beq.n	800473e <HAL_DMA_IRQHandler+0x18e>
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_DMA_IRQHandler+0x25c>)
 800472e:	4299      	cmp	r1, r3
 8004730:	d102      	bne.n	8004738 <HAL_DMA_IRQHandler+0x188>
 8004732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004736:	e00e      	b.n	8004756 <HAL_DMA_IRQHandler+0x1a6>
 8004738:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800473c:	e00b      	b.n	8004756 <HAL_DMA_IRQHandler+0x1a6>
 800473e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004742:	e008      	b.n	8004756 <HAL_DMA_IRQHandler+0x1a6>
 8004744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004748:	e005      	b.n	8004756 <HAL_DMA_IRQHandler+0x1a6>
 800474a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474e:	e002      	b.n	8004756 <HAL_DMA_IRQHandler+0x1a6>
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	e000      	b.n	8004756 <HAL_DMA_IRQHandler+0x1a6>
 8004754:	2304      	movs	r3, #4
 8004756:	4013      	ands	r3, r2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d067      	beq.n	800482c <HAL_DMA_IRQHandler+0x27c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800475c:	9b01      	ldr	r3, [sp, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d160      	bne.n	800482c <HAL_DMA_IRQHandler+0x27c>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <HAL_DMA_IRQHandler+0x1d8>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004778:	9b01      	ldr	r3, [sp, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	9a01      	ldr	r2, [sp, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	f022 0204 	bic.w	r2, r2, #4
 8004786:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_DMA_IRQHandler+0x244>)
 800478a:	9b01      	ldr	r3, [sp, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <HAL_DMA_IRQHandler+0x248>)
 8004792:	4299      	cmp	r1, r3
 8004794:	d03c      	beq.n	8004810 <HAL_DMA_IRQHandler+0x260>
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4b17      	ldr	r3, [pc, #92]	; (80047fc <HAL_DMA_IRQHandler+0x24c>)
 800479e:	4299      	cmp	r1, r3
 80047a0:	d026      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x240>
 80047a2:	9b01      	ldr	r3, [sp, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <HAL_DMA_IRQHandler+0x250>)
 80047aa:	4299      	cmp	r1, r3
 80047ac:	d01d      	beq.n	80047ea <HAL_DMA_IRQHandler+0x23a>
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4619      	mov	r1, r3
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_DMA_IRQHandler+0x254>)
 80047b6:	4299      	cmp	r1, r3
 80047b8:	d014      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x234>
 80047ba:	9b01      	ldr	r3, [sp, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_DMA_IRQHandler+0x258>)
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d00b      	beq.n	80047de <HAL_DMA_IRQHandler+0x22e>
 80047c6:	9b01      	ldr	r3, [sp, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <HAL_DMA_IRQHandler+0x25c>)
 80047ce:	4299      	cmp	r1, r3
 80047d0:	d102      	bne.n	80047d8 <HAL_DMA_IRQHandler+0x228>
 80047d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047d6:	e01c      	b.n	8004812 <HAL_DMA_IRQHandler+0x262>
 80047d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047dc:	e019      	b.n	8004812 <HAL_DMA_IRQHandler+0x262>
 80047de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80047e2:	e016      	b.n	8004812 <HAL_DMA_IRQHandler+0x262>
 80047e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e8:	e013      	b.n	8004812 <HAL_DMA_IRQHandler+0x262>
 80047ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ee:	e010      	b.n	8004812 <HAL_DMA_IRQHandler+0x262>
 80047f0:	2340      	movs	r3, #64	; 0x40
 80047f2:	e00e      	b.n	8004812 <HAL_DMA_IRQHandler+0x262>
 80047f4:	40020000 	.word	0x40020000
 80047f8:	40020008 	.word	0x40020008
 80047fc:	4002001c 	.word	0x4002001c
 8004800:	40020030 	.word	0x40020030
 8004804:	40020044 	.word	0x40020044
 8004808:	40020058 	.word	0x40020058
 800480c:	4002006c 	.word	0x4002006c
 8004810:	2304      	movs	r3, #4
 8004812:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8004814:	9b01      	ldr	r3, [sp, #4]
 8004816:	2211      	movs	r2, #17
 8004818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_DMA_IRQHandler+0x27c>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004824:	9b01      	ldr	r3, [sp, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	9801      	ldr	r0, [sp, #4]
 800482a:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_DMA_IRQHandler+0x3c0>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	4b4f      	ldr	r3, [pc, #316]	; (8004974 <HAL_DMA_IRQHandler+0x3c4>)
 8004838:	4299      	cmp	r1, r3
 800483a:	d02e      	beq.n	800489a <HAL_DMA_IRQHandler+0x2ea>
 800483c:	9b01      	ldr	r3, [sp, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4619      	mov	r1, r3
 8004842:	4b4d      	ldr	r3, [pc, #308]	; (8004978 <HAL_DMA_IRQHandler+0x3c8>)
 8004844:	4299      	cmp	r1, r3
 8004846:	d026      	beq.n	8004896 <HAL_DMA_IRQHandler+0x2e6>
 8004848:	9b01      	ldr	r3, [sp, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_DMA_IRQHandler+0x3cc>)
 8004850:	4299      	cmp	r1, r3
 8004852:	d01d      	beq.n	8004890 <HAL_DMA_IRQHandler+0x2e0>
 8004854:	9b01      	ldr	r3, [sp, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4b49      	ldr	r3, [pc, #292]	; (8004980 <HAL_DMA_IRQHandler+0x3d0>)
 800485c:	4299      	cmp	r1, r3
 800485e:	d014      	beq.n	800488a <HAL_DMA_IRQHandler+0x2da>
 8004860:	9b01      	ldr	r3, [sp, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_DMA_IRQHandler+0x3d4>)
 8004868:	4299      	cmp	r1, r3
 800486a:	d00b      	beq.n	8004884 <HAL_DMA_IRQHandler+0x2d4>
 800486c:	9b01      	ldr	r3, [sp, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4619      	mov	r1, r3
 8004872:	4b45      	ldr	r3, [pc, #276]	; (8004988 <HAL_DMA_IRQHandler+0x3d8>)
 8004874:	4299      	cmp	r1, r3
 8004876:	d102      	bne.n	800487e <HAL_DMA_IRQHandler+0x2ce>
 8004878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800487c:	e00e      	b.n	800489c <HAL_DMA_IRQHandler+0x2ec>
 800487e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004882:	e00b      	b.n	800489c <HAL_DMA_IRQHandler+0x2ec>
 8004884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004888:	e008      	b.n	800489c <HAL_DMA_IRQHandler+0x2ec>
 800488a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800488e:	e005      	b.n	800489c <HAL_DMA_IRQHandler+0x2ec>
 8004890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004894:	e002      	b.n	800489c <HAL_DMA_IRQHandler+0x2ec>
 8004896:	2320      	movs	r3, #32
 8004898:	e000      	b.n	800489c <HAL_DMA_IRQHandler+0x2ec>
 800489a:	2302      	movs	r3, #2
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d061      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3b6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d15a      	bne.n	8004966 <HAL_DMA_IRQHandler+0x3b6>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <HAL_DMA_IRQHandler+0x31e>
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80048be:	9b01      	ldr	r3, [sp, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	9a01      	ldr	r2, [sp, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	f022 0202 	bic.w	r2, r2, #2
 80048cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80048ce:	4a28      	ldr	r2, [pc, #160]	; (8004970 <HAL_DMA_IRQHandler+0x3c0>)
 80048d0:	9b01      	ldr	r3, [sp, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4619      	mov	r1, r3
 80048d6:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_DMA_IRQHandler+0x3c4>)
 80048d8:	4299      	cmp	r1, r3
 80048da:	d02e      	beq.n	800493a <HAL_DMA_IRQHandler+0x38a>
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4619      	mov	r1, r3
 80048e2:	4b25      	ldr	r3, [pc, #148]	; (8004978 <HAL_DMA_IRQHandler+0x3c8>)
 80048e4:	4299      	cmp	r1, r3
 80048e6:	d026      	beq.n	8004936 <HAL_DMA_IRQHandler+0x386>
 80048e8:	9b01      	ldr	r3, [sp, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	4b23      	ldr	r3, [pc, #140]	; (800497c <HAL_DMA_IRQHandler+0x3cc>)
 80048f0:	4299      	cmp	r1, r3
 80048f2:	d01d      	beq.n	8004930 <HAL_DMA_IRQHandler+0x380>
 80048f4:	9b01      	ldr	r3, [sp, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4619      	mov	r1, r3
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <HAL_DMA_IRQHandler+0x3d0>)
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d014      	beq.n	800492a <HAL_DMA_IRQHandler+0x37a>
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4619      	mov	r1, r3
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <HAL_DMA_IRQHandler+0x3d4>)
 8004908:	4299      	cmp	r1, r3
 800490a:	d00b      	beq.n	8004924 <HAL_DMA_IRQHandler+0x374>
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4619      	mov	r1, r3
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_DMA_IRQHandler+0x3d8>)
 8004914:	4299      	cmp	r1, r3
 8004916:	d102      	bne.n	800491e <HAL_DMA_IRQHandler+0x36e>
 8004918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800491c:	e00e      	b.n	800493c <HAL_DMA_IRQHandler+0x38c>
 800491e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004922:	e00b      	b.n	800493c <HAL_DMA_IRQHandler+0x38c>
 8004924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004928:	e008      	b.n	800493c <HAL_DMA_IRQHandler+0x38c>
 800492a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800492e:	e005      	b.n	800493c <HAL_DMA_IRQHandler+0x38c>
 8004930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004934:	e002      	b.n	800493c <HAL_DMA_IRQHandler+0x38c>
 8004936:	2320      	movs	r3, #32
 8004938:	e000      	b.n	800493c <HAL_DMA_IRQHandler+0x38c>
 800493a:	2302      	movs	r3, #2
 800493c:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004942:	9b01      	ldr	r3, [sp, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800494e:	9b01      	ldr	r3, [sp, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2020 	strb.w	r2, [r3, #32]
    
      if(hdma->XferCpltCallback != NULL)
 8004956:	9b01      	ldr	r3, [sp, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3b6>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800495e:	9b01      	ldr	r3, [sp, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	9801      	ldr	r0, [sp, #4]
 8004964:	4798      	blx	r3
      }
    }
  }
}
 8004966:	bf00      	nop
 8004968:	b003      	add	sp, #12
 800496a:	f85d fb04 	ldr.w	pc, [sp], #4
 800496e:	bf00      	nop
 8004970:	40020000 	.word	0x40020000
 8004974:	40020008 	.word	0x40020008
 8004978:	4002001c 	.word	0x4002001c
 800497c:	40020030 	.word	0x40020030
 8004980:	40020044 	.word	0x40020044
 8004984:	40020058 	.word	0x40020058
 8004988:	4002006c 	.word	0x4002006c

0800498c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800498c:	b082      	sub	sp, #8
 800498e:	9001      	str	r0, [sp, #4]
  return hdma->State;
 8004990:	9b01      	ldr	r3, [sp, #4]
 8004992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004996:	4618      	mov	r0, r3
 8004998:	b002      	add	sp, #8
 800499a:	4770      	bx	lr

0800499c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800499c:	b082      	sub	sp, #8
 800499e:	9001      	str	r0, [sp, #4]
  return hdma->ErrorCode;
 80049a0:	9b01      	ldr	r3, [sp, #4]
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	b002      	add	sp, #8
 80049a8:	4770      	bx	lr

080049aa <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049aa:	b084      	sub	sp, #16
 80049ac:	9003      	str	r0, [sp, #12]
 80049ae:	9102      	str	r1, [sp, #8]
 80049b0:	9201      	str	r2, [sp, #4]
 80049b2:	9300      	str	r3, [sp, #0]
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	9a00      	ldr	r2, [sp, #0]
 80049ba:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d108      	bne.n	80049d6 <DMA_SetConfig+0x2c>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049c4:	9b03      	ldr	r3, [sp, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	9a01      	ldr	r2, [sp, #4]
 80049ca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	9a02      	ldr	r2, [sp, #8]
 80049d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049d4:	e007      	b.n	80049e6 <DMA_SetConfig+0x3c>
    hdma->Instance->CPAR = SrcAddress;
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	9a02      	ldr	r2, [sp, #8]
 80049dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	9a01      	ldr	r2, [sp, #4]
 80049e4:	60da      	str	r2, [r3, #12]
}
 80049e6:	bf00      	nop
 80049e8:	b004      	add	sp, #16
 80049ea:	4770      	bx	lr

080049ec <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ee:	b087      	sub	sp, #28
 80049f0:	9003      	str	r0, [sp, #12]
 80049f2:	9102      	str	r1, [sp, #8]
 80049f4:	e9cd 2300 	strd	r2, r3, [sp]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t index = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f88d 3016 	strb.w	r3, [sp, #22]
  uint8_t nbiterations = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f88d 3015 	strb.w	r3, [sp, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <HAL_FLASH_Program+0xf8>)
 8004a0c:	7e1b      	ldrb	r3, [r3, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_FLASH_Program+0x2a>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e063      	b.n	8004ade <HAL_FLASH_Program+0xf2>
 8004a16:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <HAL_FLASH_Program+0xf8>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a20:	f000 fa06 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f88d 3017 	strb.w	r3, [sp, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004a2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d150      	bne.n	8004ad4 <HAL_FLASH_Program+0xe8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d103      	bne.n	8004a40 <HAL_FLASH_Program+0x54>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f88d 3015 	strb.w	r3, [sp, #21]
 8004a3e:	e009      	b.n	8004a54 <HAL_FLASH_Program+0x68>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d103      	bne.n	8004a4e <HAL_FLASH_Program+0x62>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2;
 8004a46:	2302      	movs	r3, #2
 8004a48:	f88d 3015 	strb.w	r3, [sp, #21]
 8004a4c:	e002      	b.n	8004a54 <HAL_FLASH_Program+0x68>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4;
 8004a4e:	2304      	movs	r3, #4
 8004a50:	f88d 3015 	strb.w	r3, [sp, #21]
    }

    for (index = 0; index < nbiterations; index++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	f88d 3016 	strb.w	r3, [sp, #22]
 8004a5a:	e033      	b.n	8004ac4 <HAL_FLASH_Program+0xd8>
    {
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8004a5c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	461a      	mov	r2, r3
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	18d7      	adds	r7, r2, r3
 8004a68:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004a6c:	0119      	lsls	r1, r3, #4
 8004a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a72:	f1c1 0620 	rsb	r6, r1, #32
 8004a76:	f1a1 0020 	sub.w	r0, r1, #32
 8004a7a:	fa22 f401 	lsr.w	r4, r2, r1
 8004a7e:	fa03 f606 	lsl.w	r6, r3, r6
 8004a82:	4334      	orrs	r4, r6
 8004a84:	fa23 f000 	lsr.w	r0, r3, r0
 8004a88:	4304      	orrs	r4, r0
 8004a8a:	fa23 f501 	lsr.w	r5, r3, r1
 8004a8e:	b2a3      	uxth	r3, r4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4638      	mov	r0, r7
 8004a94:	f000 f9b2 	bl	8004dfc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a9c:	f000 f9c8 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f88d 3017 	strb.w	r3, [sp, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004aa6:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <HAL_FLASH_Program+0xfc>)
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <HAL_FLASH_Program+0xfc>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004ab2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_FLASH_Program+0xe6>
    for (index = 0; index < nbiterations; index++)
 8004aba:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f88d 3016 	strb.w	r3, [sp, #22]
 8004ac4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8004ac8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3c5      	bcc.n	8004a5c <HAL_FLASH_Program+0x70>
 8004ad0:	e000      	b.n	8004ad4 <HAL_FLASH_Program+0xe8>
      {
        break;
 8004ad2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <HAL_FLASH_Program+0xf8>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	761a      	strb	r2, [r3, #24]

  return status;
 8004ada:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	b007      	add	sp, #28
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae4:	20001530 	.word	0x20001530
 8004ae8:	40022000 	.word	0x40022000

08004aec <HAL_FLASH_Program_IT>:
  * @param  Data:        Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004aec:	b510      	push	{r4, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	9003      	str	r0, [sp, #12]
 8004af2:	9102      	str	r1, [sp, #8]
 8004af4:	e9cd 2300 	strd	r2, r3, [sp]
  HAL_StatusTypeDef status = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004afe:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b00:	7e1b      	ldrb	r3, [r3, #24]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_FLASH_Program_IT+0x1e>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e032      	b.n	8004b70 <HAL_FLASH_Program_IT+0x84>
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	761a      	strb	r2, [r3, #24]
    /* Enable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  }
#else
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_FLASH_Program_IT+0x90>)
 8004b12:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <HAL_FLASH_Program_IT+0x90>)
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004b1a:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */
  
  pFlash.Address = Address;
 8004b1c:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b1e:	9b02      	ldr	r3, [sp, #8]
 8004b20:	6093      	str	r3, [r2, #8]
  pFlash.Data = Data;
 8004b22:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b24:	e9dd 3400 	ldrd	r3, r4, [sp]
 8004b28:	e9c2 3404 	strd	r3, r4, [r2, #16]

  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d106      	bne.n	8004b40 <HAL_FLASH_Program_IT+0x54>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b34:	2203      	movs	r2, #3
 8004b36:	701a      	strb	r2, [r3, #0]
    /*Program halfword (16-bit) at a specified address.*/
    pFlash.DataRemaining = 1;
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e00f      	b.n	8004b60 <HAL_FLASH_Program_IT+0x74>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d106      	bne.n	8004b54 <HAL_FLASH_Program_IT+0x68>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b48:	2204      	movs	r2, #4
 8004b4a:	701a      	strb	r2, [r3, #0]
    /*Program word (32-bit : 2*16-bit) at a specified address.*/
    pFlash.DataRemaining = 2;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b4e:	2202      	movs	r2, #2
 8004b50:	605a      	str	r2, [r3, #4]
 8004b52:	e005      	b.n	8004b60 <HAL_FLASH_Program_IT+0x74>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b56:	2205      	movs	r2, #5
 8004b58:	701a      	strb	r2, [r3, #0]
    /*Program double word (64-bit : 4*16-bit) at a specified address.*/
    pFlash.DataRemaining = 4;
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <HAL_FLASH_Program_IT+0x8c>)
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	605a      	str	r2, [r3, #4]
  }

  /*Program halfword (16-bit) at a specified address.*/
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8004b60:	f8bd 3000 	ldrh.w	r3, [sp]
 8004b64:	4619      	mov	r1, r3
 8004b66:	9802      	ldr	r0, [sp, #8]
 8004b68:	f000 f948 	bl	8004dfc <FLASH_Program_HalfWord>

  return status;
 8004b6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	b006      	add	sp, #24
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	bf00      	nop
 8004b78:	20001530 	.word	0x20001530
 8004b7c:	40022000 	.word	0x40022000

08004b80 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004b80:	b530      	push	{r4, r5, lr}
 8004b82:	b083      	sub	sp, #12
  uint32_t addresstmp = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	9301      	str	r3, [sp, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b88:	4b6b      	ldr	r3, [pc, #428]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_FLASH_IRQHandler+0x20>
 8004b94:	4b68      	ldr	r3, [pc, #416]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <HAL_FLASH_IRQHandler+0x3e>
#endif /* FLASH_BANK2_END */
  {
    /*return the faulty address*/
    addresstmp = pFlash.Address;
 8004ba0:	4b66      	ldr	r3, [pc, #408]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	9301      	str	r3, [sp, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFF;
 8004ba6:	4b65      	ldr	r3, [pc, #404]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bac:	609a      	str	r2, [r3, #8]
  
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004bae:	f000 f983 	bl	8004eb8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8004bb2:	9801      	ldr	r0, [sp, #4]
 8004bb4:	f000 f8c9 	bl	8004d4a <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004bb8:	4b60      	ldr	r3, [pc, #384]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004bbe:	4b5e      	ldr	r3, [pc, #376]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 809e 	beq.w	8004d08 <HAL_FLASH_IRQHandler+0x188>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bcc:	4b5a      	ldr	r3, [pc, #360]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004bce:	2220      	movs	r2, #32
 8004bd0:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8004bd2:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8095 	beq.w	8004d08 <HAL_FLASH_IRQHandler+0x188>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8004bde:	4b57      	ldr	r3, [pc, #348]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d12d      	bne.n	8004c44 <HAL_FLASH_IRQHandler+0xc4>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8004be8:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4a53      	ldr	r2, [pc, #332]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004bf0:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase*/
        if(pFlash.DataRemaining != 0)
 8004bf2:	4b52      	ldr	r3, [pc, #328]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d017      	beq.n	8004c2a <HAL_FLASH_IRQHandler+0xaa>
        {
          addresstmp = pFlash.Address;
 8004bfa:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	9301      	str	r3, [sp, #4]
          /*Indicate user which sector has been erased*/
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004c00:	9801      	ldr	r0, [sp, #4]
 8004c02:	f000 f89d 	bl	8004d40 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8004c06:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0e:	9301      	str	r3, [sp, #4]
          pFlash.Address = addresstmp;
 8004c10:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c12:	9b01      	ldr	r3, [sp, #4]
 8004c14:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004c16:	4a48      	ldr	r2, [pc, #288]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004c18:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f023 0302 	bic.w	r3, r3, #2
 8004c20:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8004c22:	9801      	ldr	r0, [sp, #4]
 8004c24:	f000 fde8 	bl	80057f8 <FLASH_PageErase>
 8004c28:	e06e      	b.n	8004d08 <HAL_FLASH_IRQHandler+0x188>
        }
        else
        {
          /*No more pages to Erase, user callback can be called.*/
          /*Reset Sector and stop Erase pages procedure*/
          pFlash.Address = addresstmp = 0xFFFFFFFF;
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	4a42      	ldr	r2, [pc, #264]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004c36:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	f000 f87f 	bl	8004d40 <HAL_FLASH_EndOfOperationCallback>
 8004c42:	e061      	b.n	8004d08 <HAL_FLASH_IRQHandler+0x188>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8004c44:	4b3d      	ldr	r3, [pc, #244]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d10c      	bne.n	8004c68 <HAL_FLASH_IRQHandler+0xe8>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004c4e:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank*/
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f000 f870 	bl	8004d40 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e04f      	b.n	8004d08 <HAL_FLASH_IRQHandler+0x188>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8004c68:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a33      	ldr	r2, [pc, #204]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c70:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0)
 8004c72:	4b32      	ldr	r3, [pc, #200]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d022      	beq.n	8004cc0 <HAL_FLASH_IRQHandler+0x140>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8004c7a:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	3302      	adds	r3, #2
 8004c80:	4a2e      	ldr	r2, [pc, #184]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c82:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8004c84:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	9301      	str	r3, [sp, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16);
 8004c8a:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c90:	0c14      	lsrs	r4, r2, #16
 8004c92:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004c96:	0c1d      	lsrs	r5, r3, #16
 8004c98:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004c9a:	e9c3 4504 	strd	r4, r5, [r3, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004c9e:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004cac:	f103 0410 	add.w	r4, r3, #16
 8004cb0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	9801      	ldr	r0, [sp, #4]
 8004cba:	f000 f89f 	bl	8004dfc <FLASH_Program_HalfWord>
 8004cbe:	e023      	b.n	8004d08 <HAL_FLASH_IRQHandler+0x188>
        }
        else
        {
          /*Program ended. Return the selected address*/
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d105      	bne.n	8004cd6 <HAL_FLASH_IRQHandler+0x156>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004cca:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f836 	bl	8004d40 <HAL_FLASH_EndOfOperationCallback>
 8004cd4:	e011      	b.n	8004cfa <HAL_FLASH_IRQHandler+0x17a>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8004cd6:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d106      	bne.n	8004cee <HAL_FLASH_IRQHandler+0x16e>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2);
 8004ce0:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	3b02      	subs	r3, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f82a 	bl	8004d40 <HAL_FLASH_EndOfOperationCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_FLASH_IRQHandler+0x17a>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6);
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	3b06      	subs	r3, #6
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f823 	bl	8004d40 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure*/
          pFlash.Address = 0xFFFFFFFF;
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d00:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004d02:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <HAL_FLASH_IRQHandler+0x1b0>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f023 0307 	bic.w	r3, r3, #7
 8004d1c:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8004d1e:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_FLASH_IRQHandler+0x1b8>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8004d28:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <HAL_FLASH_IRQHandler+0x1bc>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	761a      	strb	r2, [r3, #24]
  }
}
 8004d30:	bf00      	nop
 8004d32:	b003      	add	sp, #12
 8004d34:	bd30      	pop	{r4, r5, pc}
 8004d36:	bf00      	nop
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	20001530 	.word	0x20001530

08004d40 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004d40:	b082      	sub	sp, #8
 8004d42:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8004d44:	bf00      	nop
 8004d46:	b002      	add	sp, #8
 8004d48:	4770      	bx	lr

08004d4a <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004d4e:	bf00      	nop
 8004d50:	b002      	add	sp, #8
 8004d52:	4770      	bx	lr

08004d54 <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <HAL_FLASH_Unlock+0x24>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <HAL_FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_FLASH_Unlock+0x24>)
 8004d62:	4a06      	ldr	r2, [pc, #24]	; (8004d7c <HAL_FLASH_Unlock+0x28>)
 8004d64:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d66:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <HAL_FLASH_Unlock+0x24>)
 8004d68:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <HAL_FLASH_Unlock+0x2c>)
 8004d6a:	605a      	str	r2, [r3, #4]
  {
    return HAL_ERROR;
  }
  
#endif /* FLASH_BANK2_END */
  return HAL_OK; 
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_FLASH_Unlock+0x1e>
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40022000 	.word	0x40022000
 8004d7c:	45670123 	.word	0x45670123
 8004d80:	cdef89ab 	.word	0xcdef89ab

08004d84 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_FLASH_Lock+0x14>)
 8004d86:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <HAL_FLASH_Lock+0x14>)
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
#endif /* FLASH_BANK2_END */

  return HAL_OK;  
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000

08004d9c <HAL_FLASH_OB_Unlock>:
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8004d9c:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_FLASH_OB_Unlock+0x24>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_FLASH_OB_Unlock+0x24>)
 8004daa:	4a06      	ldr	r2, [pc, #24]	; (8004dc4 <HAL_FLASH_OB_Unlock+0x28>)
 8004dac:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8004dae:	4b04      	ldr	r3, [pc, #16]	; (8004dc0 <HAL_FLASH_OB_Unlock+0x24>)
 8004db0:	4a05      	ldr	r2, [pc, #20]	; (8004dc8 <HAL_FLASH_OB_Unlock+0x2c>)
 8004db2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_FLASH_OB_Unlock+0x1e>
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40022000 	.word	0x40022000
 8004dc4:	45670123 	.word	0x45670123
 8004dc8:	cdef89ab 	.word	0xcdef89ab

08004dcc <HAL_FLASH_OB_Lock>:
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <HAL_FLASH_OB_Lock+0x14>)
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <HAL_FLASH_OB_Lock+0x14>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40022000 	.word	0x40022000

08004de4 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8004de4:	b508      	push	{r3, lr}
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8004de6:	f7fe ffad 	bl	8003d44 <HAL_NVIC_SystemReset>
  
  return HAL_OK;  
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd08      	pop	{r3, pc}

08004df0 <HAL_FLASH_GetError>:
  * @retval FLASH_ErrorCode: The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{ 
   return pFlash.ErrorCode;
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <HAL_FLASH_GetError+0x8>)
 8004df2:	69db      	ldr	r3, [r3, #28]
}  
 8004df4:	4618      	mov	r0, r3
 8004df6:	4770      	bx	lr
 8004df8:	20001530 	.word	0x20001530

08004dfc <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	9001      	str	r0, [sp, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e06:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <FLASH_Program_HalfWord+0x2c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <FLASH_Program_HalfWord+0x30>)
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <FLASH_Program_HalfWord+0x30>)
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004e18:	9b01      	ldr	r3, [sp, #4]
 8004e1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004e1e:	801a      	strh	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	b002      	add	sp, #8
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20001530 	.word	0x20001530
 8004e2c:	40022000 	.word	0x40022000

08004e30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004e30:	b500      	push	{lr}
 8004e32:	b085      	sub	sp, #20
 8004e34:	9001      	str	r0, [sp, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004e36:	f7fe fd21 	bl	800387c <HAL_GetTick>
 8004e3a:	9003      	str	r0, [sp, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004e3c:	e010      	b.n	8004e60 <FLASH_WaitForLastOperation+0x30>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e44:	d00c      	beq.n	8004e60 <FLASH_WaitForLastOperation+0x30>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <FLASH_WaitForLastOperation+0x2c>
 8004e4c:	f7fe fd16 	bl	800387c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	9b03      	ldr	r3, [sp, #12]
 8004e54:	1ad2      	subs	r2, r2, r3
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d901      	bls.n	8004e60 <FLASH_WaitForLastOperation+0x30>
      {
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e025      	b.n	8004eac <FLASH_WaitForLastOperation+0x7c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <FLASH_WaitForLastOperation+0x84>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e8      	bne.n	8004e3e <FLASH_WaitForLastOperation+0xe>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <FLASH_WaitForLastOperation+0x84>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <FLASH_WaitForLastOperation+0x4e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <FLASH_WaitForLastOperation+0x84>)
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <FLASH_WaitForLastOperation+0x84>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10b      	bne.n	8004ea2 <FLASH_WaitForLastOperation+0x72>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <FLASH_WaitForLastOperation+0x84>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <FLASH_WaitForLastOperation+0x72>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <FLASH_WaitForLastOperation+0x84>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004ea2:	f000 f809 	bl	8004eb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <FLASH_WaitForLastOperation+0x7c>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	b005      	add	sp, #20
 8004eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004eb4:	40022000 	.word	0x40022000

08004eb8 <FLASH_SetErrorCode>:
static void FLASH_SetErrorCode(void)
{ 
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <FLASH_SetErrorCode+0x60>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <FLASH_SetErrorCode+0x18>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <FLASH_SetErrorCode+0x64>)
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f043 0302 	orr.w	r3, r3, #2
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <FLASH_SetErrorCode+0x64>)
 8004ece:	61d3      	str	r3, [r2, #28]
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <FLASH_SetErrorCode+0x60>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <FLASH_SetErrorCode+0x30>
#endif /* FLASH_BANK2_END */
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <FLASH_SetErrorCode+0x64>)
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <FLASH_SetErrorCode+0x64>)
 8004ee6:	61d3      	str	r3, [r2, #28]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <FLASH_SetErrorCode+0x60>)
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <FLASH_SetErrorCode+0x54>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <FLASH_SetErrorCode+0x64>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <FLASH_SetErrorCode+0x64>)
 8004efe:	61d3      	str	r3, [r2, #28]
     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004f00:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <FLASH_SetErrorCode+0x60>)
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <FLASH_SetErrorCode+0x60>)
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	61d3      	str	r3, [r2, #28]

  /* Clear FLASH error pending bits */
#if defined(FLASH_BANK2_END)
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2);
#else
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <FLASH_SetErrorCode+0x60>)
 8004f0e:	2214      	movs	r2, #20
 8004f10:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
}  
 8004f12:	bf00      	nop
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	20001530 	.word	0x20001530

08004f20 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004f20:	b500      	push	{lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	9001      	str	r0, [sp, #4]
 8004f26:	9100      	str	r1, [sp, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t address = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	9302      	str	r3, [sp, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f32:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <HAL_FLASHEx_Erase+0xd8>)
 8004f34:	7e1b      	ldrb	r3, [r3, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_FLASHEx_Erase+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e057      	b.n	8004fee <HAL_FLASHEx_Erase+0xce>
 8004f3e:	4b2e      	ldr	r3, [pc, #184]	; (8004ff8 <HAL_FLASHEx_Erase+0xd8>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f44:	9b01      	ldr	r3, [sp, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d117      	bne.n	8004f7c <HAL_FLASHEx_Erase+0x5c>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f50:	f7ff ff6e 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d144      	bne.n	8004fe4 <HAL_FLASHEx_Erase+0xc4>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f000 f9b6 	bl	80052cc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f64:	f7ff ff64 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f88d 300f 	strb.w	r3, [sp, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004f6e:	4a23      	ldr	r2, [pc, #140]	; (8004ffc <HAL_FLASHEx_Erase+0xdc>)
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_FLASHEx_Erase+0xdc>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	6113      	str	r3, [r2, #16]
 8004f7a:	e033      	b.n	8004fe4 <HAL_FLASHEx_Erase+0xc4>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004f7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f80:	f7ff ff56 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d12c      	bne.n	8004fe4 <HAL_FLASHEx_Erase+0xc4>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8004f8a:	9b00      	ldr	r3, [sp, #0]
 8004f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f90:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	9302      	str	r3, [sp, #8]
 8004f98:	e01b      	b.n	8004fd2 <HAL_FLASHEx_Erase+0xb2>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004f9a:	9802      	ldr	r0, [sp, #8]
 8004f9c:	f000 fc2c 	bl	80057f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004fa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa4:	f7ff ff44 	bl	8004e30 <FLASH_WaitForLastOperation>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f88d 300f 	strb.w	r3, [sp, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <HAL_FLASHEx_Erase+0xdc>)
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_FLASHEx_Erase+0xdc>)
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f023 0302 	bic.w	r3, r3, #2
 8004fb8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004fba:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_FLASHEx_Erase+0xaa>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004fc2:	9b00      	ldr	r3, [sp, #0]
 8004fc4:	9a02      	ldr	r2, [sp, #8]
 8004fc6:	601a      	str	r2, [r3, #0]
            break;
 8004fc8:	e00c      	b.n	8004fe4 <HAL_FLASHEx_Erase+0xc4>
            address += FLASH_PAGE_SIZE)
 8004fca:	9b02      	ldr	r3, [sp, #8]
 8004fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd0:	9302      	str	r3, [sp, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004fd2:	9b01      	ldr	r3, [sp, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	029a      	lsls	r2, r3, #10
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8004fde:	9b02      	ldr	r3, [sp, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d8da      	bhi.n	8004f9a <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <HAL_FLASHEx_Erase+0xd8>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	761a      	strb	r2, [r3, #24]

  return status;
 8004fea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	b005      	add	sp, #20
 8004ff2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ff6:	bf00      	nop
 8004ff8:	20001530 	.word	0x20001530
 8004ffc:	40022000 	.word	0x40022000

08005000 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8005000:	b500      	push	{lr}
 8005002:	b085      	sub	sp, #20
 8005004:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 800500e:	7e1b      	ldrb	r3, [r3, #24]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_FLASHEx_Erase_IT+0x18>
 8005014:	2302      	movs	r3, #2
 8005016:	e02e      	b.n	8005076 <HAL_FLASHEx_Erase_IT+0x76>
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 800501a:	2201      	movs	r2, #1
 800501c:	761a      	strb	r2, [r3, #24]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800501e:	4b18      	ldr	r3, [pc, #96]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_FLASHEx_Erase_IT+0x2c>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e024      	b.n	8005076 <HAL_FLASHEx_Erase_IT+0x76>
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800502c:	4a15      	ldr	r2, [pc, #84]	; (8005084 <HAL_FLASHEx_Erase_IT+0x84>)
 800502e:	4b15      	ldr	r3, [pc, #84]	; (8005084 <HAL_FLASHEx_Erase_IT+0x84>)
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005036:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
  
#endif
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005038:	9b01      	ldr	r3, [sp, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d108      	bne.n	8005052 <HAL_FLASHEx_Erase_IT+0x52>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8005040:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 8005042:	2202      	movs	r2, #2
 8005044:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 8005046:	9b01      	ldr	r3, [sp, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f93e 	bl	80052cc <FLASH_MassErase>
 8005050:	e00f      	b.n	8005072 <HAL_FLASHEx_Erase_IT+0x72>

    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 8005058:	9b01      	ldr	r3, [sp, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 800505e:	6053      	str	r3, [r2, #4]
    pFlash.Address = pEraseInit->PageAddress;
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a06      	ldr	r2, [pc, #24]	; (8005080 <HAL_FLASHEx_Erase_IT+0x80>)
 8005066:	6093      	str	r3, [r2, #8]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 8005068:	9b01      	ldr	r3, [sp, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fbc3 	bl	80057f8 <FLASH_PageErase>
  }

  return status;
 8005072:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	b005      	add	sp, #20
 800507a:	f85d fb04 	ldr.w	pc, [sp], #4
 800507e:	bf00      	nop
 8005080:	20001530 	.word	0x20001530
 8005084:	40022000 	.word	0x40022000

08005088 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8005088:	b500      	push	{lr}
 800508a:	b083      	sub	sp, #12
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 800508c:	23a5      	movs	r3, #165	; 0xa5
 800508e:	f88d 3006 	strb.w	r3, [sp, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8005098:	f000 fb80 	bl	800579c <FLASH_OB_GetRDP>
 800509c:	4603      	mov	r3, r0
 800509e:	f88d 3006 	strb.w	r3, [sp, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050a6:	f7ff fec3 	bl	8004e30 <FLASH_WaitForLastOperation>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f88d 3007 	strb.w	r3, [sp, #7]

  if(status == HAL_OK)
 80050b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d127      	bne.n	8005108 <HAL_FLASHEx_OBErase+0x80>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050b8:	4b16      	ldr	r3, [pc, #88]	; (8005114 <HAL_FLASHEx_OBErase+0x8c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80050be:	4a16      	ldr	r2, [pc, #88]	; (8005118 <HAL_FLASHEx_OBErase+0x90>)
 80050c0:	4b15      	ldr	r3, [pc, #84]	; (8005118 <HAL_FLASHEx_OBErase+0x90>)
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80050ca:	4a13      	ldr	r2, [pc, #76]	; (8005118 <HAL_FLASHEx_OBErase+0x90>)
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <HAL_FLASHEx_OBErase+0x90>)
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d4:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050da:	f7ff fea9 	bl	8004e30 <FLASH_WaitForLastOperation>
 80050de:	4603      	mov	r3, r0
 80050e0:	f88d 3007 	strb.w	r3, [sp, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80050e4:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <HAL_FLASHEx_OBErase+0x90>)
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <HAL_FLASHEx_OBErase+0x90>)
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f023 0320 	bic.w	r3, r3, #32
 80050ee:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 80050f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_FLASHEx_OBErase+0x80>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 80050f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fa77 	bl	80055f0 <FLASH_OB_RDP_LevelConfig>
 8005102:	4603      	mov	r3, r0
 8005104:	f88d 3007 	strb.w	r3, [sp, #7]
    }
  }

  /* Return the erase status */
  return status;
 8005108:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
 800510c:	4618      	mov	r0, r3
 800510e:	b003      	add	sp, #12
 8005110:	f85d fb04 	ldr.w	pc, [sp], #4
 8005114:	20001530 	.word	0x20001530
 8005118:	40022000 	.word	0x40022000

0800511c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800511c:	b500      	push	{lr}
 800511e:	b085      	sub	sp, #20
 8005120:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	f88d 300f 	strb.w	r3, [sp, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005128:	4b40      	ldr	r3, [pc, #256]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 800512a:	7e1b      	ldrb	r3, [r3, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_FLASHEx_OBProgram+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e077      	b.n	8005224 <HAL_FLASHEx_OBProgram+0x108>
 8005134:	4b3d      	ldr	r3, [pc, #244]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 8005136:	2201      	movs	r2, #1
 8005138:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800513a:	9b01      	ldr	r3, [sp, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01e      	beq.n	8005184 <HAL_FLASHEx_OBProgram+0x68>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8005146:	9b01      	ldr	r3, [sp, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d108      	bne.n	8005160 <HAL_FLASHEx_OBProgram+0x44>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 800514e:	9b01      	ldr	r3, [sp, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f8d2 	bl	80052fc <FLASH_OB_EnableWRP>
 8005158:	4603      	mov	r3, r0
 800515a:	f88d 300f 	strb.w	r3, [sp, #15]
 800515e:	e007      	b.n	8005170 <HAL_FLASHEx_OBProgram+0x54>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8005160:	9b01      	ldr	r3, [sp, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f987 	bl	8005478 <FLASH_OB_DisableWRP>
 800516a:	4603      	mov	r3, r0
 800516c:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    if (status != HAL_OK)
 8005170:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_FLASHEx_OBProgram+0x68>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8005178:	4b2c      	ldr	r3, [pc, #176]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 800517a:	2200      	movs	r2, #0
 800517c:	761a      	strb	r2, [r3, #24]
      return status;
 800517e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005182:	e04f      	b.n	8005224 <HAL_FLASHEx_OBProgram+0x108>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8005184:	9b01      	ldr	r3, [sp, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d011      	beq.n	80051b4 <HAL_FLASHEx_OBProgram+0x98>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8005190:	9b01      	ldr	r3, [sp, #4]
 8005192:	7c1b      	ldrb	r3, [r3, #16]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fa2b 	bl	80055f0 <FLASH_OB_RDP_LevelConfig>
 800519a:	4603      	mov	r3, r0
 800519c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (status != HAL_OK)
 80051a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_FLASHEx_OBProgram+0x98>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	761a      	strb	r2, [r3, #24]
      return status;
 80051ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80051b2:	e037      	b.n	8005224 <HAL_FLASHEx_OBProgram+0x108>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80051b4:	9b01      	ldr	r3, [sp, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80051c0:	9b01      	ldr	r3, [sp, #4]
 80051c2:	7c5b      	ldrb	r3, [r3, #17]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 fa6b 	bl	80056a0 <FLASH_OB_UserConfig>
 80051ca:	4603      	mov	r3, r0
 80051cc:	f88d 300f 	strb.w	r3, [sp, #15]
    if (status != HAL_OK)
 80051d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_FLASHEx_OBProgram+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80051d8:	4b14      	ldr	r3, [pc, #80]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 80051da:	2200      	movs	r2, #0
 80051dc:	761a      	strb	r2, [r3, #24]
      return status;
 80051de:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80051e2:	e01f      	b.n	8005224 <HAL_FLASHEx_OBProgram+0x108>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 80051e4:	9b01      	ldr	r3, [sp, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d014      	beq.n	800521a <HAL_FLASHEx_OBProgram+0xfe>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 80051f0:	9b01      	ldr	r3, [sp, #4]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	7e1b      	ldrb	r3, [r3, #24]
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f000 fa8e 	bl	800571c <FLASH_OB_ProgramData>
 8005200:	4603      	mov	r3, r0
 8005202:	f88d 300f 	strb.w	r3, [sp, #15]
    if (status != HAL_OK)
 8005206:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_FLASHEx_OBProgram+0xfe>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800520e:	4b07      	ldr	r3, [pc, #28]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 8005210:	2200      	movs	r2, #0
 8005212:	761a      	strb	r2, [r3, #24]
      return status;
 8005214:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005218:	e004      	b.n	8005224 <HAL_FLASHEx_OBProgram+0x108>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <HAL_FLASHEx_OBProgram+0x110>)
 800521c:	2200      	movs	r2, #0
 800521e:	761a      	strb	r2, [r3, #24]

  return status;
 8005220:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	b005      	add	sp, #20
 8005228:	f85d fb04 	ldr.w	pc, [sp], #4
 800522c:	20001530 	.word	0x20001530

08005230 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8005230:	b500      	push	{lr}
 8005232:	b083      	sub	sp, #12
 8005234:	9001      	str	r0, [sp, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	2207      	movs	r2, #7
 800523a:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 800523c:	f000 faa8 	bl	8005790 <FLASH_OB_GetWRP>
 8005240:	4602      	mov	r2, r0
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8005246:	f000 faa9 	bl	800579c <FLASH_OB_GetRDP>
 800524a:	4603      	mov	r3, r0
 800524c:	b2da      	uxtb	r2, r3
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8005252:	f000 fabb 	bl	80057cc <FLASH_OB_GetUser>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	9b01      	ldr	r3, [sp, #4]
 800525c:	745a      	strb	r2, [r3, #17]
}
 800525e:	bf00      	nop
 8005260:	b003      	add	sp, #12
 8005262:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005268 <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 8005268:	b088      	sub	sp, #32
 800526a:	9001      	str	r0, [sp, #4]
  uint32_t value = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	9307      	str	r3, [sp, #28]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8005270:	9b01      	ldr	r3, [sp, #4]
 8005272:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <HAL_FLASHEx_OBGetUserData+0x5c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d110      	bne.n	800529a <HAL_FLASHEx_OBGetUserData+0x32>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_FLASHEx_OBGetUserData+0x60>)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
 8005280:	f44f 327f 	mov.w	r2, #261120	; 0x3fc00
 8005284:	9206      	str	r2, [sp, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005286:	9a06      	ldr	r2, [sp, #24]
 8005288:	fa92 f2a2 	rbit	r2, r2
 800528c:	9205      	str	r2, [sp, #20]
  return(result);
 800528e:	9a05      	ldr	r2, [sp, #20]
 8005290:	fab2 f282 	clz	r2, r2
 8005294:	40d3      	lsrs	r3, r2
 8005296:	9307      	str	r3, [sp, #28]
 8005298:	e00f      	b.n	80052ba <HAL_FLASHEx_OBGetUserData+0x52>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_FLASHEx_OBGetUserData+0x60>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 737f 	and.w	r3, r3, #66846720	; 0x3fc0000
 80052a2:	f04f 727f 	mov.w	r2, #66846720	; 0x3fc0000
 80052a6:	9204      	str	r2, [sp, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	9a04      	ldr	r2, [sp, #16]
 80052aa:	fa92 f2a2 	rbit	r2, r2
 80052ae:	9203      	str	r2, [sp, #12]
  return(result);
 80052b0:	9a03      	ldr	r2, [sp, #12]
 80052b2:	fab2 f282 	clz	r2, r2
 80052b6:	40d3      	lsrs	r3, r2
 80052b8:	9307      	str	r3, [sp, #28]
  }
  
  return value;
 80052ba:	9b07      	ldr	r3, [sp, #28]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	b008      	add	sp, #32
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	1ffff804 	.word	0x1ffff804
 80052c8:	40022000 	.word	0x40022000

080052cc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80052cc:	b082      	sub	sp, #8
 80052ce:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <FLASH_MassErase+0x28>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80052d6:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <FLASH_MassErase+0x2c>)
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <FLASH_MassErase+0x2c>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80052e2:	4a05      	ldr	r2, [pc, #20]	; (80052f8 <FLASH_MassErase+0x2c>)
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <FLASH_MassErase+0x2c>)
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80052ee:	bf00      	nop
 80052f0:	b002      	add	sp, #8
 80052f2:	4770      	bx	lr
 80052f4:	20001530 	.word	0x20001530
 80052f8:	40022000 	.word	0x40022000

080052fc <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 80052fc:	b500      	push	{lr}
 80052fe:	b087      	sub	sp, #28
 8005300:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	f88d 3017 	strb.w	r3, [sp, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8005308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800530c:	f8ad 3014 	strh.w	r3, [sp, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8005310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005314:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8005318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800531c:	f8ad 3010 	strh.w	r3, [sp, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8005320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005324:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8005328:	f000 fa32 	bl	8005790 <FLASH_OB_GetWRP>
 800532c:	4603      	mov	r3, r0
 800532e:	43da      	mvns	r2, r3
 8005330:	9b01      	ldr	r3, [sp, #4]
 8005332:	4313      	orrs	r3, r2
 8005334:	43db      	mvns	r3, r3
 8005336:	9301      	str	r3, [sp, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	b29b      	uxth	r3, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f8ad 3014 	strh.w	r3, [sp, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
 8005342:	9b01      	ldr	r3, [sp, #4]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	b29b      	uxth	r3, r3
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	0c1b      	lsrs	r3, r3, #16
 8005352:	b29b      	uxth	r3, r3
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f8ad 3010 	strh.w	r3, [sp, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
 800535a:	9b01      	ldr	r3, [sp, #4]
 800535c:	0e1b      	lsrs	r3, r3, #24
 800535e:	f8ad 300e 	strh.w	r3, [sp, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005362:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005366:	f7ff fd63 	bl	8004e30 <FLASH_WaitForLastOperation>
 800536a:	4603      	mov	r3, r0
 800536c:	f88d 3017 	strb.w	r3, [sp, #23]

  if(status == HAL_OK)
 8005370:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d173      	bne.n	8005460 <FLASH_OB_EnableWRP+0x164>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005378:	4b3c      	ldr	r3, [pc, #240]	; (800546c <FLASH_OB_EnableWRP+0x170>)
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 800537e:	f7ff fe83 	bl	8005088 <HAL_FLASHEx_OBErase>
 8005382:	4603      	mov	r3, r0
 8005384:	f88d 3017 	strb.w	r3, [sp, #23]
    if (status == HAL_OK)  
 8005388:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d167      	bne.n	8005460 <FLASH_OB_EnableWRP+0x164>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005390:	4a37      	ldr	r2, [pc, #220]	; (8005470 <FLASH_OB_EnableWRP+0x174>)
 8005392:	4b37      	ldr	r3, [pc, #220]	; (8005470 <FLASH_OB_EnableWRP+0x174>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f043 0310 	orr.w	r3, r3, #16
 800539a:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFF)
 800539c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80053a0:	2bff      	cmp	r3, #255	; 0xff
 80053a2:	d00f      	beq.n	80053c4 <FLASH_OB_EnableWRP+0xc8>
      {
        OB->WRP0 &= WRP0_Data;
 80053a4:	4933      	ldr	r1, [pc, #204]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 80053a6:	4b33      	ldr	r3, [pc, #204]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 80053a8:	891b      	ldrh	r3, [r3, #8]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80053b0:	4013      	ands	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053ba:	f7ff fd39 	bl	8004e30 <FLASH_WaitForLastOperation>
 80053be:	4603      	mov	r3, r0
 80053c0:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFF))
 80053c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d113      	bne.n	80053f4 <FLASH_OB_EnableWRP+0xf8>
 80053cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80053d0:	2bff      	cmp	r3, #255	; 0xff
 80053d2:	d00f      	beq.n	80053f4 <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP1 &= WRP1_Data;
 80053d4:	4927      	ldr	r1, [pc, #156]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 80053d8:	895b      	ldrh	r3, [r3, #10]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80053e0:	4013      	ands	r3, r2
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053ea:	f7ff fd21 	bl	8004e30 <FLASH_WaitForLastOperation>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFF))
 80053f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d113      	bne.n	8005424 <FLASH_OB_EnableWRP+0x128>
 80053fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005400:	2bff      	cmp	r3, #255	; 0xff
 8005402:	d00f      	beq.n	8005424 <FLASH_OB_EnableWRP+0x128>
      {
        OB->WRP2 &= WRP2_Data;
 8005404:	491b      	ldr	r1, [pc, #108]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 8005406:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 8005408:	899b      	ldrh	r3, [r3, #12]
 800540a:	b29a      	uxth	r2, r3
 800540c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005410:	4013      	ands	r3, r2
 8005412:	b29b      	uxth	r3, r3
 8005414:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005416:	f24c 3050 	movw	r0, #50000	; 0xc350
 800541a:	f7ff fd09 	bl	8004e30 <FLASH_WaitForLastOperation>
 800541e:	4603      	mov	r3, r0
 8005420:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFF))
 8005424:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d113      	bne.n	8005454 <FLASH_OB_EnableWRP+0x158>
 800542c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005430:	2bff      	cmp	r3, #255	; 0xff
 8005432:	d00f      	beq.n	8005454 <FLASH_OB_EnableWRP+0x158>
      {
        OB->WRP3 &= WRP3_Data;
 8005434:	490f      	ldr	r1, [pc, #60]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <FLASH_OB_EnableWRP+0x178>)
 8005438:	89db      	ldrh	r3, [r3, #14]
 800543a:	b29a      	uxth	r2, r3
 800543c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005440:	4013      	ands	r3, r2
 8005442:	b29b      	uxth	r3, r3
 8005444:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005446:	f24c 3050 	movw	r0, #50000	; 0xc350
 800544a:	f7ff fcf1 	bl	8004e30 <FLASH_WaitForLastOperation>
 800544e:	4603      	mov	r3, r0
 8005450:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005454:	4a06      	ldr	r2, [pc, #24]	; (8005470 <FLASH_OB_EnableWRP+0x174>)
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <FLASH_OB_EnableWRP+0x174>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f023 0310 	bic.w	r3, r3, #16
 800545e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8005460:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	b007      	add	sp, #28
 8005468:	f85d fb04 	ldr.w	pc, [sp], #4
 800546c:	20001530 	.word	0x20001530
 8005470:	40022000 	.word	0x40022000
 8005474:	1ffff800 	.word	0x1ffff800

08005478 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8005478:	b500      	push	{lr}
 800547a:	b087      	sub	sp, #28
 800547c:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	f88d 3017 	strb.w	r3, [sp, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8005484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005488:	f8ad 3014 	strh.w	r3, [sp, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 800548c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005490:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8005494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005498:	f8ad 3010 	strh.w	r3, [sp, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 800549c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054a0:	f8ad 300e 	strh.w	r3, [sp, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 80054a4:	f000 f974 	bl	8005790 <FLASH_OB_GetWRP>
 80054a8:	4602      	mov	r2, r0
 80054aa:	9b01      	ldr	r3, [sp, #4]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	9301      	str	r3, [sp, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 80054b0:	9b01      	ldr	r3, [sp, #4]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f8ad 3014 	strh.w	r3, [sp, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b29b      	uxth	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f8ad 3012 	strh.w	r3, [sp, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f8ad 3010 	strh.w	r3, [sp, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
 80054d2:	9b01      	ldr	r3, [sp, #4]
 80054d4:	0e1b      	lsrs	r3, r3, #24
 80054d6:	f8ad 300e 	strh.w	r3, [sp, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054da:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054de:	f7ff fca7 	bl	8004e30 <FLASH_WaitForLastOperation>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f88d 3017 	strb.w	r3, [sp, #23]

  if(status == HAL_OK)
 80054e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d173      	bne.n	80055d8 <FLASH_OB_DisableWRP+0x160>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80054f0:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <FLASH_OB_DisableWRP+0x16c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80054f6:	f7ff fdc7 	bl	8005088 <HAL_FLASHEx_OBErase>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f88d 3017 	strb.w	r3, [sp, #23]
    if (status == HAL_OK)  
 8005500:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d167      	bne.n	80055d8 <FLASH_OB_DisableWRP+0x160>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005508:	4a37      	ldr	r2, [pc, #220]	; (80055e8 <FLASH_OB_DisableWRP+0x170>)
 800550a:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <FLASH_OB_DisableWRP+0x170>)
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f043 0310 	orr.w	r3, r3, #16
 8005512:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFF)
 8005514:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005518:	2bff      	cmp	r3, #255	; 0xff
 800551a:	d00f      	beq.n	800553c <FLASH_OB_DisableWRP+0xc4>
      {
        OB->WRP0 |= WRP0_Data;
 800551c:	4933      	ldr	r1, [pc, #204]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 800551e:	4b33      	ldr	r3, [pc, #204]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 8005520:	891b      	ldrh	r3, [r3, #8]
 8005522:	b29a      	uxth	r2, r3
 8005524:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	b29b      	uxth	r3, r3
 800552c:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800552e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005532:	f7ff fc7d 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005536:	4603      	mov	r3, r0
 8005538:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFF))
 800553c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d113      	bne.n	800556c <FLASH_OB_DisableWRP+0xf4>
 8005544:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005548:	2bff      	cmp	r3, #255	; 0xff
 800554a:	d00f      	beq.n	800556c <FLASH_OB_DisableWRP+0xf4>
      {
        OB->WRP1 |= WRP1_Data;
 800554c:	4927      	ldr	r1, [pc, #156]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 800554e:	4b27      	ldr	r3, [pc, #156]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 8005550:	895b      	ldrh	r3, [r3, #10]
 8005552:	b29a      	uxth	r2, r3
 8005554:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005558:	4313      	orrs	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800555e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005562:	f7ff fc65 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005566:	4603      	mov	r3, r0
 8005568:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFF))
 800556c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d113      	bne.n	800559c <FLASH_OB_DisableWRP+0x124>
 8005574:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005578:	2bff      	cmp	r3, #255	; 0xff
 800557a:	d00f      	beq.n	800559c <FLASH_OB_DisableWRP+0x124>
      {
        OB->WRP2 |= WRP2_Data;
 800557c:	491b      	ldr	r1, [pc, #108]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 800557e:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 8005580:	899b      	ldrh	r3, [r3, #12]
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800558e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005592:	f7ff fc4d 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005596:	4603      	mov	r3, r0
 8005598:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFF))
 800559c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d113      	bne.n	80055cc <FLASH_OB_DisableWRP+0x154>
 80055a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80055a8:	2bff      	cmp	r3, #255	; 0xff
 80055aa:	d00f      	beq.n	80055cc <FLASH_OB_DisableWRP+0x154>
      {
        OB->WRP3 |= WRP3_Data;
 80055ac:	490f      	ldr	r1, [pc, #60]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <FLASH_OB_DisableWRP+0x174>)
 80055b0:	89db      	ldrh	r3, [r3, #14]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055c2:	f7ff fc35 	bl	8004e30 <FLASH_WaitForLastOperation>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f88d 3017 	strb.w	r3, [sp, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80055cc:	4a06      	ldr	r2, [pc, #24]	; (80055e8 <FLASH_OB_DisableWRP+0x170>)
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <FLASH_OB_DisableWRP+0x170>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 80055d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	b007      	add	sp, #28
 80055e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80055e4:	20001530 	.word	0x20001530
 80055e8:	40022000 	.word	0x40022000
 80055ec:	1ffff800 	.word	0x1ffff800

080055f0 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 80055f0:	b500      	push	{lr}
 80055f2:	b085      	sub	sp, #20
 80055f4:	4603      	mov	r3, r0
 80055f6:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005600:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005604:	f7ff fc14 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005608:	4603      	mov	r3, r0
 800560a:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == HAL_OK)
 800560e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d137      	bne.n	8005686 <FLASH_OB_RDP_LevelConfig+0x96>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005616:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <FLASH_OB_RDP_LevelConfig+0xa4>)
 8005618:	2200      	movs	r2, #0
 800561a:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 800561e:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f043 0320 	orr.w	r3, r3, #32
 8005626:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005628:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005632:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005638:	f7ff fbfa 	bl	8004e30 <FLASH_WaitForLastOperation>
 800563c:	4603      	mov	r3, r0
 800563e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f023 0320 	bic.w	r3, r3, #32
 800564c:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 800564e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d117      	bne.n	8005686 <FLASH_OB_RDP_LevelConfig+0x96>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 8005658:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f043 0310 	orr.w	r3, r3, #16
 8005660:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <FLASH_OB_RDP_LevelConfig+0xac>)
 8005664:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005668:	b292      	uxth	r2, r2
 800566a:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 800566c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005670:	f7ff fbde 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005674:	4603      	mov	r3, r0
 8005676:	f88d 300f 	strb.w	r3, [sp, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800567a:	4a07      	ldr	r2, [pc, #28]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <FLASH_OB_RDP_LevelConfig+0xa8>)
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f023 0310 	bic.w	r3, r3, #16
 8005684:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8005686:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	b005      	add	sp, #20
 800568e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005692:	bf00      	nop
 8005694:	20001530 	.word	0x20001530
 8005698:	40022000 	.word	0x40022000
 800569c:	1ffff800 	.word	0x1ffff800

080056a0 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 80056a0:	b500      	push	{lr}
 80056a2:	b085      	sub	sp, #20
 80056a4:	4603      	mov	r3, r0
 80056a6:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f88d 300f 	strb.w	r3, [sp, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80056b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056b4:	f7ff fbbc 	bl	8004e30 <FLASH_WaitForLastOperation>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == HAL_OK)
 80056be:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d11d      	bne.n	8005702 <FLASH_OB_UserConfig+0x62>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056c6:	4b12      	ldr	r3, [pc, #72]	; (8005710 <FLASH_OB_UserConfig+0x70>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80056cc:	4a11      	ldr	r2, [pc, #68]	; (8005714 <FLASH_OB_UserConfig+0x74>)
 80056ce:	4b11      	ldr	r3, [pc, #68]	; (8005714 <FLASH_OB_UserConfig+0x74>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f043 0310 	orr.w	r3, r3, #16
 80056d6:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0);
#else
    OB->USER = (UserConfig | 0x88);
 80056d8:	4a0f      	ldr	r2, [pc, #60]	; (8005718 <FLASH_OB_UserConfig+0x78>)
 80056da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056de:	f063 0377 	orn	r3, r3, #119	; 0x77
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	8053      	strh	r3, [r2, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80056e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056ec:	f7ff fba0 	bl	8004e30 <FLASH_WaitForLastOperation>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f88d 300f 	strb.w	r3, [sp, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80056f6:	4a07      	ldr	r2, [pc, #28]	; (8005714 <FLASH_OB_UserConfig+0x74>)
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <FLASH_OB_UserConfig+0x74>)
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f023 0310 	bic.w	r3, r3, #16
 8005700:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 8005702:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	b005      	add	sp, #20
 800570a:	f85d fb04 	ldr.w	pc, [sp], #4
 800570e:	bf00      	nop
 8005710:	20001530 	.word	0x20001530
 8005714:	40022000 	.word	0x40022000
 8005718:	1ffff800 	.word	0x1ffff800

0800571c <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 800571c:	b500      	push	{lr}
 800571e:	b085      	sub	sp, #20
 8005720:	9001      	str	r0, [sp, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	f88d 3003 	strb.w	r3, [sp, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f88d 300f 	strb.w	r3, [sp, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800572e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005732:	f7ff fb7d 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005736:	4603      	mov	r3, r0
 8005738:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(status == HAL_OK)
 800573c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11a      	bne.n	800577a <FLASH_OB_ProgramData+0x5e>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005744:	4b10      	ldr	r3, [pc, #64]	; (8005788 <FLASH_OB_ProgramData+0x6c>)
 8005746:	2200      	movs	r2, #0
 8005748:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800574a:	4a10      	ldr	r2, [pc, #64]	; (800578c <FLASH_OB_ProgramData+0x70>)
 800574c:	4b0f      	ldr	r3, [pc, #60]	; (800578c <FLASH_OB_ProgramData+0x70>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f043 0310 	orr.w	r3, r3, #16
 8005754:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8005756:	9b01      	ldr	r3, [sp, #4]
 8005758:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800575c:	b292      	uxth	r2, r2
 800575e:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005760:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005764:	f7ff fb64 	bl	8004e30 <FLASH_WaitForLastOperation>
 8005768:	4603      	mov	r3, r0
 800576a:	f88d 300f 	strb.w	r3, [sp, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <FLASH_OB_ProgramData+0x70>)
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <FLASH_OB_ProgramData+0x70>)
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 800577a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	b005      	add	sp, #20
 8005782:	f85d fb04 	ldr.w	pc, [sp], #4
 8005786:	bf00      	nop
 8005788:	20001530 	.word	0x20001530
 800578c:	40022000 	.word	0x40022000

08005790 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8005790:	4b01      	ldr	r3, [pc, #4]	; (8005798 <FLASH_OB_GetWRP+0x8>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
}
 8005794:	4618      	mov	r0, r3
 8005796:	4770      	bx	lr
 8005798:	40022000 	.word	0x40022000

0800579c <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800579c:	b082      	sub	sp, #8
  uint32_t readstatus = OB_RDP_LEVEL_0;
 800579e:	23a5      	movs	r3, #165	; 0xa5
 80057a0:	9301      	str	r3, [sp, #4]
  uint32_t tmp_reg = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	9300      	str	r3, [sp, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <FLASH_OB_GetRDP+0x2c>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	9300      	str	r3, [sp, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 80057b0:	9b00      	ldr	r3, [sp, #0]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d102      	bne.n	80057bc <FLASH_OB_GetRDP+0x20>
  {
    readstatus = OB_RDP_LEVEL_1;
 80057b6:	2300      	movs	r3, #0
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	e001      	b.n	80057c0 <FLASH_OB_GetRDP+0x24>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 80057bc:	23a5      	movs	r3, #165	; 0xa5
 80057be:	9301      	str	r3, [sp, #4]
  }

  return readstatus;
 80057c0:	9b01      	ldr	r3, [sp, #4]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	b002      	add	sp, #8
 80057c6:	4770      	bx	lr
 80057c8:	40022000 	.word	0x40022000

080057cc <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80057cc:	b082      	sub	sp, #8
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <FLASH_OB_GetUser+0x28>)
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f003 031c 	and.w	r3, r3, #28
 80057d6:	2204      	movs	r2, #4
 80057d8:	9201      	str	r2, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	9a01      	ldr	r2, [sp, #4]
 80057dc:	fa92 f2a2 	rbit	r2, r2
 80057e0:	9200      	str	r2, [sp, #0]
  return(result);
 80057e2:	9a00      	ldr	r2, [sp, #0]
 80057e4:	fab2 f282 	clz	r2, r2
 80057e8:	40d3      	lsrs	r3, r2
 80057ea:	b2db      	uxtb	r3, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	b002      	add	sp, #8
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40022000 	.word	0x40022000

080057f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80057f8:	b082      	sub	sp, #8
 80057fa:	9001      	str	r0, [sp, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <FLASH_PageErase+0x30>)
 80057fe:	2200      	movs	r2, #0
 8005800:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005802:	4a0a      	ldr	r2, [pc, #40]	; (800582c <FLASH_PageErase+0x34>)
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <FLASH_PageErase+0x34>)
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f043 0302 	orr.w	r3, r3, #2
 800580c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <FLASH_PageErase+0x34>)
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005814:	4a05      	ldr	r2, [pc, #20]	; (800582c <FLASH_PageErase+0x34>)
 8005816:	4b05      	ldr	r3, [pc, #20]	; (800582c <FLASH_PageErase+0x34>)
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005820:	bf00      	nop
 8005822:	b002      	add	sp, #8
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20001530 	.word	0x20001530
 800582c:	40022000 	.word	0x40022000

08005830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005830:	b08a      	sub	sp, #40	; 0x28
 8005832:	9001      	str	r0, [sp, #4]
 8005834:	9100      	str	r1, [sp, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005836:	2300      	movs	r3, #0
 8005838:	9307      	str	r3, [sp, #28]
  uint32_t iocurrent = 0x00;
 800583a:	2300      	movs	r3, #0
 800583c:	9306      	str	r3, [sp, #24]
  uint32_t temp = 0x00;
 800583e:	2300      	movs	r3, #0
 8005840:	9305      	str	r3, [sp, #20]
  uint32_t config = 0x00;
 8005842:	2300      	movs	r3, #0
 8005844:	9308      	str	r3, [sp, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8005846:	2300      	movs	r3, #0
 8005848:	9304      	str	r3, [sp, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800584a:	2300      	movs	r3, #0
 800584c:	9309      	str	r3, [sp, #36]	; 0x24
 800584e:	e127      	b.n	8005aa0 <HAL_GPIO_Init+0x270>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005850:	2201      	movs	r2, #1
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	9307      	str	r3, [sp, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800585a:	9b00      	ldr	r3, [sp, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	9b07      	ldr	r3, [sp, #28]
 8005860:	4013      	ands	r3, r2
 8005862:	9306      	str	r3, [sp, #24]

    if (iocurrent == ioposition)
 8005864:	9a06      	ldr	r2, [sp, #24]
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	429a      	cmp	r2, r3
 800586a:	f040 8116 	bne.w	8005a9a <HAL_GPIO_Init+0x26a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800586e:	9b00      	ldr	r3, [sp, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b12      	cmp	r3, #18
 8005874:	d034      	beq.n	80058e0 <HAL_GPIO_Init+0xb0>
 8005876:	2b12      	cmp	r3, #18
 8005878:	d80d      	bhi.n	8005896 <HAL_GPIO_Init+0x66>
 800587a:	2b02      	cmp	r3, #2
 800587c:	d02b      	beq.n	80058d6 <HAL_GPIO_Init+0xa6>
 800587e:	2b02      	cmp	r3, #2
 8005880:	d804      	bhi.n	800588c <HAL_GPIO_Init+0x5c>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d031      	beq.n	80058ea <HAL_GPIO_Init+0xba>
 8005886:	2b01      	cmp	r3, #1
 8005888:	d01c      	beq.n	80058c4 <HAL_GPIO_Init+0x94>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 800588a:	e048      	b.n	800591e <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 800588c:	2b03      	cmp	r3, #3
 800588e:	d043      	beq.n	8005918 <HAL_GPIO_Init+0xe8>
 8005890:	2b11      	cmp	r3, #17
 8005892:	d01b      	beq.n	80058cc <HAL_GPIO_Init+0x9c>
          break;
 8005894:	e043      	b.n	800591e <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 8005896:	4a86      	ldr	r2, [pc, #536]	; (8005ab0 <HAL_GPIO_Init+0x280>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d026      	beq.n	80058ea <HAL_GPIO_Init+0xba>
 800589c:	4a84      	ldr	r2, [pc, #528]	; (8005ab0 <HAL_GPIO_Init+0x280>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d806      	bhi.n	80058b0 <HAL_GPIO_Init+0x80>
 80058a2:	4a84      	ldr	r2, [pc, #528]	; (8005ab4 <HAL_GPIO_Init+0x284>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d020      	beq.n	80058ea <HAL_GPIO_Init+0xba>
 80058a8:	4a83      	ldr	r2, [pc, #524]	; (8005ab8 <HAL_GPIO_Init+0x288>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_GPIO_Init+0xba>
          break;
 80058ae:	e036      	b.n	800591e <HAL_GPIO_Init+0xee>
      switch (GPIO_Init->Mode)
 80058b0:	4a82      	ldr	r2, [pc, #520]	; (8005abc <HAL_GPIO_Init+0x28c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d019      	beq.n	80058ea <HAL_GPIO_Init+0xba>
 80058b6:	4a82      	ldr	r2, [pc, #520]	; (8005ac0 <HAL_GPIO_Init+0x290>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d016      	beq.n	80058ea <HAL_GPIO_Init+0xba>
 80058bc:	4a81      	ldr	r2, [pc, #516]	; (8005ac4 <HAL_GPIO_Init+0x294>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_GPIO_Init+0xba>
          break;
 80058c2:	e02c      	b.n	800591e <HAL_GPIO_Init+0xee>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80058c4:	9b00      	ldr	r3, [sp, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	9308      	str	r3, [sp, #32]
          break;
 80058ca:	e028      	b.n	800591e <HAL_GPIO_Init+0xee>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80058cc:	9b00      	ldr	r3, [sp, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	3304      	adds	r3, #4
 80058d2:	9308      	str	r3, [sp, #32]
          break;
 80058d4:	e023      	b.n	800591e <HAL_GPIO_Init+0xee>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80058d6:	9b00      	ldr	r3, [sp, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	3308      	adds	r3, #8
 80058dc:	9308      	str	r3, [sp, #32]
          break;
 80058de:	e01e      	b.n	800591e <HAL_GPIO_Init+0xee>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80058e0:	9b00      	ldr	r3, [sp, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	330c      	adds	r3, #12
 80058e6:	9308      	str	r3, [sp, #32]
          break;
 80058e8:	e019      	b.n	800591e <HAL_GPIO_Init+0xee>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d102      	bne.n	80058f8 <HAL_GPIO_Init+0xc8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80058f2:	2304      	movs	r3, #4
 80058f4:	9308      	str	r3, [sp, #32]
          break; 
 80058f6:	e012      	b.n	800591e <HAL_GPIO_Init+0xee>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80058f8:	9b00      	ldr	r3, [sp, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <HAL_GPIO_Init+0xdc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005900:	2308      	movs	r3, #8
 8005902:	9308      	str	r3, [sp, #32]
            GPIOx->BSRR = ioposition;
 8005904:	9b01      	ldr	r3, [sp, #4]
 8005906:	9a07      	ldr	r2, [sp, #28]
 8005908:	611a      	str	r2, [r3, #16]
          break; 
 800590a:	e008      	b.n	800591e <HAL_GPIO_Init+0xee>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800590c:	2308      	movs	r3, #8
 800590e:	9308      	str	r3, [sp, #32]
            GPIOx->BRR = ioposition;
 8005910:	9b01      	ldr	r3, [sp, #4]
 8005912:	9a07      	ldr	r2, [sp, #28]
 8005914:	615a      	str	r2, [r3, #20]
          break; 
 8005916:	e002      	b.n	800591e <HAL_GPIO_Init+0xee>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005918:	2300      	movs	r3, #0
 800591a:	9308      	str	r3, [sp, #32]
          break;
 800591c:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800591e:	9b06      	ldr	r3, [sp, #24]
 8005920:	2bff      	cmp	r3, #255	; 0xff
 8005922:	d801      	bhi.n	8005928 <HAL_GPIO_Init+0xf8>
 8005924:	9b01      	ldr	r3, [sp, #4]
 8005926:	e001      	b.n	800592c <HAL_GPIO_Init+0xfc>
 8005928:	9b01      	ldr	r3, [sp, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	9303      	str	r3, [sp, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800592e:	9b06      	ldr	r3, [sp, #24]
 8005930:	2bff      	cmp	r3, #255	; 0xff
 8005932:	d802      	bhi.n	800593a <HAL_GPIO_Init+0x10a>
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	e002      	b.n	8005940 <HAL_GPIO_Init+0x110>
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	3b08      	subs	r3, #8
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	9304      	str	r3, [sp, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	210f      	movs	r1, #15
 8005948:	9b04      	ldr	r3, [sp, #16]
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	401a      	ands	r2, r3
 8005952:	9908      	ldr	r1, [sp, #32]
 8005954:	9b04      	ldr	r3, [sp, #16]
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	431a      	orrs	r2, r3
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005960:	9b00      	ldr	r3, [sp, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8096 	beq.w	8005a9a <HAL_GPIO_Init+0x26a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800596e:	4a56      	ldr	r2, [pc, #344]	; (8005ac8 <HAL_GPIO_Init+0x298>)
 8005970:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <HAL_GPIO_Init+0x298>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6193      	str	r3, [r2, #24]
 800597a:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <HAL_GPIO_Init+0x298>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	9302      	str	r3, [sp, #8]
 8005984:	9b02      	ldr	r3, [sp, #8]
        temp = AFIO->EXTICR[position >> 2];
 8005986:	4a51      	ldr	r2, [pc, #324]	; (8005acc <HAL_GPIO_Init+0x29c>)
 8005988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	3302      	adds	r3, #2
 800598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005992:	9305      	str	r3, [sp, #20]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	220f      	movs	r2, #15
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	9a05      	ldr	r2, [sp, #20]
 80059a6:	4013      	ands	r3, r2
 80059a8:	9305      	str	r3, [sp, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80059aa:	9b01      	ldr	r3, [sp, #4]
 80059ac:	4a48      	ldr	r2, [pc, #288]	; (8005ad0 <HAL_GPIO_Init+0x2a0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_GPIO_Init+0x1aa>
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	4a47      	ldr	r2, [pc, #284]	; (8005ad4 <HAL_GPIO_Init+0x2a4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d00d      	beq.n	80059d6 <HAL_GPIO_Init+0x1a6>
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	4a46      	ldr	r2, [pc, #280]	; (8005ad8 <HAL_GPIO_Init+0x2a8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d007      	beq.n	80059d2 <HAL_GPIO_Init+0x1a2>
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	4a45      	ldr	r2, [pc, #276]	; (8005adc <HAL_GPIO_Init+0x2ac>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_GPIO_Init+0x19e>
 80059ca:	2303      	movs	r3, #3
 80059cc:	e006      	b.n	80059dc <HAL_GPIO_Init+0x1ac>
 80059ce:	2304      	movs	r3, #4
 80059d0:	e004      	b.n	80059dc <HAL_GPIO_Init+0x1ac>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e002      	b.n	80059dc <HAL_GPIO_Init+0x1ac>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_GPIO_Init+0x1ac>
 80059da:	2300      	movs	r3, #0
 80059dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059de:	f002 0203 	and.w	r2, r2, #3
 80059e2:	0092      	lsls	r2, r2, #2
 80059e4:	4093      	lsls	r3, r2
 80059e6:	9a05      	ldr	r2, [sp, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	9305      	str	r3, [sp, #20]
        AFIO->EXTICR[position >> 2] = temp;
 80059ec:	4937      	ldr	r1, [pc, #220]	; (8005acc <HAL_GPIO_Init+0x29c>)
 80059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f0:	089b      	lsrs	r3, r3, #2
 80059f2:	3302      	adds	r3, #2
 80059f4:	9a05      	ldr	r2, [sp, #20]
 80059f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059fa:	9b00      	ldr	r3, [sp, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8005a06:	4936      	ldr	r1, [pc, #216]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a08:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	9b06      	ldr	r3, [sp, #24]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]
 8005a12:	e006      	b.n	8005a22 <HAL_GPIO_Init+0x1f2>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8005a14:	4932      	ldr	r1, [pc, #200]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a16:	4b32      	ldr	r3, [pc, #200]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	4013      	ands	r3, r2
 8005a20:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <HAL_GPIO_Init+0x20c>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8005a2e:	492c      	ldr	r1, [pc, #176]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a30:	4b2b      	ldr	r3, [pc, #172]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	9b06      	ldr	r3, [sp, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
 8005a3a:	e006      	b.n	8005a4a <HAL_GPIO_Init+0x21a>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8005a3c:	4928      	ldr	r1, [pc, #160]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a3e:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	9b06      	ldr	r3, [sp, #24]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	4013      	ands	r3, r2
 8005a48:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a4a:	9b00      	ldr	r3, [sp, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <HAL_GPIO_Init+0x234>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8005a56:	4922      	ldr	r1, [pc, #136]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	608b      	str	r3, [r1, #8]
 8005a62:	e006      	b.n	8005a72 <HAL_GPIO_Init+0x242>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8005a64:	491e      	ldr	r1, [pc, #120]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a66:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	9b06      	ldr	r3, [sp, #24]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	4013      	ands	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a72:	9b00      	ldr	r3, [sp, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <HAL_GPIO_Init+0x25c>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8005a7e:	4918      	ldr	r1, [pc, #96]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a80:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60cb      	str	r3, [r1, #12]
 8005a8a:	e006      	b.n	8005a9a <HAL_GPIO_Init+0x26a>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8005a8c:	4914      	ldr	r1, [pc, #80]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a8e:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <HAL_GPIO_Init+0x2b0>)
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	4013      	ands	r3, r2
 8005a98:	60cb      	str	r3, [r1, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	f67f aed4 	bls.w	8005850 <HAL_GPIO_Init+0x20>
        }
      }
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	b00a      	add	sp, #40	; 0x28
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	10210000 	.word	0x10210000
 8005ab4:	10110000 	.word	0x10110000
 8005ab8:	10120000 	.word	0x10120000
 8005abc:	10310000 	.word	0x10310000
 8005ac0:	10320000 	.word	0x10320000
 8005ac4:	10220000 	.word	0x10220000
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40010800 	.word	0x40010800
 8005ad4:	40010c00 	.word	0x40010c00
 8005ad8:	40011000 	.word	0x40011000
 8005adc:	40011400 	.word	0x40011400
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	9001      	str	r0, [sp, #4]
 8005ae8:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00;
 8005aea:	2300      	movs	r3, #0
 8005aec:	9307      	str	r3, [sp, #28]
  uint32_t iocurrent = 0x00;
 8005aee:	2300      	movs	r3, #0
 8005af0:	9306      	str	r3, [sp, #24]
  uint32_t tmp = 0x00;
 8005af2:	2300      	movs	r3, #0
 8005af4:	9305      	str	r3, [sp, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	9304      	str	r3, [sp, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8005afa:	e09a      	b.n	8005c32 <HAL_GPIO_DeInit+0x14e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & ((uint32_t)1 << position);
 8005afc:	2201      	movs	r2, #1
 8005afe:	9b07      	ldr	r3, [sp, #28]
 8005b00:	409a      	lsls	r2, r3
 8005b02:	9b00      	ldr	r3, [sp, #0]
 8005b04:	4013      	ands	r3, r2
 8005b06:	9306      	str	r3, [sp, #24]

    if (iocurrent)
 8005b08:	9b06      	ldr	r3, [sp, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 808e 	beq.w	8005c2c <HAL_GPIO_DeInit+0x148>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	2bff      	cmp	r3, #255	; 0xff
 8005b14:	d801      	bhi.n	8005b1a <HAL_GPIO_DeInit+0x36>
 8005b16:	9b01      	ldr	r3, [sp, #4]
 8005b18:	e001      	b.n	8005b1e <HAL_GPIO_DeInit+0x3a>
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	9303      	str	r3, [sp, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8005b20:	9b06      	ldr	r3, [sp, #24]
 8005b22:	2bff      	cmp	r3, #255	; 0xff
 8005b24:	d802      	bhi.n	8005b2c <HAL_GPIO_DeInit+0x48>
 8005b26:	9b07      	ldr	r3, [sp, #28]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	e002      	b.n	8005b32 <HAL_GPIO_DeInit+0x4e>
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	3b08      	subs	r3, #8
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	9304      	str	r3, [sp, #16]
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	210f      	movs	r1, #15
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	401a      	ands	r2, r3
 8005b44:	2104      	movs	r1, #4
 8005b46:	9b04      	ldr	r3, [sp, #16]
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	601a      	str	r2, [r3, #0]
      
      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005b52:	9b01      	ldr	r3, [sp, #4]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	9b06      	ldr	r3, [sp, #24]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	9b01      	ldr	r3, [sp, #4]
 8005b5e:	60da      	str	r2, [r3, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = AFIO->EXTICR[position >> 2];
 8005b60:	4a39      	ldr	r2, [pc, #228]	; (8005c48 <HAL_GPIO_DeInit+0x164>)
 8005b62:	9b07      	ldr	r3, [sp, #28]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	3302      	adds	r3, #2
 8005b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6c:	9305      	str	r3, [sp, #20]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b6e:	9b07      	ldr	r3, [sp, #28]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	220f      	movs	r2, #15
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	9a05      	ldr	r2, [sp, #20]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	9305      	str	r3, [sp, #20]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8005b82:	9b01      	ldr	r3, [sp, #4]
 8005b84:	4a31      	ldr	r2, [pc, #196]	; (8005c4c <HAL_GPIO_DeInit+0x168>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_GPIO_DeInit+0xce>
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	4a30      	ldr	r2, [pc, #192]	; (8005c50 <HAL_GPIO_DeInit+0x16c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00d      	beq.n	8005bae <HAL_GPIO_DeInit+0xca>
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <HAL_GPIO_DeInit+0x170>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <HAL_GPIO_DeInit+0xc6>
 8005b9a:	9b01      	ldr	r3, [sp, #4]
 8005b9c:	4a2e      	ldr	r2, [pc, #184]	; (8005c58 <HAL_GPIO_DeInit+0x174>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_GPIO_DeInit+0xc2>
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e006      	b.n	8005bb4 <HAL_GPIO_DeInit+0xd0>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e004      	b.n	8005bb4 <HAL_GPIO_DeInit+0xd0>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e002      	b.n	8005bb4 <HAL_GPIO_DeInit+0xd0>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_GPIO_DeInit+0xd0>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9a07      	ldr	r2, [sp, #28]
 8005bb6:	f002 0203 	and.w	r2, r2, #3
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	fa03 f202 	lsl.w	r2, r3, r2
 8005bc0:	9b05      	ldr	r3, [sp, #20]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d132      	bne.n	8005c2c <HAL_GPIO_DeInit+0x148>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005bc6:	9b07      	ldr	r3, [sp, #28]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	220f      	movs	r2, #15
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	9305      	str	r3, [sp, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2], tmp);
 8005bd6:	481c      	ldr	r0, [pc, #112]	; (8005c48 <HAL_GPIO_DeInit+0x164>)
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	491a      	ldr	r1, [pc, #104]	; (8005c48 <HAL_GPIO_DeInit+0x164>)
 8005bde:	9a07      	ldr	r2, [sp, #28]
 8005be0:	0892      	lsrs	r2, r2, #2
 8005be2:	3202      	adds	r2, #2
 8005be4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005be8:	9a05      	ldr	r2, [sp, #20]
 8005bea:	43d2      	mvns	r2, r2
 8005bec:	400a      	ands	r2, r1
 8005bee:	3302      	adds	r3, #2
 8005bf0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005bf4:	4919      	ldr	r1, [pc, #100]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005bf6:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	9b06      	ldr	r3, [sp, #24]
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	4013      	ands	r3, r2
 8005c00:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005c02:	4916      	ldr	r1, [pc, #88]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005c10:	4912      	ldr	r1, [pc, #72]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005c1e:	490f      	ldr	r1, [pc, #60]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005c20:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HAL_GPIO_DeInit+0x178>)
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	9b06      	ldr	r3, [sp, #24]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	9307      	str	r3, [sp, #28]
  while ((GPIO_Pin >> position) != 0)
 8005c32:	9a00      	ldr	r2, [sp, #0]
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f47f af5e 	bne.w	8005afc <HAL_GPIO_DeInit+0x18>
  }
}
 8005c40:	bf00      	nop
 8005c42:	b008      	add	sp, #32
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	40010800 	.word	0x40010800
 8005c50:	40010c00 	.word	0x40010c00
 8005c54:	40011000 	.word	0x40011000
 8005c58:	40011400 	.word	0x40011400
 8005c5c:	40010400 	.word	0x40010400

08005c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c60:	b084      	sub	sp, #16
 8005c62:	9001      	str	r0, [sp, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	f8ad 3002 	strh.w	r3, [sp, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_ReadPin+0x20>
  {
    bitstatus = GPIO_PIN_SET;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f88d 300f 	strb.w	r3, [sp, #15]
 8005c7e:	e002      	b.n	8005c86 <HAL_GPIO_ReadPin+0x26>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f88d 300f 	strb.w	r3, [sp, #15]
  }
  return bitstatus;
 8005c86:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr

08005c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c90:	b082      	sub	sp, #8
 8005c92:	9001      	str	r0, [sp, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ca0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_GPIO_WritePin+0x22>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ca8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cb0:	e004      	b.n	8005cbc <HAL_GPIO_WritePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005cb6:	041a      	lsls	r2, r3, #16
 8005cb8:	9b01      	ldr	r3, [sp, #4]
 8005cba:	611a      	str	r2, [r3, #16]
}
 8005cbc:	bf00      	nop
 8005cbe:	b002      	add	sp, #8
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	9001      	str	r0, [sp, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	f8ad 3002 	strh.w	r3, [sp, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005cd4:	405a      	eors	r2, r3
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	60da      	str	r2, [r3, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	b002      	add	sp, #8
 8005cde:	4770      	bx	lr

08005ce0 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	9001      	str	r0, [sp, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	f8ad 3002 	strh.w	r3, [sp, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8005cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cee:	9303      	str	r3, [sp, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8005cf0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	9303      	str	r3, [sp, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005cfa:	9a03      	ldr	r2, [sp, #12]
 8005cfc:	9b01      	ldr	r3, [sp, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8005d00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005d08:	9a03      	ldr	r2, [sp, #12]
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005d0e:	9b01      	ldr	r3, [sp, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	9303      	str	r3, [sp, #12]

  if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_GPIO_LockPin+0x44>
  {
    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_GPIO_LockPin+0x46>
  }
  else
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	b004      	add	sp, #16
 8005d2a:	4770      	bx	lr

08005d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief This function handles EXTI interrupt request.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d2c:	b500      	push	{lr}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	4603      	mov	r3, r0
 8005d32:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005d36:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d44:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005d46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f807 	bl	8005d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d56:	bf00      	nop
 8005d58:	b003      	add	sp, #12
 8005d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d5e:	bf00      	nop
 8005d60:	40010400 	.word	0x40010400

08005d64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d64:	b082      	sub	sp, #8
 8005d66:	4603      	mov	r3, r0
 8005d68:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005d6c:	bf00      	nop
 8005d6e:	b002      	add	sp, #8
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_GPIOEx_ConfigEventout>:
  * @param  GPIO_PinSource Select the pin used to output the Cortex EVENTOUT signal.
  *   This parameter can be a value of @ref GPIOEx_EVENTOUT_PIN.
  * @retval None
  */  
void HAL_GPIOEx_ConfigEventout(uint32_t GPIO_PortSource, uint32_t GPIO_PinSource)
{
 8005d74:	b082      	sub	sp, #8
 8005d76:	9001      	str	r0, [sp, #4]
 8005d78:	9100      	str	r1, [sp, #0]
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));
  
  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT)|(AFIO_EVCR_PIN), (GPIO_PortSource)|(GPIO_PinSource));
 8005d7a:	4806      	ldr	r0, [pc, #24]	; (8005d94 <HAL_GPIOEx_ConfigEventout+0x20>)
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <HAL_GPIOEx_ConfigEventout+0x20>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005d84:	9901      	ldr	r1, [sp, #4]
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	6003      	str	r3, [r0, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	b002      	add	sp, #8
 8005d92:	4770      	bx	lr
 8005d94:	40010000 	.word	0x40010000

08005d98 <HAL_GPIOEx_EnableEventout>:
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8005d98:	4a03      	ldr	r2, [pc, #12]	; (8005da8 <HAL_GPIOEx_EnableEventout+0x10>)
 8005d9a:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_GPIOEx_EnableEventout+0x10>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da2:	6013      	str	r3, [r2, #0]
}
 8005da4:	bf00      	nop
 8005da6:	4770      	bx	lr
 8005da8:	40010000 	.word	0x40010000

08005dac <HAL_GPIOEx_DisableEventout>:
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8005dac:	4a03      	ldr	r2, [pc, #12]	; (8005dbc <HAL_GPIOEx_DisableEventout+0x10>)
 8005dae:	4b03      	ldr	r3, [pc, #12]	; (8005dbc <HAL_GPIOEx_DisableEventout+0x10>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db6:	6013      	str	r3, [r2, #0]
}
 8005db8:	bf00      	nop
 8005dba:	4770      	bx	lr
 8005dbc:	40010000 	.word	0x40010000

08005dc0 <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{

}
 8005dc0:	bf00      	nop
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_MspDeInit>:
  * @retval None
  */
void HAL_MspDeInit(void)
{

}
 8005dc4:	bf00      	nop
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_PPP_MspInit>:
  * @retval None
  */
void HAL_PPP_MspInit(void)
{

}
 8005dc8:	bf00      	nop
 8005dca:	4770      	bx	lr

08005dcc <HAL_PPP_MspDeInit>:
  * @retval None
  */
void HAL_PPP_MspDeInit(void)
{

}
 8005dcc:	bf00      	nop
 8005dce:	4770      	bx	lr

08005dd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd2:	b08b      	sub	sp, #44	; 0x2c
 8005dd4:	9007      	str	r0, [sp, #28]
  uint32_t index = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9309      	str	r3, [sp, #36]	; 0x24
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005dda:	9b07      	ldr	r3, [sp, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_PCD_Init+0x14>
  {
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0c8      	b.n	8005f76 <HAL_PCD_Init+0x1a6>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <HAL_PCD_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005df8:	9807      	ldr	r0, [sp, #28]
 8005dfa:	f000 f8da 	bl	8005fb2 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dfe:	9b07      	ldr	r3, [sp, #28]
 8005e00:	2203      	movs	r2, #3
 8005e02:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e06:	9b07      	ldr	r3, [sp, #28]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f003 ffc7 	bl	8009d9e <USB_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8005e10:	9b07      	ldr	r3, [sp, #28]
 8005e12:	681f      	ldr	r7, [r3, #0]
 8005e14:	9e07      	ldr	r6, [sp, #28]
 8005e16:	466d      	mov	r5, sp
 8005e18:	f106 0410 	add.w	r4, r6, #16
 8005e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	1d33      	adds	r3, r6, #4
 8005e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f003 ff97 	bl	8009d5c <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8005e2e:	9b07      	ldr	r3, [sp, #28]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f003 ffca 	bl	8009dce <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e3e:	e037      	b.n	8005eb0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8005e40:	9a07      	ldr	r2, [sp, #28]
 8005e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e44:	015b      	lsls	r3, r3, #5
 8005e46:	4413      	add	r3, r2
 8005e48:	3329      	adds	r3, #41	; 0x29
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	b2d9      	uxtb	r1, r3
 8005e52:	9a07      	ldr	r2, [sp, #28]
 8005e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e56:	015b      	lsls	r3, r3, #5
 8005e58:	4413      	add	r3, r2
 8005e5a:	3328      	adds	r3, #40	; 0x28
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	b299      	uxth	r1, r3
 8005e64:	9a07      	ldr	r2, [sp, #28]
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	015b      	lsls	r3, r3, #5
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3334      	adds	r3, #52	; 0x34
 8005e6e:	460a      	mov	r2, r1
 8005e70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8005e72:	9a07      	ldr	r2, [sp, #28]
 8005e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e76:	015b      	lsls	r3, r3, #5
 8005e78:	4413      	add	r3, r2
 8005e7a:	332b      	adds	r3, #43	; 0x2b
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0;
 8005e80:	9a07      	ldr	r2, [sp, #28]
 8005e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e84:	015b      	lsls	r3, r3, #5
 8005e86:	4413      	add	r3, r2
 8005e88:	3338      	adds	r3, #56	; 0x38
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0;
 8005e8e:	9a07      	ldr	r2, [sp, #28]
 8005e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e92:	015b      	lsls	r3, r3, #5
 8005e94:	4413      	add	r3, r2
 8005e96:	333c      	adds	r3, #60	; 0x3c
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0;
 8005e9c:	9a07      	ldr	r2, [sp, #28]
 8005e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	015b      	lsls	r3, r3, #5
 8005ea4:	4413      	add	r3, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
  for (index = 0; index < 15 ; index++)
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	3301      	adds	r3, #1
 8005eae:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb2:	2b0e      	cmp	r3, #14
 8005eb4:	d9c4      	bls.n	8005e40 <HAL_PCD_Init+0x70>
  }
  
  for (index = 0; index < 15 ; index++)
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eba:	e03c      	b.n	8005f36 <HAL_PCD_Init+0x166>
  {
    hpcd->OUT_ep[index].is_in = 0;
 8005ebc:	9a07      	ldr	r2, [sp, #28]
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	015b      	lsls	r3, r3, #5
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f203 2309 	addw	r3, r3, #521	; 0x209
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8005ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ece:	b2d9      	uxtb	r1, r3
 8005ed0:	9a07      	ldr	r2, [sp, #28]
 8005ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed4:	015b      	lsls	r3, r3, #5
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005edc:	460a      	mov	r2, r1
 8005ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8005ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee2:	b299      	uxth	r1, r3
 8005ee4:	9a07      	ldr	r2, [sp, #28]
 8005ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee8:	015b      	lsls	r3, r3, #5
 8005eea:	4413      	add	r3, r2
 8005eec:	3334      	adds	r3, #52	; 0x34
 8005eee:	460a      	mov	r2, r1
 8005ef0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8005ef2:	9a07      	ldr	r2, [sp, #28]
 8005ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef6:	015b      	lsls	r3, r3, #5
 8005ef8:	4413      	add	r3, r2
 8005efa:	f203 230b 	addw	r3, r3, #523	; 0x20b
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0;
 8005f02:	9a07      	ldr	r2, [sp, #28]
 8005f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f06:	015b      	lsls	r3, r3, #5
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0;
 8005f12:	9a07      	ldr	r2, [sp, #28]
 8005f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f16:	015b      	lsls	r3, r3, #5
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0;
 8005f22:	9a07      	ldr	r2, [sp, #28]
 8005f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f26:	3311      	adds	r3, #17
 8005f28:	015b      	lsls	r3, r3, #5
 8005f2a:	4413      	add	r3, r2
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
  for (index = 0; index < 15 ; index++)
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	3301      	adds	r3, #1
 8005f34:	9309      	str	r3, [sp, #36]	; 0x24
 8005f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f38:	2b0e      	cmp	r3, #14
 8005f3a:	d9bf      	bls.n	8005ebc <HAL_PCD_Init+0xec>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8005f3c:	9b07      	ldr	r3, [sp, #28]
 8005f3e:	681f      	ldr	r7, [r3, #0]
 8005f40:	9e07      	ldr	r6, [sp, #28]
 8005f42:	466d      	mov	r5, sp
 8005f44:	f106 0410 	add.w	r4, r6, #16
 8005f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	1d33      	adds	r3, r6, #4
 8005f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f54:	4638      	mov	r0, r7
 8005f56:	f003 ff43 	bl	8009de0 <USB_DevInit>
  
  hpcd->USB_Address = 0;
 8005f5a:	9b07      	ldr	r3, [sp, #28]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8005f62:	9b07      	ldr	r3, [sp, #28]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  
  USB_DevDisconnect (hpcd->Instance);  
 8005f6a:	9b07      	ldr	r3, [sp, #28]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 ff91 	bl	800ae96 <USB_DevDisconnect>
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	b00b      	add	sp, #44	; 0x2c
 8005f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f7c <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral 
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8005f7c:	b500      	push	{lr}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	9001      	str	r0, [sp, #4]
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005f82:	9b01      	ldr	r3, [sp, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_PCD_DeInit+0x10>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e00e      	b.n	8005faa <HAL_PCD_DeInit+0x2e>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  
  /* Stop Device */
  HAL_PCD_Stop(hpcd);
 8005f94:	9801      	ldr	r0, [sp, #4]
 8005f96:	f000 f83b 	bl	8006010 <HAL_PCD_Stop>
  
  /* DeInit the low level hardware */
  HAL_PCD_MspDeInit(hpcd);
 8005f9a:	9801      	ldr	r0, [sp, #4]
 8005f9c:	f000 f80e 	bl	8005fbc <HAL_PCD_MspDeInit>
  
  hpcd->State = HAL_PCD_STATE_RESET; 
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
  
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	b003      	add	sp, #12
 8005fae:	f85d fb04 	ldr.w	pc, [sp], #4

08005fb2 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	b002      	add	sp, #8
 8005fba:	4770      	bx	lr

08005fbc <HAL_PCD_MspDeInit>:
  * @brief  DeInitializes PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_MspDeInit could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	b002      	add	sp, #8
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fc6:	b500      	push	{lr}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hpcd);
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_PCD_Start+0x14>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e016      	b.n	8006008 <HAL_PCD_Start+0x42>
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	9801      	ldr	r0, [sp, #4]
 8005fe6:	f000 ffcb 	bl	8006f80 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8005fea:	9b01      	ldr	r3, [sp, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f004 ff4b 	bl	800ae8a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f003 feba 	bl	8009d72 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005ffe:	9b01      	ldr	r3, [sp, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	b003      	add	sp, #12
 800600c:	f85d fb04 	ldr.w	pc, [sp], #4

08006010 <HAL_PCD_Stop>:
  * @brief  Stop The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{  
 8006010:	b500      	push	{lr}
 8006012:	b083      	sub	sp, #12
 8006014:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hpcd);
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_PCD_Stop+0x14>
 8006020:	2302      	movs	r3, #2
 8006022:	e017      	b.n	8006054 <HAL_PCD_Stop+0x44>
 8006024:	9b01      	ldr	r3, [sp, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  __HAL_PCD_DISABLE(hpcd);
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f003 feb4 	bl	8009d9e <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f004 ff02 	bl	800ae44 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f004 ff26 	bl	800ae96 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 800604a:	9b01      	ldr	r3, [sp, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	b003      	add	sp, #12
 8006058:	f85d fb04 	ldr.w	pc, [sp], #4

0800605c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800605c:	b500      	push	{lr}
 800605e:	b085      	sub	sp, #20
 8006060:	9001      	str	r0, [sp, #4]
  uint32_t wInterrupt_Mask = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	9303      	str	r3, [sp, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4618      	mov	r0, r3
 800606c:	f004 ff19 	bl	800aea2 <USB_ReadInterrupts>
 8006070:	4603      	mov	r3, r0
 8006072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607a:	d102      	bne.n	8006082 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 800607c:	9801      	ldr	r0, [sp, #4]
 800607e:	f000 fbe1 	bl	8006844 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8006082:	9b01      	ldr	r3, [sp, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f004 ff0b 	bl	800aea2 <USB_ReadInterrupts>
 800608c:	4603      	mov	r3, r0
 800608e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006096:	d112      	bne.n	80060be <HAL_PCD_IRQHandler+0x62>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	9a01      	ldr	r2, [sp, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80060a4:	b292      	uxth	r2, r2
 80060a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060aa:	b292      	uxth	r2, r2
 80060ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80060b0:	9801      	ldr	r0, [sp, #4]
 80060b2:	f000 f8ed 	bl	8006290 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80060b6:	2100      	movs	r1, #0
 80060b8:	9801      	ldr	r0, [sp, #4]
 80060ba:	f000 f952 	bl	8006362 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f004 feed 	bl	800aea2 <USB_ReadInterrupts>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060d2:	d10b      	bne.n	80060ec <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	9a01      	ldr	r2, [sp, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80060e0:	b292      	uxth	r2, r2
 80060e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060e6:	b292      	uxth	r2, r2
 80060e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f004 fed6 	bl	800aea2 <USB_ReadInterrupts>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006100:	d10b      	bne.n	800611a <HAL_PCD_IRQHandler+0xbe>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	9a01      	ldr	r2, [sp, #4]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800610e:	b292      	uxth	r2, r2
 8006110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006114:	b292      	uxth	r2, r2
 8006116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f004 febf 	bl	800aea2 <USB_ReadInterrupts>
 8006124:	4603      	mov	r3, r0
 8006126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800612a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612e:	d123      	bne.n	8006178 <HAL_PCD_IRQHandler+0x11c>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8006130:	9b01      	ldr	r3, [sp, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	9a01      	ldr	r2, [sp, #4]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800613c:	b292      	uxth	r2, r2
 800613e:	f022 0204 	bic.w	r2, r2, #4
 8006142:	b292      	uxth	r2, r2
 8006144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8006148:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800614c:	9303      	str	r3, [sp, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	9a03      	ldr	r2, [sp, #12]
 8006154:	b292      	uxth	r2, r2
 8006156:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 800615a:	9801      	ldr	r0, [sp, #4]
 800615c:	f000 f8a2 	bl	80062a4 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	9a01      	ldr	r2, [sp, #4]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800616c:	b292      	uxth	r2, r2
 800616e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006172:	b292      	uxth	r2, r2
 8006174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f004 fe90 	bl	800aea2 <USB_ReadInterrupts>
 8006182:	4603      	mov	r3, r0
 8006184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618c:	d131      	bne.n	80061f2 <HAL_PCD_IRQHandler+0x196>
  {
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9a01      	ldr	r2, [sp, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800619a:	b292      	uxth	r2, r2
 800619c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061a0:	b292      	uxth	r2, r2
 80061a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9a01      	ldr	r2, [sp, #4]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80061b2:	b292      	uxth	r2, r2
 80061b4:	f042 0208 	orr.w	r2, r2, #8
 80061b8:	b292      	uxth	r2, r2
 80061ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80061be:	9b01      	ldr	r3, [sp, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	9a01      	ldr	r2, [sp, #4]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80061ca:	b292      	uxth	r2, r2
 80061cc:	f042 0204 	orr.w	r2, r2, #4
 80061d0:	b292      	uxth	r2, r2
 80061d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f004 fe61 	bl	800aea2 <USB_ReadInterrupts>
 80061e0:	4603      	mov	r3, r0
 80061e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d002      	beq.n	80061f2 <HAL_PCD_IRQHandler+0x196>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80061ec:	9801      	ldr	r0, [sp, #4]
 80061ee:	f000 f854 	bl	800629a <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f004 fe53 	bl	800aea2 <USB_ReadInterrupts>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006206:	d10e      	bne.n	8006226 <HAL_PCD_IRQHandler+0x1ca>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	9a01      	ldr	r2, [sp, #4]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006214:	b292      	uxth	r2, r2
 8006216:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800621a:	b292      	uxth	r2, r2
 800621c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006220:	9801      	ldr	r0, [sp, #4]
 8006222:	f000 f830 	bl	8006286 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8006226:	9b01      	ldr	r3, [sp, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f004 fe39 	bl	800aea2 <USB_ReadInterrupts>
 8006230:	4603      	mov	r3, r0
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d10b      	bne.n	8006254 <HAL_PCD_IRQHandler+0x1f8>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	9a01      	ldr	r2, [sp, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006248:	b292      	uxth	r2, r2
 800624a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800624e:	b292      	uxth	r2, r2
 8006250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006254:	bf00      	nop
 8006256:	b005      	add	sp, #20
 8006258:	f85d fb04 	ldr.w	pc, [sp], #4

0800625c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800625c:	b082      	sub	sp, #8
 800625e:	9001      	str	r0, [sp, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	f88d 3003 	strb.w	r3, [sp, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	b002      	add	sp, #8
 800626a:	4770      	bx	lr

0800626c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800626c:	b082      	sub	sp, #8
 800626e:	9001      	str	r0, [sp, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	f88d 3003 	strb.w	r3, [sp, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	b002      	add	sp, #8
 800627a:	4770      	bx	lr

0800627c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800627c:	b082      	sub	sp, #8
 800627e:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	b002      	add	sp, #8
 8006284:	4770      	bx	lr

08006286 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006286:	b082      	sub	sp, #8
 8006288:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	b002      	add	sp, #8
 800628e:	4770      	bx	lr

08006290 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8006290:	b082      	sub	sp, #8
 8006292:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	b002      	add	sp, #8
 8006298:	4770      	bx	lr

0800629a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800629a:	b082      	sub	sp, #8
 800629c:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	b002      	add	sp, #8
 80062a2:	4770      	bx	lr

080062a4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80062a4:	b082      	sub	sp, #8
 80062a6:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	b002      	add	sp, #8
 80062ac:	4770      	bx	lr

080062ae <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80062ae:	b082      	sub	sp, #8
 80062b0:	9001      	str	r0, [sp, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	f88d 3003 	strb.w	r3, [sp, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	b002      	add	sp, #8
 80062bc:	4770      	bx	lr

080062be <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80062be:	b082      	sub	sp, #8
 80062c0:	9001      	str	r0, [sp, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	f88d 3003 	strb.w	r3, [sp, #3]
  UNUSED(hpcd);
  UNUSED(epnum);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	b002      	add	sp, #8
 80062cc:	4770      	bx	lr

080062ce <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80062ce:	b082      	sub	sp, #8
 80062d0:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	b002      	add	sp, #8
 80062d6:	4770      	bx	lr

080062d8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callbacks
  * @param  hpcd: PCD handle
  * @retval None
  */
 __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80062d8:	b082      	sub	sp, #8
 80062da:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	b002      	add	sp, #8
 80062e0:	4770      	bx	lr

080062e2 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 80062e2:	b500      	push	{lr}
 80062e4:	b083      	sub	sp, #12
 80062e6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hpcd);
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_PCD_DevConnect+0x14>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e011      	b.n	800631a <HAL_PCD_DevConnect+0x38>
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80062fe:	2101      	movs	r1, #1
 8006300:	9801      	ldr	r0, [sp, #4]
 8006302:	f000 fe3d 	bl	8006f80 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect(hpcd->Instance);
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f004 fdbd 	bl	800ae8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	b003      	add	sp, #12
 800631e:	f85d fb04 	ldr.w	pc, [sp], #4

08006322 <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8006322:	b500      	push	{lr}
 8006324:	b083      	sub	sp, #12
 8006326:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hpcd);
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_PCD_DevDisconnect+0x14>
 8006332:	2302      	movs	r3, #2
 8006334:	e011      	b.n	800635a <HAL_PCD_DevDisconnect+0x38>
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 0);
 800633e:	2100      	movs	r1, #0
 8006340:	9801      	ldr	r0, [sp, #4]
 8006342:	f000 fe1d 	bl	8006f80 <HAL_PCDEx_SetConnectionState>
  USB_DevDisconnect(hpcd->Instance);
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f004 fda3 	bl	800ae96 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	b003      	add	sp, #12
 800635e:	f85d fb04 	ldr.w	pc, [sp], #4

08006362 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006362:	b500      	push	{lr}
 8006364:	b083      	sub	sp, #12
 8006366:	9001      	str	r0, [sp, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	f88d 3003 	strb.w	r3, [sp, #3]
  __HAL_LOCK(hpcd);
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_PCD_SetAddress+0x1a>
 8006378:	2302      	movs	r3, #2
 800637a:	e015      	b.n	80063a8 <HAL_PCD_SetAddress+0x46>
 800637c:	9b01      	ldr	r3, [sp, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  hpcd->USB_Address = address;
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800638a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f004 fd65 	bl	800ae68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	b003      	add	sp, #12
 80063ac:	f85d fb04 	ldr.w	pc, [sp], #4

080063b0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80063b0:	b500      	push	{lr}
 80063b2:	b085      	sub	sp, #20
 80063b4:	9001      	str	r0, [sp, #4]
 80063b6:	4608      	mov	r0, r1
 80063b8:	4611      	mov	r1, r2
 80063ba:	461a      	mov	r2, r3
 80063bc:	4603      	mov	r3, r0
 80063be:	f88d 3003 	strb.w	r3, [sp, #3]
 80063c2:	460b      	mov	r3, r1
 80063c4:	f8ad 3000 	strh.w	r3, [sp]
 80063c8:	4613      	mov	r3, r2
 80063ca:	f88d 3002 	strb.w	r3, [sp, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	f88d 300b 	strb.w	r3, [sp, #11]
  PCD_EPTypeDef *ep = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	9303      	str	r3, [sp, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 80063d8:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da09      	bge.n	80063f4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80063e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e8:	015b      	lsls	r3, r3, #5
 80063ea:	3328      	adds	r3, #40	; 0x28
 80063ec:	9a01      	ldr	r2, [sp, #4]
 80063ee:	4413      	add	r3, r2
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	e009      	b.n	8006408 <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80063f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fc:	015b      	lsls	r3, r3, #5
 80063fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006402:	9a01      	ldr	r2, [sp, #4]
 8006404:	4413      	add	r3, r2
 8006406:	9303      	str	r3, [sp, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8006408:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800640c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006410:	b2da      	uxtb	r2, r3
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8006416:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	09db      	lsrs	r3, r3, #7
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8006426:	f8bd 2000 	ldrh.w	r2, [sp]
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006434:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_PCD_EP_Open+0x94>
 8006440:	2302      	movs	r3, #2
 8006442:	e00f      	b.n	8006464 <HAL_PCD_EP_Open+0xb4>
 8006444:	9b01      	ldr	r3, [sp, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800644c:	9b01      	ldr	r3, [sp, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	9903      	ldr	r1, [sp, #12]
 8006452:	4618      	mov	r0, r3
 8006454:	f003 fcec 	bl	8009e30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return ret;
 8006460:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
 8006464:	4618      	mov	r0, r3
 8006466:	b005      	add	sp, #20
 8006468:	f85d fb04 	ldr.w	pc, [sp], #4

0800646c <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 800646c:	b500      	push	{lr}
 800646e:	b085      	sub	sp, #20
 8006470:	9001      	str	r0, [sp, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	f88d 3003 	strb.w	r3, [sp, #3]
  PCD_EPTypeDef *ep = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	9303      	str	r3, [sp, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 800647c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8006480:	2b00      	cmp	r3, #0
 8006482:	da09      	bge.n	8006498 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006484:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800648c:	015b      	lsls	r3, r3, #5
 800648e:	3328      	adds	r3, #40	; 0x28
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	4413      	add	r3, r2
 8006494:	9303      	str	r3, [sp, #12]
 8006496:	e009      	b.n	80064ac <HAL_PCD_EP_Close+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006498:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800649c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a0:	015b      	lsls	r3, r3, #5
 80064a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064a6:	9a01      	ldr	r2, [sp, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	9303      	str	r3, [sp, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80064ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80064ba:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	9b03      	ldr	r3, [sp, #12]
 80064c8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80064ca:	9b01      	ldr	r3, [sp, #4]
 80064cc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_PCD_EP_Close+0x6c>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e00e      	b.n	80064f6 <HAL_PCD_EP_Close+0x8a>
 80064d8:	9b01      	ldr	r3, [sp, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9903      	ldr	r1, [sp, #12]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f003 ff70 	bl	800a3cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	b005      	add	sp, #20
 80064fa:	f85d fb04 	ldr.w	pc, [sp], #4

080064fe <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064fe:	b500      	push	{lr}
 8006500:	b087      	sub	sp, #28
 8006502:	9003      	str	r0, [sp, #12]
 8006504:	9201      	str	r2, [sp, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	460b      	mov	r3, r1
 800650a:	f88d 300b 	strb.w	r3, [sp, #11]
  PCD_EPTypeDef *ep = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	9305      	str	r3, [sp, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006512:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800651a:	015b      	lsls	r3, r3, #5
 800651c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006520:	9a03      	ldr	r2, [sp, #12]
 8006522:	4413      	add	r3, r2
 8006524:	9305      	str	r3, [sp, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8006526:	9b05      	ldr	r3, [sp, #20]
 8006528:	9a01      	ldr	r2, [sp, #4]
 800652a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800652c:	9b05      	ldr	r3, [sp, #20]
 800652e:	9a00      	ldr	r2, [sp, #0]
 8006530:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0;
 8006532:	9b05      	ldr	r3, [sp, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	61da      	str	r2, [r3, #28]
  ep->is_in = 0;
 8006538:	9b05      	ldr	r3, [sp, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800653e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006546:	b2da      	uxtb	r2, r3
 8006548:	9b05      	ldr	r3, [sp, #20]
 800654a:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_PCD_EP_Receive+0x5c>
 8006556:	2302      	movs	r3, #2
 8006558:	e01b      	b.n	8006592 <HAL_PCD_EP_Receive+0x94>
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
 8006562:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_PCD_EP_Receive+0x7e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9905      	ldr	r1, [sp, #20]
 8006574:	4618      	mov	r0, r3
 8006576:	f004 f8af 	bl	800a6d8 <USB_EPStartXfer>
 800657a:	e005      	b.n	8006588 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9905      	ldr	r1, [sp, #20]
 8006582:	4618      	mov	r0, r3
 8006584:	f004 f8a8 	bl	800a6d8 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8006588:	9b03      	ldr	r3, [sp, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	b007      	add	sp, #28
 8006596:	f85d fb04 	ldr.w	pc, [sp], #4

0800659a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800659a:	b082      	sub	sp, #8
 800659c:	9001      	str	r0, [sp, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	f88d 3003 	strb.w	r3, [sp, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80065a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80065a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ac:	9a01      	ldr	r2, [sp, #4]
 80065ae:	3311      	adds	r3, #17
 80065b0:	015b      	lsls	r3, r3, #5
 80065b2:	4413      	add	r3, r2
 80065b4:	3304      	adds	r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	b002      	add	sp, #8
 80065be:	4770      	bx	lr

080065c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065c0:	b500      	push	{lr}
 80065c2:	b087      	sub	sp, #28
 80065c4:	9003      	str	r0, [sp, #12]
 80065c6:	9201      	str	r2, [sp, #4]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	460b      	mov	r3, r1
 80065cc:	f88d 300b 	strb.w	r3, [sp, #11]
  PCD_EPTypeDef *ep = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	9305      	str	r3, [sp, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80065d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80065d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065dc:	015b      	lsls	r3, r3, #5
 80065de:	3328      	adds	r3, #40	; 0x28
 80065e0:	9a03      	ldr	r2, [sp, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	9305      	str	r3, [sp, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80065e6:	9b05      	ldr	r3, [sp, #20]
 80065e8:	9a01      	ldr	r2, [sp, #4]
 80065ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80065ec:	9b05      	ldr	r3, [sp, #20]
 80065ee:	9a00      	ldr	r2, [sp, #0]
 80065f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0;
 80065f2:	9b05      	ldr	r3, [sp, #20]
 80065f4:	2200      	movs	r2, #0
 80065f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1;
 80065f8:	9b05      	ldr	r3, [sp, #20]
 80065fa:	2201      	movs	r2, #1
 80065fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80065fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006606:	b2da      	uxtb	r2, r3
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_PCD_EP_Transmit+0x5a>
 8006616:	2302      	movs	r3, #2
 8006618:	e01b      	b.n	8006652 <HAL_PCD_EP_Transmit+0x92>
 800661a:	9b03      	ldr	r3, [sp, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  if ((ep_addr & 0x7F) == 0 )
 8006622:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_PCD_EP_Transmit+0x7c>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	9905      	ldr	r1, [sp, #20]
 8006634:	4618      	mov	r0, r3
 8006636:	f004 f84f 	bl	800a6d8 <USB_EPStartXfer>
 800663a:	e005      	b.n	8006648 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	9905      	ldr	r1, [sp, #20]
 8006642:	4618      	mov	r0, r3
 8006644:	f004 f848 	bl	800a6d8 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 8006648:	9b03      	ldr	r3, [sp, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	b007      	add	sp, #28
 8006656:	f85d fb04 	ldr.w	pc, [sp], #4

0800665a <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800665a:	b500      	push	{lr}
 800665c:	b085      	sub	sp, #20
 800665e:	9001      	str	r0, [sp, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	f88d 3003 	strb.w	r3, [sp, #3]
  PCD_EPTypeDef *ep = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	9303      	str	r3, [sp, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 800666a:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 800666e:	2b00      	cmp	r3, #0
 8006670:	da09      	bge.n	8006686 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006672:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667a:	015b      	lsls	r3, r3, #5
 800667c:	3328      	adds	r3, #40	; 0x28
 800667e:	9a01      	ldr	r2, [sp, #4]
 8006680:	4413      	add	r3, r2
 8006682:	9303      	str	r3, [sp, #12]
 8006684:	e007      	b.n	8006696 <HAL_PCD_EP_SetStall+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006686:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800668a:	015b      	lsls	r3, r3, #5
 800668c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006690:	9a01      	ldr	r2, [sp, #4]
 8006692:	4413      	add	r3, r2
 8006694:	9303      	str	r3, [sp, #12]
  }
  
  ep->is_stall = 1;
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800669c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80066a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80066aa:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d101      	bne.n	80066c8 <HAL_PCD_EP_SetStall+0x6e>
 80066c4:	2302      	movs	r3, #2
 80066c6:	e01d      	b.n	8006704 <HAL_PCD_EP_SetStall+0xaa>
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	9903      	ldr	r1, [sp, #12]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 face 	bl	800ac78 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80066dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80066e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d108      	bne.n	80066fa <HAL_PCD_EP_SetStall+0xa0>
  {
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f004 fc05 	bl	800af04 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	b005      	add	sp, #20
 8006708:	f85d fb04 	ldr.w	pc, [sp], #4

0800670c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800670c:	b500      	push	{lr}
 800670e:	b085      	sub	sp, #20
 8006710:	9001      	str	r0, [sp, #4]
 8006712:	460b      	mov	r3, r1
 8006714:	f88d 3003 	strb.w	r3, [sp, #3]
  PCD_EPTypeDef *ep = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	9303      	str	r3, [sp, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 800671c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	da09      	bge.n	8006738 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006724:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672c:	015b      	lsls	r3, r3, #5
 800672e:	3328      	adds	r3, #40	; 0x28
 8006730:	9a01      	ldr	r2, [sp, #4]
 8006732:	4413      	add	r3, r2
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	e007      	b.n	8006748 <HAL_PCD_EP_ClrStall+0x3c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006738:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800673c:	015b      	lsls	r3, r3, #5
 800673e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006742:	9a01      	ldr	r2, [sp, #4]
 8006744:	4413      	add	r3, r2
 8006746:	9303      	str	r3, [sp, #12]
  }
  
  ep->is_stall = 0;
 8006748:	9b03      	ldr	r3, [sp, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800674e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006756:	b2da      	uxtb	r2, r3
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800675c:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_PCD_EP_ClrStall+0x6e>
 8006776:	2302      	movs	r3, #2
 8006778:	e00e      	b.n	8006798 <HAL_PCD_EP_ClrStall+0x8c>
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8006782:	9b01      	ldr	r3, [sp, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	9903      	ldr	r1, [sp, #12]
 8006788:	4618      	mov	r0, r3
 800678a:	f004 fad3 	bl	800ad34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	b005      	add	sp, #20
 800679c:	f85d fb04 	ldr.w	pc, [sp], #4

080067a0 <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067a0:	b500      	push	{lr}
 80067a2:	b083      	sub	sp, #12
 80067a4:	9001      	str	r0, [sp, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	f88d 3003 	strb.w	r3, [sp, #3]
  __HAL_LOCK(hpcd);
 80067ac:	9b01      	ldr	r3, [sp, #4]
 80067ae:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_PCD_EP_Flush+0x1a>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e01c      	b.n	80067f4 <HAL_PCD_EP_Flush+0x54>
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  if ((ep_addr & 0x80) == 0x80)
 80067c2:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0a      	bge.n	80067e0 <HAL_PCD_EP_Flush+0x40>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 80067ca:	9b01      	ldr	r3, [sp, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80067d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f003 fb1c 	bl	8009e16 <USB_FlushTxFifo>
 80067de:	e004      	b.n	80067ea <HAL_PCD_EP_Flush+0x4a>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f003 fb1d 	bl	8009e24 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 80067ea:	9b01      	ldr	r3, [sp, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
  
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	b003      	add	sp, #12
 80067f8:	f85d fb04 	ldr.w	pc, [sp], #4

080067fc <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  HAL_PCD_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80067fc:	b500      	push	{lr}
 80067fe:	b083      	sub	sp, #12
 8006800:	9001      	str	r0, [sp, #4]
  return(USB_ActivateRemoteWakeup(hpcd->Instance));
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f004 fb83 	bl	800af12 <USB_ActivateRemoteWakeup>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	b003      	add	sp, #12
 8006812:	f85d fb04 	ldr.w	pc, [sp], #4

08006816 <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  HAL_PCD_DeActivateRemoteWakeup : de-active remote wakeup signalling
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8006816:	b500      	push	{lr}
 8006818:	b083      	sub	sp, #12
 800681a:	9001      	str	r0, [sp, #4]
  return(USB_DeActivateRemoteWakeup(hpcd->Instance));
 800681c:	9b01      	ldr	r3, [sp, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f004 fb86 	bl	800af32 <USB_DeActivateRemoteWakeup>
 8006826:	4603      	mov	r3, r0
}
 8006828:	4618      	mov	r0, r3
 800682a:	b003      	add	sp, #12
 800682c:	f85d fb04 	ldr.w	pc, [sp], #4

08006830 <HAL_PCD_GetState>:
  * @brief  Return the PCD state
  * @param  hpcd: PCD handle
  * @retval HAL state
  */
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
{
 8006830:	b082      	sub	sp, #8
 8006832:	9001      	str	r0, [sp, #4]
  return hpcd->State;
 8006834:	9b01      	ldr	r3, [sp, #4]
 8006836:	f893 33e9 	ldrb.w	r3, [r3, #1001]	; 0x3e9
 800683a:	b2db      	uxtb	r3, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	b002      	add	sp, #8
 8006840:	4770      	bx	lr
	...

08006844 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006844:	b510      	push	{r4, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	9001      	str	r0, [sp, #4]
  PCD_EPTypeDef *ep = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	9306      	str	r3, [sp, #24]
  uint16_t count = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	f8ad 301e 	strh.w	r3, [sp, #30]
  uint8_t epindex = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	f88d 3017 	strb.w	r3, [sp, #23]
  __IO uint16_t wIstr = 0;  
 800685a:	2300      	movs	r3, #0
 800685c:	f8ad 300e 	strh.w	r3, [sp, #14]
  __IO uint16_t wEPVal = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	f8ad 300c 	strh.w	r3, [sp, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8006866:	e338      	b.n	8006eda <PCD_EP_ISR_Handler+0x696>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006868:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800686c:	b29b      	uxth	r3, r3
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	f88d 3017 	strb.w	r3, [sp, #23]
    
    if (epindex == 0)
 8006878:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 813a 	bne.w	8006af6 <PCD_EP_ISR_Handler+0x2b2>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8006882:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006886:	b29b      	uxth	r3, r3
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	d14e      	bne.n	800692e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006890:	9b01      	ldr	r3, [sp, #4]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29b      	uxth	r3, r3
 800689c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80068a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80068a8:	9b01      	ldr	r3, [sp, #4]
 80068aa:	3328      	adds	r3, #40	; 0x28
 80068ac:	9306      	str	r3, [sp, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	9b06      	ldr	r3, [sp, #24]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	3302      	adds	r3, #2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	461a      	mov	r2, r3
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80068de:	9b06      	ldr	r3, [sp, #24]
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	9b06      	ldr	r3, [sp, #24]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	441a      	add	r2, r3
 80068e8:	9b06      	ldr	r3, [sp, #24]
 80068ea:	615a      	str	r2, [r3, #20]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 80068ec:	2100      	movs	r1, #0
 80068ee:	9801      	ldr	r0, [sp, #4]
 80068f0:	f7ff fcbc 	bl	800626c <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 82ec 	beq.w	8006eda <PCD_EP_ISR_Handler+0x696>
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 82e7 	bne.w	8006eda <PCD_EP_ISR_Handler+0x696>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	9a01      	ldr	r2, [sp, #4]
 8006912:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	b292      	uxth	r2, r2
 8006920:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8006924:	9b01      	ldr	r3, [sp, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800692c:	e2d5      	b.n	8006eda <PCD_EP_ISR_Handler+0x696>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800692e:	9b01      	ldr	r3, [sp, #4]
 8006930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006934:	9306      	str	r3, [sp, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f8ad 300c 	strh.w	r3, [sp, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8006942:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800694c:	2b00      	cmp	r3, #0
 800694e:	d032      	beq.n	80069b6 <PCD_EP_ISR_Handler+0x172>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006950:	9b01      	ldr	r3, [sp, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006958:	b29b      	uxth	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	9b06      	ldr	r3, [sp, #24]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	4413      	add	r3, r2
 8006964:	3306      	adds	r3, #6
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	461a      	mov	r2, r3
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800697c:	9b06      	ldr	r3, [sp, #24]
 800697e:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8006980:	9b01      	ldr	r3, [sp, #4]
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	f503 717b 	add.w	r1, r3, #1004	; 0x3ec
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	889a      	ldrh	r2, [r3, #4]
 800698e:	9b06      	ldr	r3, [sp, #24]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f004 fb23 	bl	800afde <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b299      	uxth	r1, r3
 80069a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069a8:	400b      	ands	r3, r1
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80069ae:	9801      	ldr	r0, [sp, #4]
 80069b0:	f7ff fc64 	bl	800627c <HAL_PCD_SetupStageCallback>
 80069b4:	e291      	b.n	8006eda <PCD_EP_ISR_Handler+0x696>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80069b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	b21b      	sxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f280 828b 	bge.w	8006eda <PCD_EP_ISR_Handler+0x696>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	9b01      	ldr	r3, [sp, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b299      	uxth	r1, r3
 80069d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069d4:	400b      	ands	r3, r1
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069da:	9b01      	ldr	r3, [sp, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	9b06      	ldr	r3, [sp, #24]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4413      	add	r3, r2
 80069ee:	3306      	adds	r3, #6
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	461a      	mov	r2, r3
 80069f4:	9b01      	ldr	r3, [sp, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	61da      	str	r2, [r3, #28]
          
          if (ep->xfer_count != 0)
 8006a0a:	9b06      	ldr	r3, [sp, #24]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	6959      	ldr	r1, [r3, #20]
 8006a1a:	9b06      	ldr	r3, [sp, #24]
 8006a1c:	889a      	ldrh	r2, [r3, #4]
 8006a1e:	9b06      	ldr	r3, [sp, #24]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f004 fadb 	bl	800afde <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8006a28:	9b06      	ldr	r3, [sp, #24]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	441a      	add	r2, r3
 8006a32:	9b06      	ldr	r3, [sp, #24]
 8006a34:	615a      	str	r2, [r3, #20]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8006a36:	2100      	movs	r1, #0
 8006a38:	9801      	ldr	r0, [sp, #4]
 8006a3a:	f7ff fc0f 	bl	800625c <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3306      	adds	r3, #6
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9b06      	ldr	r3, [sp, #24]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d91c      	bls.n	8006a9c <PCD_EP_ISR_Handler+0x258>
 8006a62:	9b06      	ldr	r3, [sp, #24]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006a6c:	9b06      	ldr	r3, [sp, #24]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <PCD_EP_ISR_Handler+0x23e>
 8006a78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006a82:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e016      	b.n	8006aca <PCD_EP_ISR_Handler+0x286>
 8006a9c:	9b06      	ldr	r3, [sp, #24]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <PCD_EP_ISR_Handler+0x278>
 8006ab2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006abc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ada:	b29c      	uxth	r4, r3
 8006adc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ae0:	b29c      	uxth	r4, r3
 8006ae2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ae6:	b29c      	uxth	r4, r3
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	4ba5      	ldr	r3, [pc, #660]	; (8006d84 <PCD_EP_ISR_Handler+0x540>)
 8006aee:	4323      	orrs	r3, r4
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
 8006af4:	e1f1      	b.n	8006eda <PCD_EP_ISR_Handler+0x696>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f8ad 300c 	strh.w	r3, [sp, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8006b0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	b21b      	sxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f280 80e2 	bge.w	8006cde <PCD_EP_ISR_Handler+0x49a>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006b1a:	9b01      	ldr	r3, [sp, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b299      	uxth	r1, r3
 8006b3a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b3e:	400b      	ands	r3, r1
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006b44:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006b48:	015b      	lsls	r3, r3, #5
 8006b4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b4e:	9a01      	ldr	r2, [sp, #4]
 8006b50:	4413      	add	r3, r2
 8006b52:	9306      	str	r3, [sp, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	7a9b      	ldrb	r3, [r3, #10]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d126      	bne.n	8006baa <PCD_EP_ISR_Handler+0x366>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	9b06      	ldr	r3, [sp, #24]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	3306      	adds	r3, #6
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	461a      	mov	r2, r3
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b88:	f8ad 301e 	strh.w	r3, [sp, #30]
          if (count != 0)
 8006b8c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d07c      	beq.n	8006c8e <PCD_EP_ISR_Handler+0x44a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	9b06      	ldr	r3, [sp, #24]
 8006b9a:	6959      	ldr	r1, [r3, #20]
 8006b9c:	9b06      	ldr	r3, [sp, #24]
 8006b9e:	889a      	ldrh	r2, [r3, #4]
 8006ba0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006ba4:	f004 fa1b 	bl	800afde <USB_ReadPMA>
 8006ba8:	e071      	b.n	8006c8e <PCD_EP_ISR_Handler+0x44a>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	9b06      	ldr	r3, [sp, #24]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d026      	beq.n	8006c12 <PCD_EP_ISR_Handler+0x3ce>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	9b06      	ldr	r3, [sp, #24]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3302      	adds	r3, #2
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	461a      	mov	r2, r3
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf0:	f8ad 301e 	strh.w	r3, [sp, #30]
            if (count != 0)
 8006bf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d030      	beq.n	8006c5e <PCD_EP_ISR_Handler+0x41a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	9b06      	ldr	r3, [sp, #24]
 8006c02:	6959      	ldr	r1, [r3, #20]
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	88da      	ldrh	r2, [r3, #6]
 8006c08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006c0c:	f004 f9e7 	bl	800afde <USB_ReadPMA>
 8006c10:	e025      	b.n	8006c5e <PCD_EP_ISR_Handler+0x41a>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	9b06      	ldr	r3, [sp, #24]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4413      	add	r3, r2
 8006c26:	3306      	adds	r3, #6
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3e:	f8ad 301e 	strh.w	r3, [sp, #30]
            if (count != 0)
 8006c42:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <PCD_EP_ISR_Handler+0x41a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	9b06      	ldr	r3, [sp, #24]
 8006c50:	6959      	ldr	r1, [r3, #20]
 8006c52:	9b06      	ldr	r3, [sp, #24]
 8006c54:	891a      	ldrh	r2, [r3, #8]
 8006c56:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006c5a:	f004 f9c0 	bl	800afde <USB_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8006c5e:	9b01      	ldr	r3, [sp, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b299      	uxth	r1, r3
 8006c7e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006c82:	400b      	ands	r3, r1
 8006c84:	b299      	uxth	r1, r3
 8006c86:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <PCD_EP_ISR_Handler+0x544>)
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8006c8e:	9b06      	ldr	r3, [sp, #24]
 8006c90:	69da      	ldr	r2, [r3, #28]
 8006c92:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006c96:	441a      	add	r2, r3
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=count;
 8006c9c:	9b06      	ldr	r3, [sp, #24]
 8006c9e:	695a      	ldr	r2, [r3, #20]
 8006ca0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	9b06      	ldr	r3, [sp, #24]
 8006ca8:	615a      	str	r2, [r3, #20]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <PCD_EP_ISR_Handler+0x47a>
 8006cb2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d206      	bcs.n	8006ccc <PCD_EP_ISR_Handler+0x488>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006cbe:	9b06      	ldr	r3, [sp, #24]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	9801      	ldr	r0, [sp, #4]
 8006cc6:	f7ff fac9 	bl	800625c <HAL_PCD_DataOutStageCallback>
 8006cca:	e008      	b.n	8006cde <PCD_EP_ISR_Handler+0x49a>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8006ccc:	9b06      	ldr	r3, [sp, #24]
 8006cce:	7819      	ldrb	r1, [r3, #0]
 8006cd0:	9b06      	ldr	r3, [sp, #24]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	9801      	ldr	r0, [sp, #4]
 8006cda:	f7ff fc10 	bl	80064fe <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8006cde:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80f6 	beq.w	8006eda <PCD_EP_ISR_Handler+0x696>
      {
        ep = &hpcd->IN_ep[epindex];
 8006cee:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006cf2:	015b      	lsls	r3, r3, #5
 8006cf4:	3328      	adds	r3, #40	; 0x28
 8006cf6:	9a01      	ldr	r2, [sp, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	9306      	str	r3, [sp, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	440b      	add	r3, r1
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8006d28:	9b06      	ldr	r3, [sp, #24]
 8006d2a:	7a9b      	ldrb	r3, [r3, #10]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d12d      	bne.n	8006d8c <PCD_EP_ISR_Handler+0x548>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	9b06      	ldr	r3, [sp, #24]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4413      	add	r3, r2
 8006d44:	3302      	adds	r3, #2
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	461a      	mov	r2, r3
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d5c:	9b06      	ldr	r3, [sp, #24]
 8006d5e:	61da      	str	r2, [r3, #28]
          if (ep->xfer_count != 0)
 8006d60:	9b06      	ldr	r3, [sp, #24]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8085 	beq.w	8006e74 <PCD_EP_ISR_Handler+0x630>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8006d6a:	9b01      	ldr	r3, [sp, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	9b06      	ldr	r3, [sp, #24]
 8006d70:	6959      	ldr	r1, [r3, #20]
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	889a      	ldrh	r2, [r3, #4]
 8006d76:	9b06      	ldr	r3, [sp, #24]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f004 f8e9 	bl	800af52 <USB_WritePMA>
 8006d80:	e078      	b.n	8006e74 <PCD_EP_ISR_Handler+0x630>
 8006d82:	bf00      	nop
 8006d84:	ffff8080 	.word	0xffff8080
 8006d88:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	9b06      	ldr	r3, [sp, #24]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d027      	beq.n	8006df6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	9b06      	ldr	r3, [sp, #24]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	3302      	adds	r3, #2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006dd2:	9b06      	ldr	r3, [sp, #24]
 8006dd4:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0)
 8006dd6:	9b06      	ldr	r3, [sp, #24]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d032      	beq.n	8006e44 <PCD_EP_ISR_Handler+0x600>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8006dde:	9b01      	ldr	r3, [sp, #4]
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	6959      	ldr	r1, [r3, #20]
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	88da      	ldrh	r2, [r3, #6]
 8006dea:	9b06      	ldr	r3, [sp, #24]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f004 f8af 	bl	800af52 <USB_WritePMA>
 8006df4:	e026      	b.n	8006e44 <PCD_EP_ISR_Handler+0x600>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	3306      	adds	r3, #6
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	461a      	mov	r2, r3
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e22:	9b06      	ldr	r3, [sp, #24]
 8006e24:	61da      	str	r2, [r3, #28]
            if (ep->xfer_count != 0)
 8006e26:	9b06      	ldr	r3, [sp, #24]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <PCD_EP_ISR_Handler+0x600>
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	9b06      	ldr	r3, [sp, #24]
 8006e34:	6959      	ldr	r1, [r3, #20]
 8006e36:	9b06      	ldr	r3, [sp, #24]
 8006e38:	891a      	ldrh	r2, [r3, #8]
 8006e3a:	9b06      	ldr	r3, [sp, #24]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f004 f887 	bl	800af52 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	441a      	add	r2, r3
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4619      	mov	r1, r3
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b299      	uxth	r1, r3
 8006e64:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006e68:	400b      	ands	r3, r1
 8006e6a:	b299      	uxth	r1, r3
 8006e6c:	4b23      	ldr	r3, [pc, #140]	; (8006efc <PCD_EP_ISR_Handler+0x6b8>)
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	9b06      	ldr	r3, [sp, #24]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4413      	add	r3, r2
 8006e88:	3302      	adds	r3, #2
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ea0:	9b06      	ldr	r3, [sp, #24]
 8006ea2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff+=ep->xfer_count;
 8006ea4:	9b06      	ldr	r3, [sp, #24]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	9b06      	ldr	r3, [sp, #24]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	441a      	add	r2, r3
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	615a      	str	r2, [r3, #20]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <PCD_EP_ISR_Handler+0x684>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006eba:	9b06      	ldr	r3, [sp, #24]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	9801      	ldr	r0, [sp, #4]
 8006ec2:	f7ff f9d3 	bl	800626c <HAL_PCD_DataInStageCallback>
 8006ec6:	e008      	b.n	8006eda <PCD_EP_ISR_Handler+0x696>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8006ec8:	9b06      	ldr	r3, [sp, #24]
 8006eca:	7819      	ldrb	r1, [r3, #0]
 8006ecc:	9b06      	ldr	r3, [sp, #24]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	9b06      	ldr	r3, [sp, #24]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	9801      	ldr	r0, [sp, #4]
 8006ed6:	f7ff fb73 	bl	80065c0 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f8ad 200e 	strh.w	r2, [sp, #14]
 8006eea:	b21b      	sxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f6ff acbb 	blt.w	8006868 <PCD_EP_ISR_Handler+0x24>
        }
      } 
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	b008      	add	sp, #32
 8006ef8:	bd10      	pop	{r4, pc}
 8006efa:	bf00      	nop
 8006efc:	ffffc080 	.word	0xffffc080

08006f00 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)

{
 8006f00:	b086      	sub	sp, #24
 8006f02:	9003      	str	r0, [sp, #12]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	f8ad 300a 	strh.w	r3, [sp, #10]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	f8ad 3008 	strh.w	r3, [sp, #8]
  PCD_EPTypeDef *ep = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	9305      	str	r3, [sp, #20]
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8006f16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d009      	beq.n	8006f38 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006f24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	3328      	adds	r3, #40	; 0x28
 8006f30:	9a03      	ldr	r2, [sp, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	9305      	str	r3, [sp, #20]
 8006f36:	e007      	b.n	8006f48 <HAL_PCDEx_PMAConfig+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006f3c:	015b      	lsls	r3, r3, #5
 8006f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f42:	9a03      	ldr	r2, [sp, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	9305      	str	r3, [sp, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006f48:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d107      	bne.n	8006f60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8006f50:	9b05      	ldr	r3, [sp, #20]
 8006f52:	2200      	movs	r2, #0
 8006f54:	729a      	strb	r2, [r3, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	9b05      	ldr	r3, [sp, #20]
 8006f5c:	809a      	strh	r2, [r3, #4]
 8006f5e:	e00b      	b.n	8006f78 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8006f60:	9b05      	ldr	r3, [sp, #20]
 8006f62:	2201      	movs	r2, #1
 8006f64:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	9b05      	ldr	r3, [sp, #20]
 8006f76:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	b006      	add	sp, #24
 8006f7e:	4770      	bx	lr

08006f80 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8006f80:	b082      	sub	sp, #8
 8006f82:	9001      	str	r0, [sp, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	f88d 3003 	strb.w	r3, [sp, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */ 
}
 8006f8a:	bf00      	nop
 8006f8c:	b002      	add	sp, #8
 8006f8e:	4770      	bx	lr

08006f90 <PWR_OverloadWfe>:

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
  __asm volatile( "wfe" );
 8006f90:	bf20      	wfe
  __asm volatile( "nop" );
 8006f92:	bf00      	nop
}
 8006f94:	bf00      	nop
 8006f96:	4770      	bx	lr

08006f98 <HAL_PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 8006f98:	4a06      	ldr	r2, [pc, #24]	; (8006fb4 <HAL_PWR_DeInit+0x1c>)
 8006f9a:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <HAL_PWR_DeInit+0x1c>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa2:	6113      	str	r3, [r2, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 8006fa4:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <HAL_PWR_DeInit+0x1c>)
 8006fa6:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <HAL_PWR_DeInit+0x1c>)
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fae:	6113      	str	r3, [r2, #16]
}
 8006fb0:	bf00      	nop
 8006fb2:	4770      	bx	lr
 8006fb4:	40021000 	.word	0x40021000

08006fb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006fb8:	b082      	sub	sp, #8
 8006fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fbe:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	fa93 f3a3 	rbit	r3, r3
 8006fc6:	9300      	str	r3, [sp, #0]
  return(result);
 8006fc8:	9b00      	ldr	r3, [sp, #0]
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006fca:	fab3 f383 	clz	r3, r3
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8006fd4:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2301      	movs	r3, #1
 8006fdc:	6013      	str	r3, [r2, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	b002      	add	sp, #8
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fea:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	fa93 f3a3 	rbit	r3, r3
 8006ff2:	9300      	str	r3, [sp, #0]
  return(result);
 8006ff4:	9b00      	ldr	r3, [sp, #0]
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006ff6:	fab3 f383 	clz	r3, r3
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007000:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8007004:	461a      	mov	r2, r3
 8007006:	2300      	movs	r3, #0
 8007008:	6013      	str	r3, [r2, #0]
}
 800700a:	bf00      	nop
 800700c:	b002      	add	sp, #8
 800700e:	4770      	bx	lr

08007010 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8007010:	b082      	sub	sp, #8
 8007012:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8007014:	4929      	ldr	r1, [pc, #164]	; (80070bc <HAL_PWR_ConfigPVD+0xac>)
 8007016:	4b29      	ldr	r3, [pc, #164]	; (80070bc <HAL_PWR_ConfigPVD+0xac>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4313      	orrs	r3, r2
 8007024:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8007026:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007028:	4b25      	ldr	r3, [pc, #148]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007030:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8007032:	4a23      	ldr	r2, [pc, #140]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007034:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800703e:	4a20      	ldr	r2, [pc, #128]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007040:	4b1f      	ldr	r3, [pc, #124]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007048:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800704a:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 800704c:	4b1c      	ldr	r3, [pc, #112]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007054:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <HAL_PWR_ConfigPVD+0x5e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8007062:	4a17      	ldr	r2, [pc, #92]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007064:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706c:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800707a:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 800707c:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007084:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_PWR_ConfigPVD+0x8e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8007092:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800709e:	9b01      	ldr	r3, [sp, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_PWR_ConfigPVD+0xa6>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80070aa:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <HAL_PWR_ConfigPVD+0xb0>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b4:	60d3      	str	r3, [r2, #12]
  }
}
 80070b6:	bf00      	nop
 80070b8:	b002      	add	sp, #8
 80070ba:	4770      	bx	lr
 80070bc:	40007000 	.word	0x40007000
 80070c0:	40010400 	.word	0x40010400

080070c4 <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80070c4:	b082      	sub	sp, #8
 80070c6:	2310      	movs	r3, #16
 80070c8:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ca:	9b01      	ldr	r3, [sp, #4]
 80070cc:	fa93 f3a3 	rbit	r3, r3
 80070d0:	9300      	str	r3, [sp, #0]
  return(result);
 80070d2:	9b00      	ldr	r3, [sp, #0]
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80070d4:	fab3 f383 	clz	r3, r3
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80070de:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80070e2:	461a      	mov	r2, r3
 80070e4:	2301      	movs	r3, #1
 80070e6:	6013      	str	r3, [r2, #0]
}
 80070e8:	bf00      	nop
 80070ea:	b002      	add	sp, #8
 80070ec:	4770      	bx	lr

080070ee <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80070ee:	b082      	sub	sp, #8
 80070f0:	2310      	movs	r3, #16
 80070f2:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	fa93 f3a3 	rbit	r3, r3
 80070fa:	9300      	str	r3, [sp, #0]
  return(result);
 80070fc:	9b00      	ldr	r3, [sp, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80070fe:	fab3 f383 	clz	r3, r3
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007108:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800710c:	461a      	mov	r2, r3
 800710e:	2300      	movs	r3, #0
 8007110:	6013      	str	r3, [r2, #0]
}
 8007112:	bf00      	nop
 8007114:	b002      	add	sp, #8
 8007116:	4770      	bx	lr

08007118 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8007118:	b084      	sub	sp, #16
 800711a:	9001      	str	r0, [sp, #4]
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	9303      	str	r3, [sp, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	fa93 f3a3 	rbit	r3, r3
 8007126:	9302      	str	r3, [sp, #8]
  return(result);
 8007128:	9b02      	ldr	r3, [sp, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800712a:	fab3 f383 	clz	r3, r3
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	461a      	mov	r2, r3
 8007132:	4b04      	ldr	r3, [pc, #16]	; (8007144 <HAL_PWR_EnableWakeUpPin+0x2c>)
 8007134:	4413      	add	r3, r2
 8007136:	461a      	mov	r2, r3
 8007138:	2301      	movs	r3, #1
 800713a:	6013      	str	r3, [r2, #0]
}
 800713c:	bf00      	nop
 800713e:	b004      	add	sp, #16
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	420e0080 	.word	0x420e0080

08007148 <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8007148:	b084      	sub	sp, #16
 800714a:	9001      	str	r0, [sp, #4]
 800714c:	9b01      	ldr	r3, [sp, #4]
 800714e:	9303      	str	r3, [sp, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	fa93 f3a3 	rbit	r3, r3
 8007156:	9302      	str	r3, [sp, #8]
  return(result);
 8007158:	9b02      	ldr	r3, [sp, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 800715a:	fab3 f383 	clz	r3, r3
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	461a      	mov	r2, r3
 8007162:	4b04      	ldr	r3, [pc, #16]	; (8007174 <HAL_PWR_DisableWakeUpPin+0x2c>)
 8007164:	4413      	add	r3, r2
 8007166:	461a      	mov	r2, r3
 8007168:	2300      	movs	r3, #0
 800716a:	6013      	str	r3, [r2, #0]
}
 800716c:	bf00      	nop
 800716e:	b004      	add	sp, #16
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	420e0080 	.word	0x420e0080

08007178 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007178:	b082      	sub	sp, #8
 800717a:	9001      	str	r0, [sp, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  /* No check on Regulator because parameter not used in SLEEP mode */
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007182:	4a09      	ldr	r2, [pc, #36]	; (80071a8 <HAL_PWR_EnterSLEEPMode+0x30>)
 8007184:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <HAL_PWR_EnterSLEEPMode+0x30>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f023 0304 	bic.w	r3, r3, #4
 800718c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800718e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_PWR_EnterSLEEPMode+0x22>
  __ASM volatile ("wfi");
 8007196:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007198:	e002      	b.n	80071a0 <HAL_PWR_EnterSLEEPMode+0x28>
  __ASM volatile ("sev");
 800719a:	bf40      	sev
  __ASM volatile ("wfe");
 800719c:	bf20      	wfe
 800719e:	bf20      	wfe
 80071a0:	bf00      	nop
 80071a2:	b002      	add	sp, #8
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	e000ed00 	.word	0xe000ed00

080071ac <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80071ac:	b500      	push	{lr}
 80071ae:	b083      	sub	sp, #12
 80071b0:	9001      	str	r0, [sp, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	f88d 3003 	strb.w	r3, [sp, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80071b8:	4a14      	ldr	r2, [pc, #80]	; (800720c <HAL_PWR_EnterSTOPMode+0x60>)
 80071ba:	4b14      	ldr	r3, [pc, #80]	; (800720c <HAL_PWR_EnterSTOPMode+0x60>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 0302 	bic.w	r3, r3, #2
 80071c2:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80071c4:	4911      	ldr	r1, [pc, #68]	; (800720c <HAL_PWR_EnterSTOPMode+0x60>)
 80071c6:	4b11      	ldr	r3, [pc, #68]	; (800720c <HAL_PWR_EnterSTOPMode+0x60>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80071d4:	4a0e      	ldr	r2, [pc, #56]	; (8007210 <HAL_PWR_EnterSTOPMode+0x64>)
 80071d6:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <HAL_PWR_EnterSTOPMode+0x64>)
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f043 0304 	orr.w	r3, r3, #4
 80071de:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80071e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_PWR_EnterSTOPMode+0x40>
  __ASM volatile ("wfi");
 80071e8:	bf30      	wfi
 80071ea:	e004      	b.n	80071f6 <HAL_PWR_EnterSTOPMode+0x4a>
  __ASM volatile ("sev");
 80071ec:	bf40      	sev
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
    PWR_OverloadWfe(); /* WFE redefine locally */
 80071ee:	f7ff fecf 	bl	8006f90 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80071f2:	f7ff fecd 	bl	8006f90 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80071f6:	4a06      	ldr	r2, [pc, #24]	; (8007210 <HAL_PWR_EnterSTOPMode+0x64>)
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <HAL_PWR_EnterSTOPMode+0x64>)
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f023 0304 	bic.w	r3, r3, #4
 8007200:	6113      	str	r3, [r2, #16]
}
 8007202:	bf00      	nop
 8007204:	b003      	add	sp, #12
 8007206:	f85d fb04 	ldr.w	pc, [sp], #4
 800720a:	bf00      	nop
 800720c:	40007000 	.word	0x40007000
 8007210:	e000ed00 	.word	0xe000ed00

08007214 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8007214:	4a07      	ldr	r2, [pc, #28]	; (8007234 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8007216:	4b07      	ldr	r3, [pc, #28]	; (8007234 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f043 0302 	orr.w	r3, r3, #2
 800721e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007220:	4a05      	ldr	r2, [pc, #20]	; (8007238 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8007222:	4b05      	ldr	r3, [pc, #20]	; (8007238 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f043 0304 	orr.w	r3, r3, #4
 800722a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 800722c:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800722e:	bf00      	nop
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40007000 	.word	0x40007000
 8007238:	e000ed00 	.word	0xe000ed00

0800723c <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800723c:	4a03      	ldr	r2, [pc, #12]	; (800724c <HAL_PWR_EnableSleepOnExit+0x10>)
 800723e:	4b03      	ldr	r3, [pc, #12]	; (800724c <HAL_PWR_EnableSleepOnExit+0x10>)
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f043 0302 	orr.w	r3, r3, #2
 8007246:	6113      	str	r3, [r2, #16]
}
 8007248:	bf00      	nop
 800724a:	4770      	bx	lr
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007250:	4a03      	ldr	r2, [pc, #12]	; (8007260 <HAL_PWR_DisableSleepOnExit+0x10>)
 8007252:	4b03      	ldr	r3, [pc, #12]	; (8007260 <HAL_PWR_DisableSleepOnExit+0x10>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f023 0302 	bic.w	r3, r3, #2
 800725a:	6113      	str	r3, [r2, #16]
}
 800725c:	bf00      	nop
 800725e:	4770      	bx	lr
 8007260:	e000ed00 	.word	0xe000ed00

08007264 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007264:	4a03      	ldr	r2, [pc, #12]	; (8007274 <HAL_PWR_EnableSEVOnPend+0x10>)
 8007266:	4b03      	ldr	r3, [pc, #12]	; (8007274 <HAL_PWR_EnableSEVOnPend+0x10>)
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f043 0310 	orr.w	r3, r3, #16
 800726e:	6113      	str	r3, [r2, #16]
}
 8007270:	bf00      	nop
 8007272:	4770      	bx	lr
 8007274:	e000ed00 	.word	0xe000ed00

08007278 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8007278:	4a03      	ldr	r2, [pc, #12]	; (8007288 <HAL_PWR_DisableSEVOnPend+0x10>)
 800727a:	4b03      	ldr	r3, [pc, #12]	; (8007288 <HAL_PWR_DisableSEVOnPend+0x10>)
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f023 0310 	bic.w	r3, r3, #16
 8007282:	6113      	str	r3, [r2, #16]
}
 8007284:	bf00      	nop
 8007286:	4770      	bx	lr
 8007288:	e000ed00 	.word	0xe000ed00

0800728c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800728c:	b508      	push	{r3, lr}
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <HAL_PWR_PVD_IRQHandler+0x20>)
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_PWR_PVD_IRQHandler+0x1a>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800729a:	f000 f809 	bl	80072b0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800729e:	4b03      	ldr	r3, [pc, #12]	; (80072ac <HAL_PWR_PVD_IRQHandler+0x20>)
 80072a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80072a4:	615a      	str	r2, [r3, #20]
  }
}
 80072a6:	bf00      	nop
 80072a8:	bd08      	pop	{r3, pc}
 80072aa:	bf00      	nop
 80072ac:	40010400 	.word	0x40010400

080072b0 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80072b0:	bf00      	nop
 80072b2:	4770      	bx	lr

080072b4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 80072b4:	b082      	sub	sp, #8
  /* Switch SYSCLK to HSI */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072b6:	4a19      	ldr	r2, [pc, #100]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072b8:	4b18      	ldr	r3, [pc, #96]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f023 0303 	bic.w	r3, r3, #3
 80072c0:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON, & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 80072c2:	4a16      	ldr	r2, [pc, #88]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072c4:	4b15      	ldr	r3, [pc, #84]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80072cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d0:	6013      	str	r3, [r2, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072d4:	4b11      	ldr	r3, [pc, #68]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072dc:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80072de:	4b0f      	ldr	r3, [pc, #60]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	605a      	str	r2, [r3, #4]
  
  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, ((uint32_t)0x10 << POSITION_VAL(RCC_CR_HSITRIM)));
 80072e4:	490d      	ldr	r1, [pc, #52]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <HAL_RCC_DeInit+0x68>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ee:	23f8      	movs	r3, #248	; 0xf8
 80072f0:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f2:	9b01      	ldr	r3, [sp, #4]
 80072f4:	fa93 f3a3 	rbit	r3, r3
 80072f8:	9300      	str	r3, [sp, #0]
  return(result);
 80072fa:	9b00      	ldr	r3, [sp, #0]
 80072fc:	fab3 f383 	clz	r3, r3
 8007300:	2010      	movs	r0, #16
 8007302:	fa00 f303 	lsl.w	r3, r0, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);

#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800730a:	4b04      	ldr	r3, [pc, #16]	; (800731c <HAL_RCC_DeInit+0x68>)
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <HAL_RCC_DeInit+0x6c>)
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <HAL_RCC_DeInit+0x70>)
 8007314:	601a      	str	r2, [r3, #0]
}
 8007316:	bf00      	nop
 8007318:	b002      	add	sp, #8
 800731a:	4770      	bx	lr
 800731c:	40021000 	.word	0x40021000
 8007320:	20000000 	.word	0x20000000
 8007324:	007a1200 	.word	0x007a1200

08007328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007328:	b500      	push	{lr}
 800732a:	b0e5      	sub	sp, #404	; 0x194
 800732c:	ab01      	add	r3, sp, #4
 800732e:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	9363      	str	r3, [sp, #396]	; 0x18c
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007334:	ab01      	add	r3, sp, #4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 811b 	beq.w	800757a <HAL_RCC_OscConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007344:	4ba4      	ldr	r3, [pc, #656]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 030c 	and.w	r3, r3, #12
 800734c:	2b04      	cmp	r3, #4
 800734e:	d00c      	beq.n	800736a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007350:	4ba1      	ldr	r3, [pc, #644]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 030c 	and.w	r3, r3, #12
 8007358:	2b08      	cmp	r3, #8
 800735a:	d144      	bne.n	80073e6 <HAL_RCC_OscConfig+0xbe>
 800735c:	4b9e      	ldr	r3, [pc, #632]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007368:	d13d      	bne.n	80073e6 <HAL_RCC_OscConfig+0xbe>
 800736a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800736e:	9362      	str	r3, [sp, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007370:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8007372:	fa93 f3a3 	rbit	r3, r3
 8007376:	9361      	str	r3, [sp, #388]	; 0x184
  return(result);
 8007378:	9b61      	ldr	r3, [sp, #388]	; 0x184
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800737a:	fab3 f383 	clz	r3, r3
 800737e:	b2db      	uxtb	r3, r3
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f043 0301 	orr.w	r3, r3, #1
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d102      	bne.n	8007394 <HAL_RCC_OscConfig+0x6c>
 800738e:	4b92      	ldr	r3, [pc, #584]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x7e>
 8007394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007398:	9360      	str	r3, [sp, #384]	; 0x180
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739a:	9b60      	ldr	r3, [sp, #384]	; 0x180
 800739c:	fa93 f3a3 	rbit	r3, r3
 80073a0:	935f      	str	r3, [sp, #380]	; 0x17c
 80073a2:	4b8d      	ldr	r3, [pc, #564]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80073aa:	925e      	str	r2, [sp, #376]	; 0x178
 80073ac:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 80073ae:	fa92 f2a2 	rbit	r2, r2
 80073b2:	925d      	str	r2, [sp, #372]	; 0x174
  return(result);
 80073b4:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 80073b6:	fab2 f282 	clz	r2, r2
 80073ba:	b252      	sxtb	r2, r2
 80073bc:	f042 0220 	orr.w	r2, r2, #32
 80073c0:	b252      	sxtb	r2, r2
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	f002 021f 	and.w	r2, r2, #31
 80073c8:	40d3      	lsrs	r3, r2
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80d2 	beq.w	8007578 <HAL_RCC_OscConfig+0x250>
 80073d4:	ab01      	add	r3, sp, #4
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f040 80cc 	bne.w	8007578 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f000 bcea 	b.w	8007dba <HAL_RCC_OscConfig+0xa92>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073e6:	ab01      	add	r3, sp, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f0:	d106      	bne.n	8007400 <HAL_RCC_OscConfig+0xd8>
 80073f2:	4a79      	ldr	r2, [pc, #484]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80073f4:	4b78      	ldr	r3, [pc, #480]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e030      	b.n	8007462 <HAL_RCC_OscConfig+0x13a>
 8007400:	ab01      	add	r3, sp, #4
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <HAL_RCC_OscConfig+0xfc>
 800740a:	4a73      	ldr	r2, [pc, #460]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800740c:	4b72      	ldr	r3, [pc, #456]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	4a70      	ldr	r2, [pc, #448]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007418:	4b6f      	ldr	r3, [pc, #444]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e01e      	b.n	8007462 <HAL_RCC_OscConfig+0x13a>
 8007424:	ab01      	add	r3, sp, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800742e:	d10c      	bne.n	800744a <HAL_RCC_OscConfig+0x122>
 8007430:	4a69      	ldr	r2, [pc, #420]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007432:	4b69      	ldr	r3, [pc, #420]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	4a66      	ldr	r2, [pc, #408]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800743e:	4b66      	ldr	r3, [pc, #408]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e00b      	b.n	8007462 <HAL_RCC_OscConfig+0x13a>
 800744a:	4a63      	ldr	r2, [pc, #396]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800744c:	4b62      	ldr	r3, [pc, #392]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	4a60      	ldr	r2, [pc, #384]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007458:	4b5f      	ldr	r3, [pc, #380]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007460:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007462:	ab01      	add	r3, sp, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d042      	beq.n	80074f2 <HAL_RCC_OscConfig+0x1ca>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800746c:	f7fc fa06 	bl	800387c <HAL_GetTick>
 8007470:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007472:	e009      	b.n	8007488 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007474:	f7fc fa02 	bl	800387c <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b64      	cmp	r3, #100	; 0x64
 8007480:	d902      	bls.n	8007488 <HAL_RCC_OscConfig+0x160>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	f000 bc99 	b.w	8007dba <HAL_RCC_OscConfig+0xa92>
 8007488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800748c:	935c      	str	r3, [sp, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748e:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8007490:	fa93 f3a3 	rbit	r3, r3
 8007494:	935b      	str	r3, [sp, #364]	; 0x16c
  return(result);
 8007496:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007498:	fab3 f383 	clz	r3, r3
 800749c:	b2db      	uxtb	r3, r3
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f043 0301 	orr.w	r3, r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d102      	bne.n	80074b2 <HAL_RCC_OscConfig+0x18a>
 80074ac:	4b4a      	ldr	r3, [pc, #296]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x19c>
 80074b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074b6:	935a      	str	r3, [sp, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 80074ba:	fa93 f3a3 	rbit	r3, r3
 80074be:	9359      	str	r3, [sp, #356]	; 0x164
 80074c0:	4b45      	ldr	r3, [pc, #276]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074c8:	9258      	str	r2, [sp, #352]	; 0x160
 80074ca:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80074cc:	fa92 f2a2 	rbit	r2, r2
 80074d0:	9257      	str	r2, [sp, #348]	; 0x15c
  return(result);
 80074d2:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 80074d4:	fab2 f282 	clz	r2, r2
 80074d8:	b252      	sxtb	r2, r2
 80074da:	f042 0220 	orr.w	r2, r2, #32
 80074de:	b252      	sxtb	r2, r2
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	f002 021f 	and.w	r2, r2, #31
 80074e6:	40d3      	lsrs	r3, r2
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0c1      	beq.n	8007474 <HAL_RCC_OscConfig+0x14c>
 80074f0:	e043      	b.n	800757a <HAL_RCC_OscConfig+0x252>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f2:	f7fc f9c3 	bl	800387c <HAL_GetTick>
 80074f6:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074f8:	e009      	b.n	800750e <HAL_RCC_OscConfig+0x1e6>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074fa:	f7fc f9bf 	bl	800387c <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b64      	cmp	r3, #100	; 0x64
 8007506:	d902      	bls.n	800750e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	f000 bc56 	b.w	8007dba <HAL_RCC_OscConfig+0xa92>
 800750e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007512:	9356      	str	r3, [sp, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007514:	9b56      	ldr	r3, [sp, #344]	; 0x158
 8007516:	fa93 f3a3 	rbit	r3, r3
 800751a:	9355      	str	r3, [sp, #340]	; 0x154
  return(result);
 800751c:	9b55      	ldr	r3, [sp, #340]	; 0x154
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800751e:	fab3 f383 	clz	r3, r3
 8007522:	b2db      	uxtb	r3, r3
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b01      	cmp	r3, #1
 8007530:	d102      	bne.n	8007538 <HAL_RCC_OscConfig+0x210>
 8007532:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x222>
 8007538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800753c:	9354      	str	r3, [sp, #336]	; 0x150
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8007540:	fa93 f3a3 	rbit	r3, r3
 8007544:	9353      	str	r3, [sp, #332]	; 0x14c
 8007546:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800754e:	9252      	str	r2, [sp, #328]	; 0x148
 8007550:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8007552:	fa92 f2a2 	rbit	r2, r2
 8007556:	9251      	str	r2, [sp, #324]	; 0x144
  return(result);
 8007558:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800755a:	fab2 f282 	clz	r2, r2
 800755e:	b252      	sxtb	r2, r2
 8007560:	f042 0220 	orr.w	r2, r2, #32
 8007564:	b252      	sxtb	r2, r2
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	f002 021f 	and.w	r2, r2, #31
 800756c:	40d3      	lsrs	r3, r2
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1c1      	bne.n	80074fa <HAL_RCC_OscConfig+0x1d2>
 8007576:	e000      	b.n	800757a <HAL_RCC_OscConfig+0x252>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800757a:	ab01      	add	r3, sp, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 811c 	beq.w	80077c2 <HAL_RCC_OscConfig+0x49a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800758a:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 030c 	and.w	r3, r3, #12
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_RCC_OscConfig+0x286>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f003 030c 	and.w	r3, r3, #12
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d156      	bne.n	8007650 <HAL_RCC_OscConfig+0x328>
 80075a2:	4b0d      	ldr	r3, [pc, #52]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d150      	bne.n	8007650 <HAL_RCC_OscConfig+0x328>
 80075ae:	2302      	movs	r3, #2
 80075b0:	9350      	str	r3, [sp, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b2:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80075b4:	fa93 f3a3 	rbit	r3, r3
 80075b8:	934f      	str	r3, [sp, #316]	; 0x13c
  return(result);
 80075ba:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075bc:	fab3 f383 	clz	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d105      	bne.n	80075dc <HAL_RCC_OscConfig+0x2b4>
 80075d0:	4b01      	ldr	r3, [pc, #4]	; (80075d8 <HAL_RCC_OscConfig+0x2b0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	e00a      	b.n	80075ec <HAL_RCC_OscConfig+0x2c4>
 80075d6:	bf00      	nop
 80075d8:	40021000 	.word	0x40021000
 80075dc:	2302      	movs	r3, #2
 80075de:	934e      	str	r3, [sp, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80075e2:	fa93 f3a3 	rbit	r3, r3
 80075e6:	934d      	str	r3, [sp, #308]	; 0x134
 80075e8:	4bad      	ldr	r3, [pc, #692]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2202      	movs	r2, #2
 80075ee:	924c      	str	r2, [sp, #304]	; 0x130
 80075f0:	9a4c      	ldr	r2, [sp, #304]	; 0x130
 80075f2:	fa92 f2a2 	rbit	r2, r2
 80075f6:	924b      	str	r2, [sp, #300]	; 0x12c
  return(result);
 80075f8:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 80075fa:	fab2 f282 	clz	r2, r2
 80075fe:	b252      	sxtb	r2, r2
 8007600:	f042 0220 	orr.w	r2, r2, #32
 8007604:	b252      	sxtb	r2, r2
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	f002 021f 	and.w	r2, r2, #31
 800760c:	40d3      	lsrs	r3, r2
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <HAL_RCC_OscConfig+0x2fc>
 8007616:	ab01      	add	r3, sp, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d001      	beq.n	8007624 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e3ca      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007624:	489e      	ldr	r0, [pc, #632]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 8007626:	4b9e      	ldr	r3, [pc, #632]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800762e:	ab01      	add	r3, sp, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6959      	ldr	r1, [r3, #20]
 8007634:	23f8      	movs	r3, #248	; 0xf8
 8007636:	934a      	str	r3, [sp, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007638:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800763a:	fa93 f3a3 	rbit	r3, r3
 800763e:	9349      	str	r3, [sp, #292]	; 0x124
  return(result);
 8007640:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8007642:	fab3 f383 	clz	r3, r3
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800764e:	e0b8      	b.n	80077c2 <HAL_RCC_OscConfig+0x49a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007650:	ab01      	add	r3, sp, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d064      	beq.n	8007724 <HAL_RCC_OscConfig+0x3fc>
 800765a:	2301      	movs	r3, #1
 800765c:	9348      	str	r3, [sp, #288]	; 0x120
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765e:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8007660:	fa93 f3a3 	rbit	r3, r3
 8007664:	9347      	str	r3, [sp, #284]	; 0x11c
  return(result);
 8007666:	9b47      	ldr	r3, [sp, #284]	; 0x11c
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007668:	fab3 f383 	clz	r3, r3
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007672:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8007676:	461a      	mov	r2, r3
 8007678:	2301      	movs	r3, #1
 800767a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800767c:	f7fc f8fe 	bl	800387c <HAL_GetTick>
 8007680:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x36e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007684:	f7fc f8fa 	bl	800387c <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x36e>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e391      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007696:	2302      	movs	r3, #2
 8007698:	9346      	str	r3, [sp, #280]	; 0x118
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800769c:	fa93 f3a3 	rbit	r3, r3
 80076a0:	9345      	str	r3, [sp, #276]	; 0x114
  return(result);
 80076a2:	9b45      	ldr	r3, [sp, #276]	; 0x114
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a4:	fab3 f383 	clz	r3, r3
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d102      	bne.n	80076be <HAL_RCC_OscConfig+0x396>
 80076b8:	4b79      	ldr	r3, [pc, #484]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	e007      	b.n	80076ce <HAL_RCC_OscConfig+0x3a6>
 80076be:	2302      	movs	r3, #2
 80076c0:	9344      	str	r3, [sp, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c2:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80076c4:	fa93 f3a3 	rbit	r3, r3
 80076c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80076ca:	4b75      	ldr	r3, [pc, #468]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	2202      	movs	r2, #2
 80076d0:	9242      	str	r2, [sp, #264]	; 0x108
 80076d2:	9a42      	ldr	r2, [sp, #264]	; 0x108
 80076d4:	fa92 f2a2 	rbit	r2, r2
 80076d8:	9241      	str	r2, [sp, #260]	; 0x104
  return(result);
 80076da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80076dc:	fab2 f282 	clz	r2, r2
 80076e0:	b252      	sxtb	r2, r2
 80076e2:	f042 0220 	orr.w	r2, r2, #32
 80076e6:	b252      	sxtb	r2, r2
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	f002 021f 	and.w	r2, r2, #31
 80076ee:	40d3      	lsrs	r3, r2
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0c5      	beq.n	8007684 <HAL_RCC_OscConfig+0x35c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f8:	4869      	ldr	r0, [pc, #420]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 80076fa:	4b69      	ldr	r3, [pc, #420]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007702:	ab01      	add	r3, sp, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6959      	ldr	r1, [r3, #20]
 8007708:	23f8      	movs	r3, #248	; 0xf8
 800770a:	9340      	str	r3, [sp, #256]	; 0x100
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800770c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800770e:	fa93 f3a3 	rbit	r3, r3
 8007712:	933f      	str	r3, [sp, #252]	; 0xfc
  return(result);
 8007714:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8007716:	fab3 f383 	clz	r3, r3
 800771a:	fa01 f303 	lsl.w	r3, r1, r3
 800771e:	4313      	orrs	r3, r2
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	e04e      	b.n	80077c2 <HAL_RCC_OscConfig+0x49a>
 8007724:	2301      	movs	r3, #1
 8007726:	933e      	str	r3, [sp, #248]	; 0xf8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007728:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800772a:	fa93 f3a3 	rbit	r3, r3
 800772e:	933d      	str	r3, [sp, #244]	; 0xf4
  return(result);
 8007730:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007732:	fab3 f383 	clz	r3, r3
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800773c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8007740:	461a      	mov	r2, r3
 8007742:	2300      	movs	r3, #0
 8007744:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007746:	f7fc f899 	bl	800387c <HAL_GetTick>
 800774a:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800774e:	f7fc f895 	bl	800387c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x438>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e32c      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007760:	2302      	movs	r3, #2
 8007762:	933c      	str	r3, [sp, #240]	; 0xf0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007764:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8007766:	fa93 f3a3 	rbit	r3, r3
 800776a:	933b      	str	r3, [sp, #236]	; 0xec
  return(result);
 800776c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800776e:	fab3 f383 	clz	r3, r3
 8007772:	b2db      	uxtb	r3, r3
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	b2db      	uxtb	r3, r3
 8007778:	f043 0301 	orr.w	r3, r3, #1
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b01      	cmp	r3, #1
 8007780:	d102      	bne.n	8007788 <HAL_RCC_OscConfig+0x460>
 8007782:	4b47      	ldr	r3, [pc, #284]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	e007      	b.n	8007798 <HAL_RCC_OscConfig+0x470>
 8007788:	2302      	movs	r3, #2
 800778a:	933a      	str	r3, [sp, #232]	; 0xe8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800778c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800778e:	fa93 f3a3 	rbit	r3, r3
 8007792:	9339      	str	r3, [sp, #228]	; 0xe4
 8007794:	4b42      	ldr	r3, [pc, #264]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2202      	movs	r2, #2
 800779a:	9238      	str	r2, [sp, #224]	; 0xe0
 800779c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800779e:	fa92 f2a2 	rbit	r2, r2
 80077a2:	9237      	str	r2, [sp, #220]	; 0xdc
  return(result);
 80077a4:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80077a6:	fab2 f282 	clz	r2, r2
 80077aa:	b252      	sxtb	r2, r2
 80077ac:	f042 0220 	orr.w	r2, r2, #32
 80077b0:	b252      	sxtb	r2, r2
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	f002 021f 	and.w	r2, r2, #31
 80077b8:	40d3      	lsrs	r3, r2
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1c5      	bne.n	800774e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077c2:	ab01      	add	r3, sp, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 808f 	beq.w	80078f0 <HAL_RCC_OscConfig+0x5c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077d2:	ab01      	add	r3, sp, #4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d044      	beq.n	8007866 <HAL_RCC_OscConfig+0x53e>
 80077dc:	2301      	movs	r3, #1
 80077de:	9336      	str	r3, [sp, #216]	; 0xd8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80077e2:	fa93 f3a3 	rbit	r3, r3
 80077e6:	9335      	str	r3, [sp, #212]	; 0xd4
  return(result);
 80077e8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077ea:	fab3 f383 	clz	r3, r3
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	461a      	mov	r2, r3
 80077f2:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <HAL_RCC_OscConfig+0x57c>)
 80077f4:	4413      	add	r3, r2
 80077f6:	461a      	mov	r2, r3
 80077f8:	2301      	movs	r3, #1
 80077fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077fc:	f7fc f83e 	bl	800387c <HAL_GetTick>
 8007800:	9063      	str	r0, [sp, #396]	; 0x18c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x4ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007804:	f7fc f83a 	bl	800387c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x4ee>
        {
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e2d1      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007816:	2302      	movs	r3, #2
 8007818:	9334      	str	r3, [sp, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800781c:	fa93 f3a3 	rbit	r3, r3
 8007820:	9333      	str	r3, [sp, #204]	; 0xcc
 8007822:	2302      	movs	r3, #2
 8007824:	9332      	str	r3, [sp, #200]	; 0xc8
 8007826:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8007828:	fa93 f3a3 	rbit	r3, r3
 800782c:	9331      	str	r3, [sp, #196]	; 0xc4
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <HAL_RCC_OscConfig+0x578>)
 8007830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007832:	2302      	movs	r3, #2
 8007834:	9330      	str	r3, [sp, #192]	; 0xc0
 8007836:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8007838:	fa93 f3a3 	rbit	r3, r3
 800783c:	932f      	str	r3, [sp, #188]	; 0xbc
  return(result);
 800783e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8007840:	fab3 f383 	clz	r3, r3
 8007844:	b25b      	sxtb	r3, r3
 8007846:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800784a:	b25b      	sxtb	r3, r3
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	fa22 f303 	lsr.w	r3, r2, r3
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0d2      	beq.n	8007804 <HAL_RCC_OscConfig+0x4dc>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 800785e:	2001      	movs	r0, #1
 8007860:	f7fc f812 	bl	8003888 <HAL_Delay>
 8007864:	e044      	b.n	80078f0 <HAL_RCC_OscConfig+0x5c8>
 8007866:	2301      	movs	r3, #1
 8007868:	932e      	str	r3, [sp, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800786c:	fa93 f3a3 	rbit	r3, r3
 8007870:	932d      	str	r3, [sp, #180]	; 0xb4
  return(result);
 8007872:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007874:	fab3 f383 	clz	r3, r3
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	461a      	mov	r2, r3
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <HAL_RCC_OscConfig+0x57c>)
 800787e:	4413      	add	r3, r2
 8007880:	461a      	mov	r2, r3
 8007882:	2300      	movs	r3, #0
 8007884:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007886:	f7fb fff9 	bl	800387c <HAL_GetTick>
 800788a:	9063      	str	r0, [sp, #396]	; 0x18c
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800788c:	e00c      	b.n	80078a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800788e:	f7fb fff5 	bl	800387c <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d905      	bls.n	80078a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e28c      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 80078a0:	40021000 	.word	0x40021000
 80078a4:	42420480 	.word	0x42420480
 80078a8:	2302      	movs	r3, #2
 80078aa:	932c      	str	r3, [sp, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80078ae:	fa93 f3a3 	rbit	r3, r3
 80078b2:	932b      	str	r3, [sp, #172]	; 0xac
 80078b4:	2302      	movs	r3, #2
 80078b6:	932a      	str	r3, [sp, #168]	; 0xa8
 80078b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80078ba:	fa93 f3a3 	rbit	r3, r3
 80078be:	9329      	str	r3, [sp, #164]	; 0xa4
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c0:	4ba4      	ldr	r3, [pc, #656]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80078c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c4:	2302      	movs	r3, #2
 80078c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80078c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80078ca:	fa93 f3a3 	rbit	r3, r3
 80078ce:	9327      	str	r3, [sp, #156]	; 0x9c
  return(result);
 80078d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80078d2:	fab3 f383 	clz	r3, r3
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078dc:	b25b      	sxtb	r3, r3
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 031f 	and.w	r3, r3, #31
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ce      	bne.n	800788e <HAL_RCC_OscConfig+0x566>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078f0:	ab01      	add	r3, sp, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80fc 	beq.w	8007af8 <HAL_RCC_OscConfig+0x7d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007900:	4a94      	ldr	r2, [pc, #592]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007902:	4b94      	ldr	r3, [pc, #592]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790a:	61d3      	str	r3, [r2, #28]
 800790c:	4b91      	ldr	r3, [pc, #580]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007914:	ab02      	add	r3, sp, #8
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	ab02      	add	r3, sp, #8
 800791a:	681b      	ldr	r3, [r3, #0]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800791c:	4a8e      	ldr	r2, [pc, #568]	; (8007b58 <HAL_RCC_OscConfig+0x830>)
 800791e:	4b8e      	ldr	r3, [pc, #568]	; (8007b58 <HAL_RCC_OscConfig+0x830>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007926:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007928:	f7fb ffa8 	bl	800387c <HAL_GetTick>
 800792c:	9063      	str	r0, [sp, #396]	; 0x18c

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x61a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007930:	f7fb ffa4 	bl	800387c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b64      	cmp	r3, #100	; 0x64
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e23b      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007942:	4b85      	ldr	r3, [pc, #532]	; (8007b58 <HAL_RCC_OscConfig+0x830>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x608>
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800794e:	ab01      	add	r3, sp, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d106      	bne.n	8007966 <HAL_RCC_OscConfig+0x63e>
 8007958:	4a7e      	ldr	r2, [pc, #504]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 800795a:	4b7e      	ldr	r3, [pc, #504]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	6213      	str	r3, [r2, #32]
 8007964:	e02f      	b.n	80079c6 <HAL_RCC_OscConfig+0x69e>
 8007966:	ab01      	add	r3, sp, #4
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10c      	bne.n	800798a <HAL_RCC_OscConfig+0x662>
 8007970:	4a78      	ldr	r2, [pc, #480]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007972:	4b78      	ldr	r3, [pc, #480]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	6213      	str	r3, [r2, #32]
 800797c:	4a75      	ldr	r2, [pc, #468]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 800797e:	4b75      	ldr	r3, [pc, #468]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f023 0304 	bic.w	r3, r3, #4
 8007986:	6213      	str	r3, [r2, #32]
 8007988:	e01d      	b.n	80079c6 <HAL_RCC_OscConfig+0x69e>
 800798a:	ab01      	add	r3, sp, #4
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b05      	cmp	r3, #5
 8007992:	d10c      	bne.n	80079ae <HAL_RCC_OscConfig+0x686>
 8007994:	4a6f      	ldr	r2, [pc, #444]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007996:	4b6f      	ldr	r3, [pc, #444]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f043 0304 	orr.w	r3, r3, #4
 800799e:	6213      	str	r3, [r2, #32]
 80079a0:	4a6c      	ldr	r2, [pc, #432]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80079a2:	4b6c      	ldr	r3, [pc, #432]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	6213      	str	r3, [r2, #32]
 80079ac:	e00b      	b.n	80079c6 <HAL_RCC_OscConfig+0x69e>
 80079ae:	4a69      	ldr	r2, [pc, #420]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80079b0:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	6213      	str	r3, [r2, #32]
 80079ba:	4a66      	ldr	r2, [pc, #408]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80079bc:	4b65      	ldr	r3, [pc, #404]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f023 0304 	bic.w	r3, r3, #4
 80079c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079c6:	ab01      	add	r3, sp, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d048      	beq.n	8007a62 <HAL_RCC_OscConfig+0x73a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079d0:	f7fb ff54 	bl	800387c <HAL_GetTick>
 80079d4:	9063      	str	r0, [sp, #396]	; 0x18c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d6:	e00a      	b.n	80079ee <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079d8:	f7fb ff50 	bl	800387c <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e1e5      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 80079ee:	2302      	movs	r3, #2
 80079f0:	9326      	str	r3, [sp, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079f4:	fa93 f3a3 	rbit	r3, r3
 80079f8:	9325      	str	r3, [sp, #148]	; 0x94
 80079fa:	ab24      	add	r3, sp, #144	; 0x90
 80079fc:	2202      	movs	r2, #2
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	ab24      	add	r3, sp, #144	; 0x90
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	fa93 f2a3 	rbit	r2, r3
 8007a08:	ab23      	add	r3, sp, #140	; 0x8c
 8007a0a:	601a      	str	r2, [r3, #0]
  return(result);
 8007a0c:	ab23      	add	r3, sp, #140	; 0x8c
 8007a0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a10:	fab3 f383 	clz	r3, r3
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	f043 0302 	orr.w	r3, r3, #2
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d102      	bne.n	8007a2a <HAL_RCC_OscConfig+0x702>
 8007a24:	4b4b      	ldr	r3, [pc, #300]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	e001      	b.n	8007a2e <HAL_RCC_OscConfig+0x706>
 8007a2a:	4b4a      	ldr	r3, [pc, #296]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	aa22      	add	r2, sp, #136	; 0x88
 8007a30:	2102      	movs	r1, #2
 8007a32:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a34:	aa22      	add	r2, sp, #136	; 0x88
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	fa92 f1a2 	rbit	r1, r2
 8007a3c:	aa21      	add	r2, sp, #132	; 0x84
 8007a3e:	6011      	str	r1, [r2, #0]
  return(result);
 8007a40:	aa21      	add	r2, sp, #132	; 0x84
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	fab2 f282 	clz	r2, r2
 8007a48:	b252      	sxtb	r2, r2
 8007a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a4e:	b252      	sxtb	r2, r2
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	f002 021f 	and.w	r2, r2, #31
 8007a56:	40d3      	lsrs	r3, r2
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0bb      	beq.n	80079d8 <HAL_RCC_OscConfig+0x6b0>
 8007a60:	e04a      	b.n	8007af8 <HAL_RCC_OscConfig+0x7d0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a62:	f7fb ff0b 	bl	800387c <HAL_GetTick>
 8007a66:	9063      	str	r0, [sp, #396]	; 0x18c
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a68:	e00a      	b.n	8007a80 <HAL_RCC_OscConfig+0x758>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a6a:	f7fb ff07 	bl	800387c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x758>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e19c      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007a80:	ab20      	add	r3, sp, #128	; 0x80
 8007a82:	2202      	movs	r2, #2
 8007a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a86:	ab20      	add	r3, sp, #128	; 0x80
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	fa93 f2a3 	rbit	r2, r3
 8007a8e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	ab1e      	add	r3, sp, #120	; 0x78
 8007a94:	2202      	movs	r2, #2
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	ab1e      	add	r3, sp, #120	; 0x78
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	fa93 f2a3 	rbit	r2, r3
 8007aa0:	ab1d      	add	r3, sp, #116	; 0x74
 8007aa2:	601a      	str	r2, [r3, #0]
  return(result);
 8007aa4:	ab1d      	add	r3, sp, #116	; 0x74
 8007aa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa8:	fab3 f383 	clz	r3, r3
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f043 0302 	orr.w	r3, r3, #2
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d102      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x79a>
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	e001      	b.n	8007ac6 <HAL_RCC_OscConfig+0x79e>
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	aa1c      	add	r2, sp, #112	; 0x70
 8007ac8:	2102      	movs	r1, #2
 8007aca:	6011      	str	r1, [r2, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007acc:	aa1c      	add	r2, sp, #112	; 0x70
 8007ace:	6812      	ldr	r2, [r2, #0]
 8007ad0:	fa92 f1a2 	rbit	r1, r2
 8007ad4:	aa1b      	add	r2, sp, #108	; 0x6c
 8007ad6:	6011      	str	r1, [r2, #0]
  return(result);
 8007ad8:	aa1b      	add	r2, sp, #108	; 0x6c
 8007ada:	6812      	ldr	r2, [r2, #0]
 8007adc:	fab2 f282 	clz	r2, r2
 8007ae0:	b252      	sxtb	r2, r2
 8007ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae6:	b252      	sxtb	r2, r2
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	f002 021f 	and.w	r2, r2, #31
 8007aee:	40d3      	lsrs	r3, r2
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1b8      	bne.n	8007a6a <HAL_RCC_OscConfig+0x742>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af8:	ab01      	add	r3, sp, #4
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 815a 	beq.w	8007db8 <HAL_RCC_OscConfig+0xa90>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <HAL_RCC_OscConfig+0x82c>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f003 030c 	and.w	r3, r3, #12
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	f000 8151 	beq.w	8007db4 <HAL_RCC_OscConfig+0xa8c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b12:	ab01      	add	r3, sp, #4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	f040 80e8 	bne.w	8007cee <HAL_RCC_OscConfig+0x9c6>
 8007b1e:	ab1a      	add	r3, sp, #104	; 0x68
 8007b20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b26:	ab1a      	add	r3, sp, #104	; 0x68
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	fa93 f2a3 	rbit	r2, r3
 8007b2e:	ab19      	add	r3, sp, #100	; 0x64
 8007b30:	601a      	str	r2, [r3, #0]
  return(result);
 8007b32:	ab19      	add	r3, sp, #100	; 0x64
 8007b34:	681b      	ldr	r3, [r3, #0]
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b36:	fab3 f383 	clz	r3, r3
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007b40:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8007b44:	461a      	mov	r2, r3
 8007b46:	2300      	movs	r3, #0
 8007b48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b4a:	f7fb fe97 	bl	800387c <HAL_GetTick>
 8007b4e:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b50:	e00d      	b.n	8007b6e <HAL_RCC_OscConfig+0x846>
 8007b52:	bf00      	nop
 8007b54:	40021000 	.word	0x40021000
 8007b58:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b5c:	f7fb fe8e 	bl	800387c <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x846>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e125      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007b6e:	ab18      	add	r3, sp, #96	; 0x60
 8007b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b76:	ab18      	add	r3, sp, #96	; 0x60
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	fa93 f2a3 	rbit	r2, r3
 8007b7e:	ab17      	add	r3, sp, #92	; 0x5c
 8007b80:	601a      	str	r2, [r3, #0]
  return(result);
 8007b82:	ab17      	add	r3, sp, #92	; 0x5c
 8007b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b86:	fab3 f383 	clz	r3, r3
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	095b      	lsrs	r3, r3, #5
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f043 0301 	orr.w	r3, r3, #1
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d102      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x878>
 8007b9a:	4b8a      	ldr	r3, [pc, #552]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	e00b      	b.n	8007bb8 <HAL_RCC_OscConfig+0x890>
 8007ba0:	ab16      	add	r3, sp, #88	; 0x58
 8007ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba8:	ab16      	add	r3, sp, #88	; 0x58
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	fa93 f2a3 	rbit	r2, r3
 8007bb0:	ab15      	add	r3, sp, #84	; 0x54
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	4b83      	ldr	r3, [pc, #524]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	aa14      	add	r2, sp, #80	; 0x50
 8007bba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007bbe:	6011      	str	r1, [r2, #0]
 8007bc0:	aa14      	add	r2, sp, #80	; 0x50
 8007bc2:	6812      	ldr	r2, [r2, #0]
 8007bc4:	fa92 f1a2 	rbit	r1, r2
 8007bc8:	aa13      	add	r2, sp, #76	; 0x4c
 8007bca:	6011      	str	r1, [r2, #0]
  return(result);
 8007bcc:	aa13      	add	r2, sp, #76	; 0x4c
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	fab2 f282 	clz	r2, r2
 8007bd4:	b252      	sxtb	r2, r2
 8007bd6:	f042 0220 	orr.w	r2, r2, #32
 8007bda:	b252      	sxtb	r2, r2
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	f002 021f 	and.w	r2, r2, #31
 8007be2:	40d3      	lsrs	r3, r2
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1b7      	bne.n	8007b5c <HAL_RCC_OscConfig+0x834>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007bec:	ab01      	add	r3, sp, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf6:	d109      	bne.n	8007c0c <HAL_RCC_OscConfig+0x8e4>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007bf8:	4972      	ldr	r1, [pc, #456]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007bfa:	4b72      	ldr	r3, [pc, #456]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007c02:	ab01      	add	r3, sp, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c0c:	486d      	ldr	r0, [pc, #436]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007c0e:	4b6d      	ldr	r3, [pc, #436]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007c16:	ab01      	add	r3, sp, #4
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6a19      	ldr	r1, [r3, #32]
 8007c1c:	ab01      	add	r3, sp, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	430b      	orrs	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	6043      	str	r3, [r0, #4]
 8007c28:	ab12      	add	r3, sp, #72	; 0x48
 8007c2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c30:	ab12      	add	r3, sp, #72	; 0x48
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	fa93 f2a3 	rbit	r2, r3
 8007c38:	ab11      	add	r3, sp, #68	; 0x44
 8007c3a:	601a      	str	r2, [r3, #0]
  return(result);
 8007c3c:	ab11      	add	r3, sp, #68	; 0x44
 8007c3e:	681b      	ldr	r3, [r3, #0]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c40:	fab3 f383 	clz	r3, r3
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007c4a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8007c4e:	461a      	mov	r2, r3
 8007c50:	2301      	movs	r3, #1
 8007c52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c54:	f7fb fe12 	bl	800387c <HAL_GetTick>
 8007c58:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x946>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c5c:	f7fb fe0e 	bl	800387c <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x946>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e0a5      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007c6e:	ab10      	add	r3, sp, #64	; 0x40
 8007c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c76:	ab10      	add	r3, sp, #64	; 0x40
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	fa93 f2a3 	rbit	r2, r3
 8007c7e:	ab0f      	add	r3, sp, #60	; 0x3c
 8007c80:	601a      	str	r2, [r3, #0]
  return(result);
 8007c82:	ab0f      	add	r3, sp, #60	; 0x3c
 8007c84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c86:	fab3 f383 	clz	r3, r3
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d102      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x978>
 8007c9a:	4b4a      	ldr	r3, [pc, #296]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	e00b      	b.n	8007cb8 <HAL_RCC_OscConfig+0x990>
 8007ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8007ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca8:	ab0e      	add	r3, sp, #56	; 0x38
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	fa93 f2a3 	rbit	r2, r3
 8007cb0:	ab0d      	add	r3, sp, #52	; 0x34
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	aa0c      	add	r2, sp, #48	; 0x30
 8007cba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007cbe:	6011      	str	r1, [r2, #0]
 8007cc0:	aa0c      	add	r2, sp, #48	; 0x30
 8007cc2:	6812      	ldr	r2, [r2, #0]
 8007cc4:	fa92 f1a2 	rbit	r1, r2
 8007cc8:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cca:	6011      	str	r1, [r2, #0]
  return(result);
 8007ccc:	aa0b      	add	r2, sp, #44	; 0x2c
 8007cce:	6812      	ldr	r2, [r2, #0]
 8007cd0:	fab2 f282 	clz	r2, r2
 8007cd4:	b252      	sxtb	r2, r2
 8007cd6:	f042 0220 	orr.w	r2, r2, #32
 8007cda:	b252      	sxtb	r2, r2
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	f002 021f 	and.w	r2, r2, #31
 8007ce2:	40d3      	lsrs	r3, r2
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0b7      	beq.n	8007c5c <HAL_RCC_OscConfig+0x934>
 8007cec:	e064      	b.n	8007db8 <HAL_RCC_OscConfig+0xa90>
 8007cee:	ab0a      	add	r3, sp, #40	; 0x28
 8007cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf6:	ab0a      	add	r3, sp, #40	; 0x28
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	fa93 f2a3 	rbit	r2, r3
 8007cfe:	ab09      	add	r3, sp, #36	; 0x24
 8007d00:	601a      	str	r2, [r3, #0]
  return(result);
 8007d02:	ab09      	add	r3, sp, #36	; 0x24
 8007d04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d06:	fab3 f383 	clz	r3, r3
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8007d10:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8007d14:	461a      	mov	r2, r3
 8007d16:	2300      	movs	r3, #0
 8007d18:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d1a:	f7fb fdaf 	bl	800387c <HAL_GetTick>
 8007d1e:	9063      	str	r0, [sp, #396]	; 0x18c
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d20:	e008      	b.n	8007d34 <HAL_RCC_OscConfig+0xa0c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d22:	f7fb fdab 	bl	800387c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <HAL_RCC_OscConfig+0xa0c>
          {
            return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e042      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
 8007d34:	ab08      	add	r3, sp, #32
 8007d36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3c:	ab08      	add	r3, sp, #32
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	fa93 f2a3 	rbit	r2, r3
 8007d44:	ab07      	add	r3, sp, #28
 8007d46:	601a      	str	r2, [r3, #0]
  return(result);
 8007d48:	ab07      	add	r3, sp, #28
 8007d4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d4c:	fab3 f383 	clz	r3, r3
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d102      	bne.n	8007d66 <HAL_RCC_OscConfig+0xa3e>
 8007d60:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	e00b      	b.n	8007d7e <HAL_RCC_OscConfig+0xa56>
 8007d66:	ab06      	add	r3, sp, #24
 8007d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d6e:	ab06      	add	r3, sp, #24
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	fa93 f2a3 	rbit	r2, r3
 8007d76:	ab05      	add	r3, sp, #20
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <HAL_RCC_OscConfig+0xa9c>)
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	aa04      	add	r2, sp, #16
 8007d80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007d84:	6011      	str	r1, [r2, #0]
 8007d86:	aa04      	add	r2, sp, #16
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	fa92 f1a2 	rbit	r1, r2
 8007d8e:	aa03      	add	r2, sp, #12
 8007d90:	6011      	str	r1, [r2, #0]
  return(result);
 8007d92:	aa03      	add	r2, sp, #12
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	fab2 f282 	clz	r2, r2
 8007d9a:	b252      	sxtb	r2, r2
 8007d9c:	f042 0220 	orr.w	r2, r2, #32
 8007da0:	b252      	sxtb	r2, r2
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	f002 021f 	and.w	r2, r2, #31
 8007da8:	40d3      	lsrs	r3, r2
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1b7      	bne.n	8007d22 <HAL_RCC_OscConfig+0x9fa>
 8007db2:	e001      	b.n	8007db8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <HAL_RCC_OscConfig+0xa92>
    }
  }
  
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	b065      	add	sp, #404	; 0x194
 8007dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000

08007dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dc8:	b500      	push	{lr}
 8007dca:	b099      	sub	sp, #100	; 0x64
 8007dcc:	9001      	str	r0, [sp, #4]
 8007dce:	9100      	str	r1, [sp, #0]
  uint32_t tickstart = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9317      	str	r3, [sp, #92]	; 0x5c
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8007dd4:	4b9b      	ldr	r3, [pc, #620]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0207 	and.w	r2, r3, #7
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d210      	bcs.n	8007e04 <HAL_RCC_ClockConfig+0x3c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de2:	4998      	ldr	r1, [pc, #608]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8007de4:	4b97      	ldr	r3, [pc, #604]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f023 0207 	bic.w	r2, r3, #7
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007df2:	4b94      	ldr	r3, [pc, #592]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0207 	and.w	r2, r3, #7
 8007dfa:	9b00      	ldr	r3, [sp, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d001      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e15e      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e04:	9b01      	ldr	r3, [sp, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_RCC_ClockConfig+0x5a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e10:	498d      	ldr	r1, [pc, #564]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007e12:	4b8d      	ldr	r3, [pc, #564]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80f2 	beq.w	8008014 <HAL_RCC_ClockConfig+0x24c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e30:	9b01      	ldr	r3, [sp, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d135      	bne.n	8007ea4 <HAL_RCC_ClockConfig+0xdc>
 8007e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e3c:	9316      	str	r3, [sp, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e40:	fa93 f3a3 	rbit	r3, r3
 8007e44:	9315      	str	r3, [sp, #84]	; 0x54
  return(result);
 8007e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e48:	fab3 f383 	clz	r3, r3
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	095b      	lsrs	r3, r3, #5
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCC_ClockConfig+0x9a>
 8007e5c:	4b7a      	ldr	r3, [pc, #488]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_ClockConfig+0xac>
 8007e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e66:	9314      	str	r3, [sp, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e6a:	fa93 f3a3 	rbit	r3, r3
 8007e6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e70:	4b75      	ldr	r3, [pc, #468]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e78:	9212      	str	r2, [sp, #72]	; 0x48
 8007e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e7c:	fa92 f2a2 	rbit	r2, r2
 8007e80:	9211      	str	r2, [sp, #68]	; 0x44
  return(result);
 8007e82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e84:	fab2 f282 	clz	r2, r2
 8007e88:	b252      	sxtb	r2, r2
 8007e8a:	f042 0220 	orr.w	r2, r2, #32
 8007e8e:	b252      	sxtb	r2, r2
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	f002 021f 	and.w	r2, r2, #31
 8007e96:	40d3      	lsrs	r3, r2
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d16e      	bne.n	8007f7e <HAL_RCC_ClockConfig+0x1b6>
      {
        return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e10e      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d135      	bne.n	8007f18 <HAL_RCC_ClockConfig+0x150>
 8007eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eb0:	9310      	str	r3, [sp, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007eb4:	fa93 f3a3 	rbit	r3, r3
 8007eb8:	930f      	str	r3, [sp, #60]	; 0x3c
  return(result);
 8007eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ebc:	fab3 f383 	clz	r3, r3
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d102      	bne.n	8007ed6 <HAL_RCC_ClockConfig+0x10e>
 8007ed0:	4b5d      	ldr	r3, [pc, #372]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_ClockConfig+0x120>
 8007ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eda:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ede:	fa93 f3a3 	rbit	r3, r3
 8007ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ee4:	4b58      	ldr	r3, [pc, #352]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007eec:	920c      	str	r2, [sp, #48]	; 0x30
 8007eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef0:	fa92 f2a2 	rbit	r2, r2
 8007ef4:	920b      	str	r2, [sp, #44]	; 0x2c
  return(result);
 8007ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ef8:	fab2 f282 	clz	r2, r2
 8007efc:	b252      	sxtb	r2, r2
 8007efe:	f042 0220 	orr.w	r2, r2, #32
 8007f02:	b252      	sxtb	r2, r2
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	f002 021f 	and.w	r2, r2, #31
 8007f0a:	40d3      	lsrs	r3, r2
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d134      	bne.n	8007f7e <HAL_RCC_ClockConfig+0x1b6>
      {
        return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e0d4      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	930a      	str	r3, [sp, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1e:	fa93 f3a3 	rbit	r3, r3
 8007f22:	9309      	str	r3, [sp, #36]	; 0x24
  return(result);
 8007f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f26:	fab3 f383 	clz	r3, r3
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	095b      	lsrs	r3, r3, #5
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f043 0301 	orr.w	r3, r3, #1
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d102      	bne.n	8007f40 <HAL_RCC_ClockConfig+0x178>
 8007f3a:	4b43      	ldr	r3, [pc, #268]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	e007      	b.n	8007f50 <HAL_RCC_ClockConfig+0x188>
 8007f40:	2302      	movs	r3, #2
 8007f42:	9308      	str	r3, [sp, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	fa93 f3a3 	rbit	r3, r3
 8007f4a:	9307      	str	r3, [sp, #28]
 8007f4c:	4b3e      	ldr	r3, [pc, #248]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2202      	movs	r2, #2
 8007f52:	9206      	str	r2, [sp, #24]
 8007f54:	9a06      	ldr	r2, [sp, #24]
 8007f56:	fa92 f2a2 	rbit	r2, r2
 8007f5a:	9205      	str	r2, [sp, #20]
  return(result);
 8007f5c:	9a05      	ldr	r2, [sp, #20]
 8007f5e:	fab2 f282 	clz	r2, r2
 8007f62:	b252      	sxtb	r2, r2
 8007f64:	f042 0220 	orr.w	r2, r2, #32
 8007f68:	b252      	sxtb	r2, r2
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	f002 021f 	and.w	r2, r2, #31
 8007f70:	40d3      	lsrs	r3, r2
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_RCC_ClockConfig+0x1b6>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e0a1      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f7e:	4932      	ldr	r1, [pc, #200]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007f80:	4b31      	ldr	r3, [pc, #196]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f023 0203 	bic.w	r2, r3, #3
 8007f88:	9b01      	ldr	r3, [sp, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f90:	f7fb fc74 	bl	800387c <HAL_GetTick>
 8007f94:	9017      	str	r0, [sp, #92]	; 0x5c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d112      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0x1fc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f9e:	e00a      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fa0:	f7fb fc6c 	bl	800387c <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_ClockConfig+0x1ee>
        {
          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e085      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007fb6:	4b24      	ldr	r3, [pc, #144]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d1ee      	bne.n	8007fa0 <HAL_RCC_ClockConfig+0x1d8>
 8007fc2:	e027      	b.n	8008014 <HAL_RCC_ClockConfig+0x24c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc4:	9b01      	ldr	r3, [sp, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d11d      	bne.n	8008008 <HAL_RCC_ClockConfig+0x240>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCC_ClockConfig+0x21c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fce:	f7fb fc55 	bl	800387c <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d901      	bls.n	8007fe4 <HAL_RCC_ClockConfig+0x21c>
        {
          return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e06e      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fe4:	4b18      	ldr	r3, [pc, #96]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f003 030c 	and.w	r3, r3, #12
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d1ee      	bne.n	8007fce <HAL_RCC_ClockConfig+0x206>
 8007ff0:	e010      	b.n	8008014 <HAL_RCC_ClockConfig+0x24c>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff2:	f7fb fc43 	bl	800387c <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008000:	4293      	cmp	r3, r2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_ClockConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e05c      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008008:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <HAL_RCC_ClockConfig+0x280>)
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f003 030c 	and.w	r3, r3, #12
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1ee      	bne.n	8007ff2 <HAL_RCC_ClockConfig+0x22a>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0207 	and.w	r2, r3, #7
 800801c:	9b00      	ldr	r3, [sp, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d914      	bls.n	800804c <HAL_RCC_ClockConfig+0x284>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008022:	4908      	ldr	r1, [pc, #32]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f023 0207 	bic.w	r2, r3, #7
 800802c:	9b00      	ldr	r3, [sp, #0]
 800802e:	4313      	orrs	r3, r2
 8008030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008032:	4b04      	ldr	r3, [pc, #16]	; (8008044 <HAL_RCC_ClockConfig+0x27c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0207 	and.w	r2, r3, #7
 800803a:	9b00      	ldr	r3, [sp, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d005      	beq.n	800804c <HAL_RCC_ClockConfig+0x284>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e03e      	b.n	80080c2 <HAL_RCC_ClockConfig+0x2fa>
 8008044:	40022000 	.word	0x40022000
 8008048:	40021000 	.word	0x40021000
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008058:	491c      	ldr	r1, [pc, #112]	; (80080cc <HAL_RCC_ClockConfig+0x304>)
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <HAL_RCC_ClockConfig+0x304>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <HAL_RCC_ClockConfig+0x2c2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008076:	4915      	ldr	r1, [pc, #84]	; (80080cc <HAL_RCC_ClockConfig+0x304>)
 8008078:	4b14      	ldr	r3, [pc, #80]	; (80080cc <HAL_RCC_ClockConfig+0x304>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4313      	orrs	r3, r2
 8008088:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800808a:	f000 f887 	bl	800819c <HAL_RCC_GetSysClockFreq>
 800808e:	4601      	mov	r1, r0
 8008090:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <HAL_RCC_ClockConfig+0x304>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008098:	23f0      	movs	r3, #240	; 0xf0
 800809a:	9304      	str	r3, [sp, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800809c:	9b04      	ldr	r3, [sp, #16]
 800809e:	fa93 f3a3 	rbit	r3, r3
 80080a2:	9303      	str	r3, [sp, #12]
  return(result);
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	fab3 f383 	clz	r3, r3
 80080aa:	fa22 f303 	lsr.w	r3, r2, r3
 80080ae:	4a08      	ldr	r2, [pc, #32]	; (80080d0 <HAL_RCC_ClockConfig+0x308>)
 80080b0:	5cd3      	ldrb	r3, [r2, r3]
 80080b2:	fa21 f303 	lsr.w	r3, r1, r3
 80080b6:	4a07      	ldr	r2, [pc, #28]	; (80080d4 <HAL_RCC_ClockConfig+0x30c>)
 80080b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80080ba:	2000      	movs	r0, #0
 80080bc:	f7fb fbba 	bl	8003834 <HAL_InitTick>
  
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	b019      	add	sp, #100	; 0x64
 80080c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80080ca:	bf00      	nop
 80080cc:	40021000 	.word	0x40021000
 80080d0:	0800b0ac 	.word	0x0800b0ac
 80080d4:	20000000 	.word	0x20000000

080080d8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80080d8:	b500      	push	{lr}
 80080da:	b08b      	sub	sp, #44	; 0x2c
 80080dc:	9003      	str	r0, [sp, #12]
 80080de:	9102      	str	r1, [sp, #8]
 80080e0:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef gpio = {0};
 80080e2:	ab06      	add	r3, sp, #24
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	609a      	str	r2, [r3, #8]
 80080ec:	60da      	str	r2, [r3, #12]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80080ee:	2302      	movs	r3, #2
 80080f0:	9307      	str	r3, [sp, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80080f2:	2303      	movs	r3, #3
 80080f4:	9309      	str	r3, [sp, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	9308      	str	r3, [sp, #32]
  gpio.Pin       = MCO1_PIN;
 80080fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080fe:	9306      	str	r3, [sp, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8008100:	4a0e      	ldr	r2, [pc, #56]	; (800813c <HAL_RCC_MCOConfig+0x64>)
 8008102:	4b0e      	ldr	r3, [pc, #56]	; (800813c <HAL_RCC_MCOConfig+0x64>)
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	f043 0304 	orr.w	r3, r3, #4
 800810a:	6193      	str	r3, [r2, #24]
 800810c:	4b0b      	ldr	r3, [pc, #44]	; (800813c <HAL_RCC_MCOConfig+0x64>)
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	9b05      	ldr	r3, [sp, #20]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8008118:	ab06      	add	r3, sp, #24
 800811a:	4619      	mov	r1, r3
 800811c:	4808      	ldr	r0, [pc, #32]	; (8008140 <HAL_RCC_MCOConfig+0x68>)
 800811e:	f7fd fb87 	bl	8005830 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8008122:	4906      	ldr	r1, [pc, #24]	; (800813c <HAL_RCC_MCOConfig+0x64>)
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <HAL_RCC_MCOConfig+0x64>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800812c:	9b02      	ldr	r3, [sp, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	604b      	str	r3, [r1, #4]
}
 8008132:	bf00      	nop
 8008134:	b00b      	add	sp, #44	; 0x2c
 8008136:	f85d fb04 	ldr.w	pc, [sp], #4
 800813a:	bf00      	nop
 800813c:	40021000 	.word	0x40021000
 8008140:	40010800 	.word	0x40010800

08008144 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008144:	b082      	sub	sp, #8
 8008146:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800814a:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	fa93 f3a3 	rbit	r3, r3
 8008152:	9300      	str	r3, [sp, #0]
  return(result);
 8008154:	9b00      	ldr	r3, [sp, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008156:	fab3 f383 	clz	r3, r3
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8008160:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8008164:	461a      	mov	r2, r3
 8008166:	2301      	movs	r3, #1
 8008168:	6013      	str	r3, [r2, #0]
}
 800816a:	bf00      	nop
 800816c:	b002      	add	sp, #8
 800816e:	4770      	bx	lr

08008170 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8008170:	b082      	sub	sp, #8
 8008172:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008176:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008178:	9b01      	ldr	r3, [sp, #4]
 800817a:	fa93 f3a3 	rbit	r3, r3
 800817e:	9300      	str	r3, [sp, #0]
  return(result);
 8008180:	9b00      	ldr	r3, [sp, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8008182:	fab3 f383 	clz	r3, r3
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800818c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8008190:	461a      	mov	r2, r3
 8008192:	2300      	movs	r3, #0
 8008194:	6013      	str	r3, [r2, #0]
}
 8008196:	bf00      	nop
 8008198:	b002      	add	sp, #8
 800819a:	4770      	bx	lr

0800819c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800819c:	b410      	push	{r4}
 800819e:	b08f      	sub	sp, #60	; 0x3c
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80081a0:	4b33      	ldr	r3, [pc, #204]	; (8008270 <HAL_RCC_GetSysClockFreq+0xd4>)
 80081a2:	ac01      	add	r4, sp, #4
 80081a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80081aa:	4b32      	ldr	r3, [pc, #200]	; (8008274 <HAL_RCC_GetSysClockFreq+0xd8>)
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	f8ad 3000 	strh.w	r3, [sp]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b6:	2300      	movs	r3, #0
 80081b8:	930a      	str	r3, [sp, #40]	; 0x28
 80081ba:	2300      	movs	r3, #0
 80081bc:	930d      	str	r3, [sp, #52]	; 0x34
 80081be:	2300      	movs	r3, #0
 80081c0:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t sysclockfreq = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	930c      	str	r3, [sp, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80081c6:	4b2c      	ldr	r3, [pc, #176]	; (8008278 <HAL_RCC_GetSysClockFreq+0xdc>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	930b      	str	r3, [sp, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ce:	f003 030c 	and.w	r3, r3, #12
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d002      	beq.n	80081dc <HAL_RCC_GetSysClockFreq+0x40>
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d003      	beq.n	80081e2 <HAL_RCC_GetSysClockFreq+0x46>
 80081da:	e041      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0xc4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081dc:	4b27      	ldr	r3, [pc, #156]	; (800827c <HAL_RCC_GetSysClockFreq+0xe0>)
 80081de:	930c      	str	r3, [sp, #48]	; 0x30
      break;
 80081e0:	e041      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80081e8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80081ec:	9308      	str	r3, [sp, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ee:	9b08      	ldr	r3, [sp, #32]
 80081f0:	fa93 f3a3 	rbit	r3, r3
 80081f4:	9307      	str	r3, [sp, #28]
  return(result);
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	fab3 f383 	clz	r3, r3
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	aa0e      	add	r2, sp, #56	; 0x38
 8008202:	4413      	add	r3, r2
 8008204:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8008208:	9309      	str	r3, [sp, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800820a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800820c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01d      	beq.n	8008250 <HAL_RCC_GetSysClockFreq+0xb4>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8008214:	4b18      	ldr	r3, [pc, #96]	; (8008278 <HAL_RCC_GetSysClockFreq+0xdc>)
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800821c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008220:	9306      	str	r3, [sp, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	fa93 f3a3 	rbit	r3, r3
 8008228:	9305      	str	r3, [sp, #20]
  return(result);
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	fab3 f383 	clz	r3, r3
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
 8008234:	aa0e      	add	r2, sp, #56	; 0x38
 8008236:	4413      	add	r3, r2
 8008238:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800823c:	930a      	str	r3, [sp, #40]	; 0x28
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800823e:	4a0f      	ldr	r2, [pc, #60]	; (800827c <HAL_RCC_GetSysClockFreq+0xe0>)
 8008240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008242:	fbb2 f3f3 	udiv	r3, r2, r3
 8008246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	930d      	str	r3, [sp, #52]	; 0x34
 800824e:	e004      	b.n	800825a <HAL_RCC_GetSysClockFreq+0xbe>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008252:	4a0b      	ldr	r2, [pc, #44]	; (8008280 <HAL_RCC_GetSysClockFreq+0xe4>)
 8008254:	fb02 f303 	mul.w	r3, r2, r3
 8008258:	930d      	str	r3, [sp, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800825a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800825c:	930c      	str	r3, [sp, #48]	; 0x30
      break;
 800825e:	e002      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <HAL_RCC_GetSysClockFreq+0xe0>)
 8008262:	930c      	str	r3, [sp, #48]	; 0x30
      break;
 8008264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
}
 8008268:	4618      	mov	r0, r3
 800826a:	b00f      	add	sp, #60	; 0x3c
 800826c:	bc10      	pop	{r4}
 800826e:	4770      	bx	lr
 8008270:	0800b084 	.word	0x0800b084
 8008274:	0800b094 	.word	0x0800b094
 8008278:	40021000 	.word	0x40021000
 800827c:	007a1200 	.word	0x007a1200
 8008280:	003d0900 	.word	0x003d0900

08008284 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8008284:	4b01      	ldr	r3, [pc, #4]	; (800828c <HAL_RCC_GetHCLKFreq+0x8>)
 8008286:	681b      	ldr	r3, [r3, #0]
}
 8008288:	4618      	mov	r0, r3
 800828a:	4770      	bx	lr
 800828c:	20000000 	.word	0x20000000

08008290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008290:	b500      	push	{lr}
 8008292:	b083      	sub	sp, #12
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008294:	f7ff fff6 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 8008298:	4601      	mov	r1, r0
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80082a6:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	fa93 f3a3 	rbit	r3, r3
 80082ae:	9300      	str	r3, [sp, #0]
  return(result);
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	fab3 f383 	clz	r3, r3
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	4a05      	ldr	r2, [pc, #20]	; (80082d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80082bc:	5cd3      	ldrb	r3, [r2, r3]
 80082be:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80082c2:	4618      	mov	r0, r3
 80082c4:	b003      	add	sp, #12
 80082c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80082ca:	bf00      	nop
 80082cc:	40021000 	.word	0x40021000
 80082d0:	0800b0bc 	.word	0x0800b0bc

080082d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082d4:	b500      	push	{lr}
 80082d6:	b083      	sub	sp, #12
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80082d8:	f7ff ffd4 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 80082dc:	4601      	mov	r1, r0
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80082e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80082ea:	9301      	str	r3, [sp, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	fa93 f3a3 	rbit	r3, r3
 80082f2:	9300      	str	r3, [sp, #0]
  return(result);
 80082f4:	9b00      	ldr	r3, [sp, #0]
 80082f6:	fab3 f383 	clz	r3, r3
 80082fa:	fa22 f303 	lsr.w	r3, r2, r3
 80082fe:	4a05      	ldr	r2, [pc, #20]	; (8008314 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008300:	5cd3      	ldrb	r3, [r2, r3]
 8008302:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008306:	4618      	mov	r0, r3
 8008308:	b003      	add	sp, #12
 800830a:	f85d fb04 	ldr.w	pc, [sp], #4
 800830e:	bf00      	nop
 8008310:	40021000 	.word	0x40021000
 8008314:	0800b0bc 	.word	0x0800b0bc

08008318 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008318:	b084      	sub	sp, #16
 800831a:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	220f      	movs	r2, #15
 8008320:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8008322:	4b3f      	ldr	r3, [pc, #252]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800832a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800832e:	d104      	bne.n	800833a <HAL_RCC_GetOscConfig+0x22>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8008336:	605a      	str	r2, [r3, #4]
 8008338:	e00e      	b.n	8008358 <HAL_RCC_GetOscConfig+0x40>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800833a:	4b39      	ldr	r3, [pc, #228]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008346:	d104      	bne.n	8008352 <HAL_RCC_GetOscConfig+0x3a>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800834e:	605a      	str	r2, [r3, #4]
 8008350:	e002      	b.n	8008358 <HAL_RCC_GetOscConfig+0x40>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8008358:	4b31      	ldr	r3, [pc, #196]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8008364:	4b2e      	ldr	r3, [pc, #184]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	d103      	bne.n	8008378 <HAL_RCC_GetOscConfig+0x60>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	611a      	str	r2, [r3, #16]
 8008376:	e002      	b.n	800837e <HAL_RCC_GetOscConfig+0x66>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8008378:	9b01      	ldr	r3, [sp, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 800837e:	4b28      	ldr	r3, [pc, #160]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8008386:	23f8      	movs	r3, #248	; 0xf8
 8008388:	9303      	str	r3, [sp, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	fa93 f3a3 	rbit	r3, r3
 8008390:	9302      	str	r3, [sp, #8]
  return(result);
 8008392:	9b02      	ldr	r3, [sp, #8]
 8008394:	fab3 f383 	clz	r3, r3
 8008398:	40da      	lsrs	r2, r3
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	615a      	str	r2, [r3, #20]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800839e:	4b20      	ldr	r3, [pc, #128]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d103      	bne.n	80083b2 <HAL_RCC_GetOscConfig+0x9a>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	2205      	movs	r2, #5
 80083ae:	60da      	str	r2, [r3, #12]
 80083b0:	e00c      	b.n	80083cc <HAL_RCC_GetOscConfig+0xb4>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80083b2:	4b1b      	ldr	r3, [pc, #108]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d103      	bne.n	80083c6 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e002      	b.n	80083cc <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	60da      	str	r2, [r3, #12]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80083cc:	4b14      	ldr	r3, [pc, #80]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d103      	bne.n	80083e0 <HAL_RCC_GetOscConfig+0xc8>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	619a      	str	r2, [r3, #24]
 80083de:	e002      	b.n	80083e6 <HAL_RCC_GetOscConfig+0xce>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80083e0:	9b01      	ldr	r3, [sp, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	619a      	str	r2, [r3, #24]
  }
  

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80083e6:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083f2:	d103      	bne.n	80083fc <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	61da      	str	r2, [r3, #28]
 80083fa:	e002      	b.n	8008402 <HAL_RCC_GetOscConfig+0xea>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8008402:	4b07      	ldr	r3, [pc, #28]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 800840e:	4b04      	ldr	r3, [pc, #16]	; (8008420 <HAL_RCC_GetOscConfig+0x108>)
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 800841a:	bf00      	nop
 800841c:	b004      	add	sp, #16
 800841e:	4770      	bx	lr
 8008420:	40021000 	.word	0x40021000

08008424 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008424:	b082      	sub	sp, #8
 8008426:	9001      	str	r0, [sp, #4]
 8008428:	9100      	str	r1, [sp, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	220f      	movs	r2, #15
 800842e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008430:	4b10      	ldr	r3, [pc, #64]	; (8008474 <HAL_RCC_GetClockConfig+0x50>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 0203 	and.w	r2, r3, #3
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800843c:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <HAL_RCC_GetClockConfig+0x50>)
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <HAL_RCC_GetClockConfig+0x50>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <HAL_RCC_GetClockConfig+0x50>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	08db      	lsrs	r3, r3, #3
 800845a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800845e:	9b01      	ldr	r3, [sp, #4]
 8008460:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <HAL_RCC_GetClockConfig+0x54>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0207 	and.w	r2, r3, #7
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 800846e:	bf00      	nop
 8008470:	b002      	add	sp, #8
 8008472:	4770      	bx	lr
 8008474:	40021000 	.word	0x40021000
 8008478:	40022000 	.word	0x40022000

0800847c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800847c:	b508      	push	{r3, lr}
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008486:	2b80      	cmp	r3, #128	; 0x80
 8008488:	d104      	bne.n	8008494 <HAL_RCC_NMI_IRQHandler+0x18>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800848a:	f000 f809 	bl	80084a0 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800848e:	4b03      	ldr	r3, [pc, #12]	; (800849c <HAL_RCC_NMI_IRQHandler+0x20>)
 8008490:	2280      	movs	r2, #128	; 0x80
 8008492:	701a      	strb	r2, [r3, #0]
  }
}
 8008494:	bf00      	nop
 8008496:	bd08      	pop	{r3, pc}
 8008498:	40021000 	.word	0x40021000
 800849c:	4002100a 	.word	0x4002100a

080084a0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 80084a0:	bf00      	nop
 80084a2:	4770      	bx	lr

080084a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084a4:	b500      	push	{lr}
 80084a6:	b091      	sub	sp, #68	; 0x44
 80084a8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0, temp_reg = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80084ae:	2300      	movs	r3, #0
 80084b0:	930e      	str	r3, [sp, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80084b2:	9b01      	ldr	r3, [sp, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80ac 	beq.w	8008618 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084c0:	4a67      	ldr	r2, [pc, #412]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80084c2:	4b67      	ldr	r3, [pc, #412]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ca:	61d3      	str	r3, [r2, #28]
 80084cc:	4b64      	ldr	r3, [pc, #400]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	9b03      	ldr	r3, [sp, #12]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80084d8:	4a62      	ldr	r2, [pc, #392]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80084da:	4b62      	ldr	r3, [pc, #392]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e2:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084e4:	f7fb f9ca 	bl	800387c <HAL_GetTick>
 80084e8:	900f      	str	r0, [sp, #60]	; 0x3c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80084ea:	e008      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084ec:	f7fb f9c6 	bl	800387c <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b64      	cmp	r3, #100	; 0x64
 80084f8:	d901      	bls.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e0ab      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80084fe:	4b59      	ldr	r3, [pc, #356]	; (8008664 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0f0      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800850a:	4b55      	ldr	r3, [pc, #340]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008512:	930e      	str	r3, [sp, #56]	; 0x38
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008516:	2b00      	cmp	r3, #0
 8008518:	d075      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800851a:	9b01      	ldr	r3, [sp, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008524:	429a      	cmp	r2, r3
 8008526:	d06e      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008528:	4b4d      	ldr	r3, [pc, #308]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008530:	930e      	str	r3, [sp, #56]	; 0x38
 8008532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008536:	930b      	str	r3, [sp, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800853a:	fa93 f3a3 	rbit	r3, r3
 800853e:	930a      	str	r3, [sp, #40]	; 0x28
  return(result);
 8008540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008542:	fab3 f383 	clz	r3, r3
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	461a      	mov	r2, r3
 800854a:	4b47      	ldr	r3, [pc, #284]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800854c:	4413      	add	r3, r2
 800854e:	461a      	mov	r2, r3
 8008550:	2301      	movs	r3, #1
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008558:	930d      	str	r3, [sp, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800855a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855c:	fa93 f3a3 	rbit	r3, r3
 8008560:	930c      	str	r3, [sp, #48]	; 0x30
  return(result);
 8008562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008564:	fab3 f383 	clz	r3, r3
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	461a      	mov	r2, r3
 800856c:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800856e:	4413      	add	r3, r2
 8008570:	461a      	mov	r2, r3
 8008572:	2300      	movs	r3, #0
 8008574:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008576:	4a3a      	ldr	r2, [pc, #232]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800857a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800857c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d03f      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x162>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 8008586:	f7fb f979 	bl	800387c <HAL_GetTick>
 800858a:	900f      	str	r0, [sp, #60]	; 0x3c
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800858c:	e00a      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800858e:	f7fb f975 	bl	800387c <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	4293      	cmp	r3, r2
 800859e:	d901      	bls.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
          {
            return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e058      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80085a4:	2302      	movs	r3, #2
 80085a6:	9309      	str	r3, [sp, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085aa:	fa93 f3a3 	rbit	r3, r3
 80085ae:	9308      	str	r3, [sp, #32]
 80085b0:	2302      	movs	r3, #2
 80085b2:	9307      	str	r3, [sp, #28]
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	fa93 f3a3 	rbit	r3, r3
 80085ba:	9306      	str	r3, [sp, #24]
  return(result);
 80085bc:	9b06      	ldr	r3, [sp, #24]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085be:	fab3 f383 	clz	r3, r3
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f043 0302 	orr.w	r3, r3, #2
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d102      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80085d2:	4b23      	ldr	r3, [pc, #140]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	e001      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x138>
 80085d8:	4b21      	ldr	r3, [pc, #132]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2202      	movs	r2, #2
 80085de:	9205      	str	r2, [sp, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	9a05      	ldr	r2, [sp, #20]
 80085e2:	fa92 f2a2 	rbit	r2, r2
 80085e6:	9204      	str	r2, [sp, #16]
  return(result);
 80085e8:	9a04      	ldr	r2, [sp, #16]
 80085ea:	fab2 f282 	clz	r2, r2
 80085ee:	b252      	sxtb	r2, r2
 80085f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f4:	b252      	sxtb	r2, r2
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	f002 021f 	and.w	r2, r2, #31
 80085fc:	40d3      	lsrs	r3, r2
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0c3      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0xea>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008606:	4916      	ldr	r1, [pc, #88]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008608:	4b15      	ldr	r3, [pc, #84]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008610:	9b01      	ldr	r3, [sp, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4313      	orrs	r3, r2
 8008616:	620b      	str	r3, [r1, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008624:	490e      	ldr	r1, [pc, #56]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008626:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800862e:	9b01      	ldr	r3, [sp, #4]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	4313      	orrs	r3, r2
 8008634:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0310 	and.w	r3, r3, #16
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008642:	4907      	ldr	r1, [pc, #28]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008644:	4b06      	ldr	r3, [pc, #24]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	4313      	orrs	r3, r2
 8008652:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	b011      	add	sp, #68	; 0x44
 800865a:	f85d fb04 	ldr.w	pc, [sp], #4
 800865e:	bf00      	nop
 8008660:	40021000 	.word	0x40021000
 8008664:	40007000 	.word	0x40007000
 8008668:	42420400 	.word	0x42420400

0800866c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that 
  *         returns the configuration information for the Extended Peripherals clocks(RTC, I2S, ADC clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800866c:	b084      	sub	sp, #16
 800866e:	9001      	str	r0, [sp, #4]
  uint32_t srcclk = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	9303      	str	r3, [sp, #12]
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800867a:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008682:	9303      	str	r3, [sp, #12]
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 8008684:	9b01      	ldr	r3, [sp, #4]
 8008686:	9a03      	ldr	r2, [sp, #12]
 8008688:	605a      	str	r2, [r3, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 800868a:	9b01      	ldr	r3, [sp, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f043 0202 	orr.w	r2, r3, #2
 8008692:	9b01      	ldr	r3, [sp, #4]
 8008694:	601a      	str	r2, [r3, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	609a      	str	r2, [r3, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 80086a2:	9b01      	ldr	r3, [sp, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f043 0210 	orr.w	r2, r3, #16
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	601a      	str	r2, [r3, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 80086ae:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086b6:	9b01      	ldr	r3, [sp, #4]
 80086b8:	60da      	str	r2, [r3, #12]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
}
 80086ba:	bf00      	nop
 80086bc:	b004      	add	sp, #16
 80086be:	4770      	bx	lr
 80086c0:	40021000 	.word	0x40021000

080086c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086c4:	b510      	push	{r4, lr}
 80086c6:	b092      	sub	sp, #72	; 0x48
 80086c8:	9001      	str	r0, [sp, #4]
 || defined(STM32F105xC) || defined(STM32F107xC)
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80086ca:	4b66      	ldr	r3, [pc, #408]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80086cc:	ac03      	add	r4, sp, #12
 80086ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80086d4:	4b64      	ldr	r3, [pc, #400]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	f8ad 3008 	strh.w	r3, [sp, #8]
#endif
#endif
  uint32_t temp_reg = 0, frequency = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e0:	2300      	movs	r3, #0
 80086e2:	9311      	str	r3, [sp, #68]	; 0x44
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t prediv1 = 0, pllclk = 0, pllmul = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	930e      	str	r3, [sp, #56]	; 0x38
 80086e8:	2300      	movs	r3, #0
 80086ea:	9310      	str	r3, [sp, #64]	; 0x40
 80086ec:	2300      	movs	r3, #0
 80086ee:	930d      	str	r3, [sp, #52]	; 0x34
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	f000 8098 	beq.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d002      	beq.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d05d      	beq.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
      break;
    }
  default: 
    {
      break;
 8008700:	e0ac      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
      temp_reg = RCC->CFGR;
 8008702:	4b5a      	ldr	r3, [pc, #360]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	930f      	str	r3, [sp, #60]	; 0x3c
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8008708:	4b58      	ldr	r3, [pc, #352]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80a2 	beq.w	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8008716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008718:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800871c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8008720:	930c      	str	r3, [sp, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008724:	fa93 f3a3 	rbit	r3, r3
 8008728:	930b      	str	r3, [sp, #44]	; 0x2c
  return(result);
 800872a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872c:	fab3 f383 	clz	r3, r3
 8008730:	fa22 f303 	lsr.w	r3, r2, r3
 8008734:	aa12      	add	r2, sp, #72	; 0x48
 8008736:	4413      	add	r3, r2
 8008738:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800873c:	930d      	str	r3, [sp, #52]	; 0x34
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800873e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d022      	beq.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8008748:	4b48      	ldr	r3, [pc, #288]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8008750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008754:	930a      	str	r3, [sp, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008758:	fa93 f3a3 	rbit	r3, r3
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
  return(result);
 800875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008760:	fab3 f383 	clz	r3, r3
 8008764:	fa22 f303 	lsr.w	r3, r2, r3
 8008768:	aa12      	add	r2, sp, #72	; 0x48
 800876a:	4413      	add	r3, r2
 800876c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8008770:	930e      	str	r3, [sp, #56]	; 0x38
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00d      	beq.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800877c:	4a3c      	ldr	r2, [pc, #240]	; (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800877e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008780:	fbb2 f3f3 	udiv	r3, r2, r3
 8008784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	9310      	str	r3, [sp, #64]	; 0x40
 800878c:	e004      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800878e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008790:	4a38      	ldr	r2, [pc, #224]	; (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
 8008792:	fb02 f303 	mul.w	r3, r2, r3
 8008796:	9310      	str	r3, [sp, #64]	; 0x40
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008798:	4b34      	ldr	r3, [pc, #208]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087a4:	d102      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          frequency = pllclk;
 80087a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087a8:	9311      	str	r3, [sp, #68]	; 0x44
      break;
 80087aa:	e056      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
          frequency = (pllclk * 2) / 3;
 80087ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	4a31      	ldr	r2, [pc, #196]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	9311      	str	r3, [sp, #68]	; 0x44
      break;
 80087ba:	e04e      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
      temp_reg = RCC->BDCR;
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	930f      	str	r3, [sp, #60]	; 0x3c
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80087c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087cc:	d108      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80087ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        frequency = LSE_VALUE;
 80087d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087dc:	9311      	str	r3, [sp, #68]	; 0x44
 80087de:	e022      	b.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80087e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ea:	d109      	bne.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80087ec:	4b1f      	ldr	r3, [pc, #124]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = LSI_VALUE;
 80087f8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80087fc:	9311      	str	r3, [sp, #68]	; 0x44
 80087fe:	e012      	b.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800880a:	d109      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 800880c:	4b17      	ldr	r3, [pc, #92]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        frequency = HSE_VALUE / 128;
 8008818:	f24f 4324 	movw	r3, #62500	; 0xf424
 800881c:	9311      	str	r3, [sp, #68]	; 0x44
 800881e:	e002      	b.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        frequency = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	9311      	str	r3, [sp, #68]	; 0x44
      break;
 8008824:	e01a      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8008826:	e019      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> POSITION_VAL(RCC_CFGR_ADCPRE_DIV4)) + 1) * 2);
 8008828:	f7ff fd54 	bl	80082d4 <HAL_RCC_GetPCLK2Freq>
 800882c:	4601      	mov	r1, r0
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800883a:	9308      	str	r3, [sp, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800883c:	9b08      	ldr	r3, [sp, #32]
 800883e:	fa93 f3a3 	rbit	r3, r3
 8008842:	9307      	str	r3, [sp, #28]
  return(result);
 8008844:	9b07      	ldr	r3, [sp, #28]
 8008846:	fab3 f383 	clz	r3, r3
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	3301      	adds	r3, #1
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	fbb1 f3f3 	udiv	r3, r1, r3
 8008856:	9311      	str	r3, [sp, #68]	; 0x44
      break;
 8008858:	e000      	b.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
      break;
 800885a:	bf00      	nop
    }
  }
  return(frequency);
 800885c:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
 800885e:	4618      	mov	r0, r3
 8008860:	b012      	add	sp, #72	; 0x48
 8008862:	bd10      	pop	{r4, pc}
 8008864:	0800b098 	.word	0x0800b098
 8008868:	0800b0a8 	.word	0x0800b0a8
 800886c:	40021000 	.word	0x40021000
 8008870:	007a1200 	.word	0x007a1200
 8008874:	003d0900 	.word	0x003d0900
 8008878:	aaaaaaab 	.word	0xaaaaaaab

0800887c <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800887c:	b500      	push	{lr}
 800887e:	b083      	sub	sp, #12
 8008880:	9001      	str	r0, [sp, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008882:	9b01      	ldr	r3, [sp, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_UART_Init+0x10>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e03b      	b.n	8008904 <HAL_UART_Init+0x88>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <HAL_UART_Init+0x2a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	f000 f972 	bl	8008b8a <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088ae:	9b01      	ldr	r3, [sp, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	9a01      	ldr	r2, [sp, #4]
 80088b4:	6812      	ldr	r2, [r2, #0]
 80088b6:	68d2      	ldr	r2, [r2, #12]
 80088b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088bc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088be:	9801      	ldr	r0, [sp, #4]
 80088c0:	f001 f938 	bl	8009b34 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088c4:	9b01      	ldr	r3, [sp, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	9a01      	ldr	r2, [sp, #4]
 80088ca:	6812      	ldr	r2, [r2, #0]
 80088cc:	6912      	ldr	r2, [r2, #16]
 80088ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088d4:	9b01      	ldr	r3, [sp, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	6952      	ldr	r2, [r2, #20]
 80088de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088e2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	9a01      	ldr	r2, [sp, #4]
 80088ea:	6812      	ldr	r2, [r2, #0]
 80088ec:	68d2      	ldr	r2, [r2, #12]
 80088ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088f2:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80088fa:	9b01      	ldr	r3, [sp, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	b003      	add	sp, #12
 8008908:	f85d fb04 	ldr.w	pc, [sp], #4

0800890c <HAL_HalfDuplex_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800890c:	b500      	push	{lr}
 800890e:	b083      	sub	sp, #12
 8008910:	9001      	str	r0, [sp, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <HAL_HalfDuplex_Init+0x10>
  {
    return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e043      	b.n	80089a4 <HAL_HalfDuplex_Init+0x98>
  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->State == HAL_UART_STATE_RESET)
 800891c:	9b01      	ldr	r3, [sp, #4]
 800891e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <HAL_HalfDuplex_Init+0x2a>
  {   
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008928:	9b01      	ldr	r3, [sp, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8008930:	9801      	ldr	r0, [sp, #4]
 8008932:	f000 f92a 	bl	8008b8a <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	2202      	movs	r2, #2
 800893a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	9a01      	ldr	r2, [sp, #4]
 8008944:	6812      	ldr	r2, [r2, #0]
 8008946:	68d2      	ldr	r2, [r2, #12]
 8008948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800894c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800894e:	9801      	ldr	r0, [sp, #4]
 8008950:	f001 f8f0 	bl	8009b34 <UART_SetConfig>
  
  /* In half-duplex mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	9a01      	ldr	r2, [sp, #4]
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	6912      	ldr	r2, [r2, #16]
 800895e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008962:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	9a01      	ldr	r2, [sp, #4]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	6952      	ldr	r2, [r2, #20]
 800896e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008972:	615a      	str	r2, [r3, #20]
  
  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	9a01      	ldr	r2, [sp, #4]
 800897a:	6812      	ldr	r2, [r2, #0]
 800897c:	6952      	ldr	r2, [r2, #20]
 800897e:	f042 0208 	orr.w	r2, r2, #8
 8008982:	615a      	str	r2, [r3, #20]
 
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	9a01      	ldr	r2, [sp, #4]
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	68d2      	ldr	r2, [r2, #12]
 800898e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008992:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800899a:	9b01      	ldr	r3, [sp, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	b003      	add	sp, #12
 80089a8:	f85d fb04 	ldr.w	pc, [sp], #4

080089ac <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80089ac:	b500      	push	{lr}
 80089ae:	b083      	sub	sp, #12
 80089b0:	9001      	str	r0, [sp, #4]
 80089b2:	9100      	str	r1, [sp, #0]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_LIN_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e04d      	b.n	8008a5a <HAL_LIN_Init+0xae>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_LIN_Init+0x2c>
  {   
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;  
 80089ca:	9b01      	ldr	r3, [sp, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80089d2:	9801      	ldr	r0, [sp, #4]
 80089d4:	f000 f8d9 	bl	8008b8a <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	9a01      	ldr	r2, [sp, #4]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	68d2      	ldr	r2, [r2, #12]
 80089ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ee:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089f0:	9801      	ldr	r0, [sp, #4]
 80089f2:	f001 f89f 	bl	8009b34 <UART_SetConfig>
  
  /* In LIN mode, the following bits must be kept cleared: 
     - CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	9a01      	ldr	r2, [sp, #4]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	6912      	ldr	r2, [r2, #16]
 8008a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	9a01      	ldr	r2, [sp, #4]
 8008a0c:	6812      	ldr	r2, [r2, #0]
 8008a0e:	6952      	ldr	r2, [r2, #20]
 8008a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a14:	615a      	str	r2, [r3, #20]
  
  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9a01      	ldr	r2, [sp, #4]
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	6912      	ldr	r2, [r2, #16]
 8008a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a24:	611a      	str	r2, [r3, #16]
  
  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	9a01      	ldr	r2, [sp, #4]
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	6912      	ldr	r2, [r2, #16]
 8008a30:	f022 0120 	bic.w	r1, r2, #32
 8008a34:	9a00      	ldr	r2, [sp, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	611a      	str	r2, [r3, #16]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a3a:	9b01      	ldr	r3, [sp, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9a01      	ldr	r2, [sp, #4]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	68d2      	ldr	r2, [r2, #12]
 8008a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a48:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4a:	9b01      	ldr	r3, [sp, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	b003      	add	sp, #12
 8008a5e:	f85d fb04 	ldr.w	pc, [sp], #4

08008a62 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wakeup by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wakeup by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8008a62:	b500      	push	{lr}
 8008a64:	b085      	sub	sp, #20
 8008a66:	9003      	str	r0, [sp, #12]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	9201      	str	r2, [sp, #4]
 8008a6c:	f88d 300b 	strb.w	r3, [sp, #11]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008a70:	9b03      	ldr	r3, [sp, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e050      	b.n	8008b1c <HAL_MultiProcessor_Init+0xba>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->State == HAL_UART_STATE_RESET)
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <HAL_MultiProcessor_Init+0x32>
  {   
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8008a8e:	9803      	ldr	r0, [sp, #12]
 8008a90:	f000 f87b 	bl	8008b8a <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	9a03      	ldr	r2, [sp, #12]
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	68d2      	ldr	r2, [r2, #12]
 8008aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aaa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008aac:	9803      	ldr	r0, [sp, #12]
 8008aae:	f001 f841 	bl	8009b34 <UART_SetConfig>
  
  /* In Multi-Processor mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	9a03      	ldr	r2, [sp, #12]
 8008ab8:	6812      	ldr	r2, [r2, #0]
 8008aba:	6912      	ldr	r2, [r2, #16]
 8008abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	9a03      	ldr	r2, [sp, #12]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	6952      	ldr	r2, [r2, #20]
 8008acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ad0:	615a      	str	r2, [r3, #20]
  
  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, Address);
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	9a03      	ldr	r2, [sp, #12]
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	6912      	ldr	r2, [r2, #16]
 8008adc:	f022 010f 	bic.w	r1, r2, #15
 8008ae0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	611a      	str	r2, [r3, #16]
  
  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	9a03      	ldr	r2, [sp, #12]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	68d2      	ldr	r2, [r2, #12]
 8008af2:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8008af6:	9a01      	ldr	r2, [sp, #4]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	60da      	str	r2, [r3, #12]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	9a03      	ldr	r2, [sp, #12]
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	68d2      	ldr	r2, [r2, #12]
 8008b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b0a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	b005      	add	sp, #20
 8008b20:	f85d fb04 	ldr.w	pc, [sp], #4

08008b24 <HAL_UART_DeInit>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008b24:	b500      	push	{lr}
 8008b26:	b083      	sub	sp, #12
 8008b28:	9001      	str	r0, [sp, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008b2a:	9b01      	ldr	r3, [sp, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_UART_DeInit+0x10>
  {
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e026      	b.n	8008b82 <HAL_UART_DeInit+0x5e>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	9a01      	ldr	r2, [sp, #4]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	68d2      	ldr	r2, [r2, #12]
 8008b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b4a:	60da      	str	r2, [r3, #12]
  
  huart->Instance->CR1 = 0x0;
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2200      	movs	r2, #0
 8008b52:	60da      	str	r2, [r3, #12]
  huart->Instance->CR2 = 0x0;
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 = 0x0;
 8008b5c:	9b01      	ldr	r3, [sp, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2200      	movs	r2, #0
 8008b62:	615a      	str	r2, [r3, #20]
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b64:	9801      	ldr	r0, [sp, #4]
 8008b66:	f000 f815 	bl	8008b94 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b6a:	9b01      	ldr	r3, [sp, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State = HAL_UART_STATE_RESET;
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	b003      	add	sp, #12
 8008b86:	f85d fb04 	ldr.w	pc, [sp], #4

08008b8a <HAL_UART_MspInit>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit can be implemented in the user file
   */ 
}
 8008b8e:	bf00      	nop
 8008b90:	b002      	add	sp, #8
 8008b92:	4770      	bx	lr

08008b94 <HAL_UART_MspDeInit>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8008b94:	b082      	sub	sp, #8
 8008b96:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit can be implemented in the user file
   */ 
}
 8008b98:	bf00      	nop
 8008b9a:	b002      	add	sp, #8
 8008b9c:	4770      	bx	lr

08008b9e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b9e:	b500      	push	{lr}
 8008ba0:	b087      	sub	sp, #28
 8008ba2:	9003      	str	r0, [sp, #12]
 8008ba4:	9102      	str	r1, [sp, #8]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9305      	str	r3, [sp, #20]
  
  tmp_state = huart->State;
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	9305      	str	r3, [sp, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8008bbc:	9b05      	ldr	r3, [sp, #20]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d003      	beq.n	8008bca <HAL_UART_Transmit+0x2c>
 8008bc2:	9b05      	ldr	r3, [sp, #20]
 8008bc4:	2b22      	cmp	r3, #34	; 0x22
 8008bc6:	f040 8090 	bne.w	8008cea <HAL_UART_Transmit+0x14c>
  {
    if((pData == NULL) || (Size == 0))
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <HAL_UART_Transmit+0x3a>
 8008bd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <HAL_UART_Transmit+0x3e>
    {
      return  HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e087      	b.n	8008cec <HAL_UART_Transmit+0x14e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_UART_Transmit+0x4c>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e080      	b.n	8008cec <HAL_UART_Transmit+0x14e>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b22      	cmp	r3, #34	; 0x22
 8008c02:	d104      	bne.n	8008c0e <HAL_UART_Transmit+0x70>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	2232      	movs	r2, #50	; 0x32
 8008c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008c0c:	e003      	b.n	8008c16 <HAL_UART_Transmit+0x78>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	2212      	movs	r2, #18
 8008c12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008c24:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8008c26:	e03c      	b.n	8008ca2 <HAL_UART_Transmit+0x104>
    {
      huart->TxXferCount--;
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3c:	d11f      	bne.n	8008c7e <HAL_UART_Transmit+0xe0>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	2200      	movs	r2, #0
 8008c42:	2180      	movs	r1, #128	; 0x80
 8008c44:	9803      	ldr	r0, [sp, #12]
 8008c46:	f000 fdcf 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <HAL_UART_Transmit+0xb6>
        {
          return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e04b      	b.n	8008cec <HAL_UART_Transmit+0x14e>
        }
        tmp = (uint16_t*) pData;
 8008c54:	9b02      	ldr	r3, [sp, #8]
 8008c56:	9304      	str	r3, [sp, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	9a04      	ldr	r2, [sp, #16]
 8008c5e:	8812      	ldrh	r2, [r2, #0]
 8008c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c64:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d103      	bne.n	8008c76 <HAL_UART_Transmit+0xd8>
        {
          pData +=2;
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	3302      	adds	r3, #2
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	e015      	b.n	8008ca2 <HAL_UART_Transmit+0x104>
        }
        else
        { 
          pData +=1;
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	e011      	b.n	8008ca2 <HAL_UART_Transmit+0x104>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8008c7e:	9b00      	ldr	r3, [sp, #0]
 8008c80:	2200      	movs	r2, #0
 8008c82:	2180      	movs	r1, #128	; 0x80
 8008c84:	9803      	ldr	r0, [sp, #12]
 8008c86:	f000 fdaf 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <HAL_UART_Transmit+0xf6>
        {
          return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e02b      	b.n	8008cec <HAL_UART_Transmit+0x14e>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	1c59      	adds	r1, r3, #1
 8008c9c:	9102      	str	r1, [sp, #8]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0)
 8008ca2:	9b03      	ldr	r3, [sp, #12]
 8008ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1be      	bne.n	8008c28 <HAL_UART_Transmit+0x8a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	2200      	movs	r2, #0
 8008cae:	2140      	movs	r1, #64	; 0x40
 8008cb0:	9803      	ldr	r0, [sp, #12]
 8008cb2:	f000 fd99 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_UART_Transmit+0x122>
    { 
      return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e015      	b.n	8008cec <HAL_UART_Transmit+0x14e>
    }

    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8008cc0:	9b03      	ldr	r3, [sp, #12]
 8008cc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b32      	cmp	r3, #50	; 0x32
 8008cca:	d104      	bne.n	8008cd6 <HAL_UART_Transmit+0x138>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	2222      	movs	r2, #34	; 0x22
 8008cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008cd4:	e003      	b.n	8008cde <HAL_UART_Transmit+0x140>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008cea:	2302      	movs	r3, #2
  }
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	b007      	add	sp, #28
 8008cf0:	f85d fb04 	ldr.w	pc, [sp], #4

08008cf4 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cf4:	b500      	push	{lr}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	9003      	str	r0, [sp, #12]
 8008cfa:	9102      	str	r1, [sp, #8]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t* tmp;
  uint32_t  tmp_state = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	9305      	str	r3, [sp, #20]

  tmp_state = huart->State;
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	9305      	str	r3, [sp, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8008d12:	9b05      	ldr	r3, [sp, #20]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d003      	beq.n	8008d20 <HAL_UART_Receive+0x2c>
 8008d18:	9b05      	ldr	r3, [sp, #20]
 8008d1a:	2b12      	cmp	r3, #18
 8008d1c:	f040 80a0 	bne.w	8008e60 <HAL_UART_Receive+0x16c>
  {
    if((pData == NULL ) || (Size == 0))
 8008d20:	9b02      	ldr	r3, [sp, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d003      	beq.n	8008d2e <HAL_UART_Receive+0x3a>
 8008d26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_UART_Receive+0x3e>
    {
      return  HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e097      	b.n	8008e62 <HAL_UART_Receive+0x16e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d32:	9b03      	ldr	r3, [sp, #12]
 8008d34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_UART_Receive+0x4c>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e090      	b.n	8008e62 <HAL_UART_Receive+0x16e>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b12      	cmp	r3, #18
 8008d58:	d104      	bne.n	8008d64 <HAL_UART_Receive+0x70>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	2232      	movs	r2, #50	; 0x32
 8008d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008d62:	e003      	b.n	8008d6c <HAL_UART_Receive+0x78>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	2222      	movs	r2, #34	; 0x22
 8008d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->RxXferSize = Size;
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008d72:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008d7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0)
 8008d7c:	e057      	b.n	8008e2e <HAL_UART_Receive+0x13a>
    {
      huart->RxXferCount--;
 8008d7e:	9b03      	ldr	r3, [sp, #12]
 8008d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	9b03      	ldr	r3, [sp, #12]
 8008d88:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d92:	d129      	bne.n	8008de8 <HAL_UART_Receive+0xf4>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008d94:	9b00      	ldr	r3, [sp, #0]
 8008d96:	2200      	movs	r2, #0
 8008d98:	2120      	movs	r1, #32
 8008d9a:	9803      	ldr	r0, [sp, #12]
 8008d9c:	f000 fd24 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <HAL_UART_Receive+0xb6>
        {
          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e05b      	b.n	8008e62 <HAL_UART_Receive+0x16e>
        }
        tmp = (uint16_t*) pData ;
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	9304      	str	r3, [sp, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10c      	bne.n	8008dd0 <HAL_UART_Receive+0xdc>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	801a      	strh	r2, [r3, #0]
          pData +=2;
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	3302      	adds	r3, #2
 8008dcc:	9302      	str	r3, [sp, #8]
 8008dce:	e02e      	b.n	8008e2e <HAL_UART_Receive+0x13a>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	9b04      	ldr	r3, [sp, #16]
 8008dde:	801a      	strh	r2, [r3, #0]
          pData +=1;
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	3301      	adds	r3, #1
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	e022      	b.n	8008e2e <HAL_UART_Receive+0x13a>
        }

      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8008de8:	9b00      	ldr	r3, [sp, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	2120      	movs	r1, #32
 8008dee:	9803      	ldr	r0, [sp, #12]
 8008df0:	f000 fcfa 	bl	80097e8 <UART_WaitOnFlagUntilTimeout>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <HAL_UART_Receive+0x10a>
        {
          return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e031      	b.n	8008e62 <HAL_UART_Receive+0x16e>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d108      	bne.n	8008e18 <HAL_UART_Receive+0x124>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e06:	9b02      	ldr	r3, [sp, #8]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	9202      	str	r2, [sp, #8]
 8008e0c:	9a03      	ldr	r2, [sp, #12]
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	6852      	ldr	r2, [r2, #4]
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e00a      	b.n	8008e2e <HAL_UART_Receive+0x13a>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e18:	9b02      	ldr	r3, [sp, #8]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	9202      	str	r2, [sp, #8]
 8008e1e:	9a03      	ldr	r2, [sp, #12]
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	6852      	ldr	r2, [r2, #4]
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0)
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1a3      	bne.n	8008d7e <HAL_UART_Receive+0x8a>

      }
    }

    /* Check if a non-blocking transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b32      	cmp	r3, #50	; 0x32
 8008e40:	d104      	bne.n	8008e4c <HAL_UART_Receive+0x158>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	2212      	movs	r2, #18
 8008e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008e4a:	e003      	b.n	8008e54 <HAL_UART_Receive+0x160>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e000      	b.n	8008e62 <HAL_UART_Receive+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e60:	2302      	movs	r3, #2
  }
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	b007      	add	sp, #28
 8008e66:	f85d fb04 	ldr.w	pc, [sp], #4

08008e6a <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	9003      	str	r0, [sp, #12]
 8008e6e:	9102      	str	r1, [sp, #8]
 8008e70:	4613      	mov	r3, r2
 8008e72:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tmp_state = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	9305      	str	r3, [sp, #20]

  tmp_state = huart->State;
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	9305      	str	r3, [sp, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8008e84:	9b05      	ldr	r3, [sp, #20]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d002      	beq.n	8008e90 <HAL_UART_Transmit_IT+0x26>
 8008e8a:	9b05      	ldr	r3, [sp, #20]
 8008e8c:	2b22      	cmp	r3, #34	; 0x22
 8008e8e:	d13e      	bne.n	8008f0e <HAL_UART_Transmit_IT+0xa4>
  {
    if((pData == NULL ) || (Size == 0))
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_UART_Transmit_IT+0x34>
 8008e96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_UART_Transmit_IT+0x38>
    {
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e036      	b.n	8008f10 <HAL_UART_Transmit_IT+0xa6>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_UART_Transmit_IT+0x46>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e02f      	b.n	8008f10 <HAL_UART_Transmit_IT+0xa6>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	9a02      	ldr	r2, [sp, #8]
 8008ebc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ec6:	9b03      	ldr	r3, [sp, #12]
 8008ec8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008ecc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b22      	cmp	r3, #34	; 0x22
 8008ede:	d104      	bne.n	8008eea <HAL_UART_Transmit_IT+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	2232      	movs	r2, #50	; 0x32
 8008ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008ee8:	e003      	b.n	8008ef2 <HAL_UART_Transmit_IT+0x88>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	2212      	movs	r2, #18
 8008eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008efa:	9b03      	ldr	r3, [sp, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	9a03      	ldr	r2, [sp, #12]
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	68d2      	ldr	r2, [r2, #12]
 8008f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f08:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e000      	b.n	8008f10 <HAL_UART_Transmit_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008f0e:	2302      	movs	r3, #2
  }
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	b006      	add	sp, #24
 8008f14:	4770      	bx	lr

08008f16 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f16:	b086      	sub	sp, #24
 8008f18:	9003      	str	r0, [sp, #12]
 8008f1a:	9102      	str	r1, [sp, #8]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tmp_state = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	9305      	str	r3, [sp, #20]
  
  tmp_state = huart->State;
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	9305      	str	r3, [sp, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8008f30:	9b05      	ldr	r3, [sp, #20]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d002      	beq.n	8008f3c <HAL_UART_Receive_IT+0x26>
 8008f36:	9b05      	ldr	r3, [sp, #20]
 8008f38:	2b12      	cmp	r3, #18
 8008f3a:	d14e      	bne.n	8008fda <HAL_UART_Receive_IT+0xc4>
  {
    if((pData == NULL ) || (Size == 0))
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_UART_Receive_IT+0x34>
 8008f42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_UART_Receive_IT+0x38>
    {
      return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e046      	b.n	8008fdc <HAL_UART_Receive_IT+0xc6>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_UART_Receive_IT+0x46>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e03f      	b.n	8008fdc <HAL_UART_Receive_IT+0xc6>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	9a02      	ldr	r2, [sp, #8]
 8008f68:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008f70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008f78:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8008f80:	9b03      	ldr	r3, [sp, #12]
 8008f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b12      	cmp	r3, #18
 8008f8a:	d104      	bne.n	8008f96 <HAL_UART_Receive_IT+0x80>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	2232      	movs	r2, #50	; 0x32
 8008f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008f94:	e003      	b.n	8008f9e <HAL_UART_Receive_IT+0x88>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	2222      	movs	r2, #34	; 0x22
 8008f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	9a03      	ldr	r2, [sp, #12]
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	68d2      	ldr	r2, [r2, #12]
 8008fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fb4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008fb6:	9b03      	ldr	r3, [sp, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	9a03      	ldr	r2, [sp, #12]
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	6952      	ldr	r2, [r2, #20]
 8008fc0:	f042 0201 	orr.w	r2, r2, #1
 8008fc4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9a03      	ldr	r2, [sp, #12]
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	68d2      	ldr	r2, [r2, #12]
 8008fd0:	f042 0220 	orr.w	r2, r2, #32
 8008fd4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e000      	b.n	8008fdc <HAL_UART_Receive_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8008fda:	2302      	movs	r3, #2
  }
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	b006      	add	sp, #24
 8008fe0:	4770      	bx	lr
	...

08008fe4 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe4:	b500      	push	{lr}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	9003      	str	r0, [sp, #12]
 8008fea:	9102      	str	r1, [sp, #8]
 8008fec:	4613      	mov	r3, r2
 8008fee:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9305      	str	r3, [sp, #20]

  tmp_state = huart->State;
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	9305      	str	r3, [sp, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d002      	beq.n	800900c <HAL_UART_Transmit_DMA+0x28>
 8009006:	9b05      	ldr	r3, [sp, #20]
 8009008:	2b22      	cmp	r3, #34	; 0x22
 800900a:	d15d      	bne.n	80090c8 <HAL_UART_Transmit_DMA+0xe4>
  {
    if((pData == NULL ) || (Size == 0)) 
 800900c:	9b02      	ldr	r3, [sp, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <HAL_UART_Transmit_DMA+0x36>
 8009012:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_UART_Transmit_DMA+0x3a>
    {
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e055      	b.n	80090ca <HAL_UART_Transmit_DMA+0xe6>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_UART_Transmit_DMA+0x48>
 8009028:	2302      	movs	r3, #2
 800902a:	e04e      	b.n	80090ca <HAL_UART_Transmit_DMA+0xe6>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8009034:	9a02      	ldr	r2, [sp, #8]
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009048:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	9b03      	ldr	r3, [sp, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b22      	cmp	r3, #34	; 0x22
 800905a:	d104      	bne.n	8009066 <HAL_UART_Transmit_DMA+0x82>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	2232      	movs	r2, #50	; 0x32
 8009060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009064:	e003      	b.n	800906e <HAL_UART_Transmit_DMA+0x8a>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	2212      	movs	r2, #18
 800906a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <HAL_UART_Transmit_DMA+0xf0>)
 8009074:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <HAL_UART_Transmit_DMA+0xf4>)
 800907c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	4a16      	ldr	r2, [pc, #88]	; (80090dc <HAL_UART_Transmit_DMA+0xf8>)
 8009084:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
 8009086:	ab02      	add	r3, sp, #8
 8009088:	9304      	str	r3, [sp, #16]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800908e:	9b04      	ldr	r3, [sp, #16]
 8009090:	6819      	ldr	r1, [r3, #0]
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3304      	adds	r3, #4
 8009098:	461a      	mov	r2, r3
 800909a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800909e:	f7fb f839 	bl	8004114 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	9a03      	ldr	r2, [sp, #12]
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	6952      	ldr	r2, [r2, #20]
 80090b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090ba:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	b007      	add	sp, #28
 80090ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80090d2:	bf00      	nop
 80090d4:	080096cf 	.word	0x080096cf
 80090d8:	0800971f 	.word	0x0800971f
 80090dc:	080097af 	.word	0x080097af

080090e0 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain 
  *         the parity bit (MSB position)     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e0:	b500      	push	{lr}
 80090e2:	b087      	sub	sp, #28
 80090e4:	9003      	str	r0, [sp, #12]
 80090e6:	9102      	str	r1, [sp, #8]
 80090e8:	4613      	mov	r3, r2
 80090ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t *tmp;
  uint32_t tmp_state = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	9305      	str	r3, [sp, #20]

  tmp_state = huart->State;
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	9305      	str	r3, [sp, #20]
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d002      	beq.n	8009108 <HAL_UART_Receive_DMA+0x28>
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	2b12      	cmp	r3, #18
 8009106:	d154      	bne.n	80091b2 <HAL_UART_Receive_DMA+0xd2>
  {
    if((pData == NULL ) || (Size == 0))
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_UART_Receive_DMA+0x36>
 800910e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Receive_DMA+0x3a>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e04c      	b.n	80091b4 <HAL_UART_Receive_DMA+0xd4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_UART_Receive_DMA+0x48>
 8009124:	2302      	movs	r3, #2
 8009126:	e045      	b.n	80091b4 <HAL_UART_Receive_DMA+0xd4>
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009130:	9a02      	ldr	r2, [sp, #8]
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800913c:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b12      	cmp	r3, #18
 800914e:	d104      	bne.n	800915a <HAL_UART_Receive_DMA+0x7a>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	2232      	movs	r2, #50	; 0x32
 8009154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009158:	e003      	b.n	8009162 <HAL_UART_Receive_DMA+0x82>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	2222      	movs	r2, #34	; 0x22
 800915e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	4a15      	ldr	r2, [pc, #84]	; (80091bc <HAL_UART_Receive_DMA+0xdc>)
 8009168:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	4a14      	ldr	r2, [pc, #80]	; (80091c0 <HAL_UART_Receive_DMA+0xe0>)
 8009170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	4a13      	ldr	r2, [pc, #76]	; (80091c4 <HAL_UART_Receive_DMA+0xe4>)
 8009178:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 800917a:	ab02      	add	r3, sp, #8
 800917c:	9304      	str	r3, [sp, #16]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800917e:	9b03      	ldr	r3, [sp, #12]
 8009180:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	9b04      	ldr	r3, [sp, #16]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009192:	f7fa ffbf 	bl	8004114 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	9a03      	ldr	r2, [sp, #12]
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	6952      	ldr	r2, [r2, #20]
 80091a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091a4:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	e000      	b.n	80091b4 <HAL_UART_Receive_DMA+0xd4>
  }
  else
  {
    return HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	b007      	add	sp, #28
 80091b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80091bc:	08009739 	.word	0x08009739
 80091c0:	08009795 	.word	0x08009795
 80091c4:	080097af 	.word	0x080097af

080091c8 <HAL_UART_DMAPause>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80091c8:	b082      	sub	sp, #8
 80091ca:	9001      	str	r0, [sp, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80091cc:	9b01      	ldr	r3, [sp, #4]
 80091ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <HAL_UART_DMAPause+0x12>
 80091d6:	2302      	movs	r3, #2
 80091d8:	e03b      	b.n	8009252 <HAL_UART_DMAPause+0x8a>
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  if(huart->State == HAL_UART_STATE_BUSY_TX)
 80091e2:	9b01      	ldr	r3, [sp, #4]
 80091e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b12      	cmp	r3, #18
 80091ec:	d108      	bne.n	8009200 <HAL_UART_DMAPause+0x38>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	9a01      	ldr	r2, [sp, #4]
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	6952      	ldr	r2, [r2, #20]
 80091f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091fc:	615a      	str	r2, [r3, #20]
 80091fe:	e023      	b.n	8009248 <HAL_UART_DMAPause+0x80>
  }
  else if(huart->State == HAL_UART_STATE_BUSY_RX)
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b22      	cmp	r3, #34	; 0x22
 800920a:	d108      	bne.n	800921e <HAL_UART_DMAPause+0x56>
  {
    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800920c:	9b01      	ldr	r3, [sp, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	9a01      	ldr	r2, [sp, #4]
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	6952      	ldr	r2, [r2, #20]
 8009216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800921a:	615a      	str	r2, [r3, #20]
 800921c:	e014      	b.n	8009248 <HAL_UART_DMAPause+0x80>
  }
  else if (huart->State == HAL_UART_STATE_BUSY_TX_RX)
 800921e:	9b01      	ldr	r3, [sp, #4]
 8009220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b32      	cmp	r3, #50	; 0x32
 8009228:	d108      	bne.n	800923c <HAL_UART_DMAPause+0x74>
  {
    /* Disable the UART DMA Tx & Rx requests */
    CLEAR_BIT(huart->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
 800922a:	9b01      	ldr	r3, [sp, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	9a01      	ldr	r2, [sp, #4]
 8009230:	6812      	ldr	r2, [r2, #0]
 8009232:	6952      	ldr	r2, [r2, #20]
 8009234:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009238:	615a      	str	r2, [r3, #20]
 800923a:	e005      	b.n	8009248 <HAL_UART_DMAPause+0x80>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800923c:	9b01      	ldr	r3, [sp, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
    return HAL_ERROR; 
 8009244:	2301      	movs	r3, #1
 8009246:	e004      	b.n	8009252 <HAL_UART_DMAPause+0x8a>
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009248:	9b01      	ldr	r3, [sp, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK; 
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	b002      	add	sp, #8
 8009256:	4770      	bx	lr

08009258 <HAL_UART_DMAResume>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8009258:	b084      	sub	sp, #16
 800925a:	9001      	str	r0, [sp, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800925c:	9b01      	ldr	r3, [sp, #4]
 800925e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009262:	2b01      	cmp	r3, #1
 8009264:	d101      	bne.n	800926a <HAL_UART_DMAResume+0x12>
 8009266:	2302      	movs	r3, #2
 8009268:	e04d      	b.n	8009306 <HAL_UART_DMAResume+0xae>
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(huart->State == HAL_UART_STATE_BUSY_TX)
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b12      	cmp	r3, #18
 800927c:	d108      	bne.n	8009290 <HAL_UART_DMAResume+0x38>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	9a01      	ldr	r2, [sp, #4]
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	6952      	ldr	r2, [r2, #20]
 8009288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800928c:	615a      	str	r2, [r3, #20]
 800928e:	e035      	b.n	80092fc <HAL_UART_DMAResume+0xa4>
  }
  else if(huart->State == HAL_UART_STATE_BUSY_RX)
 8009290:	9b01      	ldr	r3, [sp, #4]
 8009292:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b22      	cmp	r3, #34	; 0x22
 800929a:	d111      	bne.n	80092c0 <HAL_UART_DMAResume+0x68>
  {
    /* Clear the Overrun flag before resumming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800929c:	9b01      	ldr	r3, [sp, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	9303      	str	r3, [sp, #12]
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	9b03      	ldr	r3, [sp, #12]
    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	9a01      	ldr	r2, [sp, #4]
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	6952      	ldr	r2, [r2, #20]
 80092b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092bc:	615a      	str	r2, [r3, #20]
 80092be:	e01d      	b.n	80092fc <HAL_UART_DMAResume+0xa4>
  }
  else if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b32      	cmp	r3, #50	; 0x32
 80092ca:	d111      	bne.n	80092f0 <HAL_UART_DMAResume+0x98>
  {
    /* Clear the Overrun flag before resumming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9302      	str	r3, [sp, #8]
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	9b02      	ldr	r3, [sp, #8]
    /* Enable the UART DMA Tx & Rx request */
    SET_BIT(huart->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	9a01      	ldr	r2, [sp, #4]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	6952      	ldr	r2, [r2, #20]
 80092e8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80092ec:	615a      	str	r2, [r3, #20]
 80092ee:	e005      	b.n	80092fc <HAL_UART_DMAResume+0xa4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092f0:	9b01      	ldr	r3, [sp, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_ERROR; 
 80092f8:	2301      	movs	r3, #1
 80092fa:	e004      	b.n	8009306 <HAL_UART_DMAResume+0xae>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	b004      	add	sp, #16
 800930a:	4770      	bx	lr

0800930c <HAL_UART_DMAStop>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800930c:	b500      	push	{lr}
 800930e:	b083      	sub	sp, #12
 8009310:	9001      	str	r0, [sp, #4]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */
  
  /* Disable the UART Tx/Rx DMA requests */
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_DMAT | USART_CR3_DMAR));
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	9a01      	ldr	r2, [sp, #4]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	6952      	ldr	r2, [r2, #20]
 800931c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009320:	615a      	str	r2, [r3, #20]
  
  /* Abort the UART DMA tx channel */
  if(huart->hdmatx != NULL)
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <HAL_UART_DMAStop+0x28>
  {
    HAL_DMA_Abort(huart->hdmatx);
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932e:	4618      	mov	r0, r3
 8009330:	f7fa ff38 	bl	80041a4 <HAL_DMA_Abort>
  }
  /* Abort the UART DMA rx channel */
  if(huart->hdmarx != NULL)
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <HAL_UART_DMAStop+0x3a>
  {
    HAL_DMA_Abort(huart->hdmarx);
 800933c:	9b01      	ldr	r3, [sp, #4]
 800933e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009340:	4618      	mov	r0, r3
 8009342:	f7fa ff2f 	bl	80041a4 <HAL_DMA_Abort>
  }
  
  huart->State = HAL_UART_STATE_READY;
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	b003      	add	sp, #12
 8009354:	f85d fb04 	ldr.w	pc, [sp], #4

08009358 <HAL_UART_IRQHandler>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009358:	b500      	push	{lr}
 800935a:	b087      	sub	sp, #28
 800935c:	9001      	str	r0, [sp, #4]
  uint32_t tmp_flag = 0, tmp_it_source = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	2300      	movs	r3, #0
 8009364:	9304      	str	r3, [sp, #16]

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b01      	cmp	r3, #1
 8009372:	bf0c      	ite	eq
 8009374:	2301      	moveq	r3, #1
 8009376:	2300      	movne	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	9305      	str	r3, [sp, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009386:	9304      	str	r3, [sp, #16]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8009388:	9b05      	ldr	r3, [sp, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <HAL_UART_IRQHandler+0x48>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d005      	beq.n	80093a0 <HAL_UART_IRQHandler+0x48>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009398:	f043 0201 	orr.w	r2, r3, #1
 800939c:	9b01      	ldr	r3, [sp, #4]
 800939e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	bf0c      	ite	eq
 80093ae:	2301      	moveq	r3, #1
 80093b0:	2300      	movne	r3, #0
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	9305      	str	r3, [sp, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	9304      	str	r3, [sp, #16]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80093c2:	9b05      	ldr	r3, [sp, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d008      	beq.n	80093da <HAL_UART_IRQHandler+0x82>
 80093c8:	9b04      	ldr	r3, [sp, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <HAL_UART_IRQHandler+0x82>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	f043 0204 	orr.w	r2, r3, #4
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	bf0c      	ite	eq
 80093e8:	2301      	moveq	r3, #1
 80093ea:	2300      	movne	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	9305      	str	r3, [sp, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80093f0:	9b05      	ldr	r3, [sp, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <HAL_UART_IRQHandler+0xb0>
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <HAL_UART_IRQHandler+0xb0>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009400:	f043 0202 	orr.w	r2, r3, #2
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0308 	and.w	r3, r3, #8
 8009412:	2b08      	cmp	r3, #8
 8009414:	bf0c      	ite	eq
 8009416:	2301      	moveq	r3, #1
 8009418:	2300      	movne	r3, #0
 800941a:	b2db      	uxtb	r3, r3
 800941c:	9305      	str	r3, [sp, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800941e:	9b05      	ldr	r3, [sp, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d008      	beq.n	8009436 <HAL_UART_IRQHandler+0xde>
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <HAL_UART_IRQHandler+0xde>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942e:	f043 0208 	orr.w	r2, r3, #8
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b20      	cmp	r3, #32
 8009442:	bf0c      	ite	eq
 8009444:	2301      	moveq	r3, #1
 8009446:	2300      	movne	r3, #0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	9305      	str	r3, [sp, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	9304      	str	r3, [sp, #16]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8009458:	9b05      	ldr	r3, [sp, #20]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <HAL_UART_IRQHandler+0x112>
 800945e:	9b04      	ldr	r3, [sp, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_UART_IRQHandler+0x112>
  { 
    UART_Receive_IT(huart);
 8009464:	9801      	ldr	r0, [sp, #4]
 8009466:	f000 fad2 	bl	8009a0e <UART_Receive_IT>
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009474:	2b80      	cmp	r3, #128	; 0x80
 8009476:	bf0c      	ite	eq
 8009478:	2301      	moveq	r3, #1
 800947a:	2300      	movne	r3, #0
 800947c:	b2db      	uxtb	r3, r3
 800947e:	9305      	str	r3, [sp, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948a:	9304      	str	r3, [sp, #16]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <HAL_UART_IRQHandler+0x146>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <HAL_UART_IRQHandler+0x146>
  {
    UART_Transmit_IT(huart);
 8009498:	9801      	ldr	r0, [sp, #4]
 800949a:	f000 fa3f 	bl	800991c <UART_Transmit_IT>
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a8:	2b40      	cmp	r3, #64	; 0x40
 80094aa:	bf0c      	ite	eq
 80094ac:	2301      	moveq	r3, #1
 80094ae:	2300      	movne	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	9305      	str	r3, [sp, #20]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80094b4:	9b01      	ldr	r3, [sp, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094be:	9304      	str	r3, [sp, #16]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80094c0:	9b05      	ldr	r3, [sp, #20]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <HAL_UART_IRQHandler+0x17a>
 80094c6:	9b04      	ldr	r3, [sp, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <HAL_UART_IRQHandler+0x17a>
  {
    UART_EndTransmit_IT(huart);
 80094cc:	9801      	ldr	r0, [sp, #4]
 80094ce:	f000 fa7c 	bl	80099ca <UART_EndTransmit_IT>
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00f      	beq.n	80094fa <HAL_UART_IRQHandler+0x1a2>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80094da:	9b01      	ldr	r3, [sp, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	9303      	str	r3, [sp, #12]
 80094ea:	9b03      	ldr	r3, [sp, #12]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 80094f4:	9801      	ldr	r0, [sp, #4]
 80094f6:	f000 f818 	bl	800952a <HAL_UART_ErrorCallback>
  }  
}
 80094fa:	bf00      	nop
 80094fc:	b007      	add	sp, #28
 80094fe:	f85d fb04 	ldr.w	pc, [sp], #4

08009502 <HAL_UART_TxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009502:	b082      	sub	sp, #8
 8009504:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback can be implemented in the user file
   */ 
}
 8009506:	bf00      	nop
 8009508:	b002      	add	sp, #8
 800950a:	4770      	bx	lr

0800950c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800950c:	b082      	sub	sp, #8
 800950e:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file
   */ 
}
 8009510:	bf00      	nop
 8009512:	b002      	add	sp, #8
 8009514:	4770      	bx	lr

08009516 <HAL_UART_RxCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009516:	b082      	sub	sp, #8
 8009518:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 800951a:	bf00      	nop
 800951c:	b002      	add	sp, #8
 800951e:	4770      	bx	lr

08009520 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009520:	b082      	sub	sp, #8
 8009522:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	b002      	add	sp, #8
 8009528:	4770      	bx	lr

0800952a <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800952a:	b082      	sub	sp, #8
 800952c:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback can be implemented in the user file
   */ 
}
 800952e:	bf00      	nop
 8009530:	b002      	add	sp, #8
 8009532:	4770      	bx	lr

08009534 <HAL_LIN_SendBreak>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8009534:	b082      	sub	sp, #8
 8009536:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <HAL_LIN_SendBreak+0x12>
 8009542:	2302      	movs	r3, #2
 8009544:	e018      	b.n	8009578 <HAL_LIN_SendBreak+0x44>
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	2202      	movs	r2, #2
 8009552:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Send break characters */
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	9a01      	ldr	r2, [sp, #4]
 800955c:	6812      	ldr	r2, [r2, #0]
 800955e:	68d2      	ldr	r2, [r2, #12]
 8009560:	f042 0201 	orr.w	r2, r2, #1
 8009564:	60da      	str	r2, [r3, #12]
 
  huart->State = HAL_UART_STATE_READY;
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	b002      	add	sp, #8
 800957c:	4770      	bx	lr

0800957e <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 800957e:	b082      	sub	sp, #8
 8009580:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 8009582:	9b01      	ldr	r3, [sp, #4]
 8009584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_MultiProcessor_EnterMuteMode+0x12>
 800958c:	2302      	movs	r3, #2
 800958e:	e018      	b.n	80095c2 <HAL_MultiProcessor_EnterMuteMode+0x44>
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80095a0:	9b01      	ldr	r3, [sp, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	9a01      	ldr	r2, [sp, #4]
 80095a6:	6812      	ldr	r2, [r2, #0]
 80095a8:	68d2      	ldr	r2, [r2, #12]
 80095aa:	f042 0202 	orr.w	r2, r2, #2
 80095ae:	60da      	str	r2, [r3, #12]
  
  huart->State = HAL_UART_STATE_READY;
 80095b0:	9b01      	ldr	r3, [sp, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	b002      	add	sp, #8
 80095c6:	4770      	bx	lr

080095c8 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80095c8:	b082      	sub	sp, #8
 80095ca:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
  
  /* Process Locked */
  __HAL_LOCK(huart);
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_MultiProcessor_ExitMuteMode+0x12>
 80095d6:	2302      	movs	r3, #2
 80095d8:	e018      	b.n	800960c <HAL_MultiProcessor_ExitMuteMode+0x44>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	2202      	movs	r2, #2
 80095e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80095ea:	9b01      	ldr	r3, [sp, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	9a01      	ldr	r2, [sp, #4]
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	68d2      	ldr	r2, [r2, #12]
 80095f4:	f022 0202 	bic.w	r2, r2, #2
 80095f8:	60da      	str	r2, [r3, #12]
  
  huart->State = HAL_UART_STATE_READY;
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	b002      	add	sp, #8
 8009610:	4770      	bx	lr

08009612 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8009612:	b082      	sub	sp, #8
 8009614:	9001      	str	r0, [sp, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009616:	9b01      	ldr	r3, [sp, #4]
 8009618:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_HalfDuplex_EnableTransmitter+0x12>
 8009620:	2302      	movs	r3, #2
 8009622:	e01a      	b.n	800965a <HAL_HalfDuplex_EnableTransmitter+0x48>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800962c:	9b01      	ldr	r3, [sp, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear TE and RE bits */
  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE), USART_CR1_TE);
 8009634:	9b01      	ldr	r3, [sp, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	9a01      	ldr	r2, [sp, #4]
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	68d2      	ldr	r2, [r2, #12]
 800963e:	f022 020c 	bic.w	r2, r2, #12
 8009642:	f042 0208 	orr.w	r2, r2, #8
 8009646:	60da      	str	r2, [r3, #12]
 
  huart->State = HAL_UART_STATE_READY;
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	b002      	add	sp, #8
 800965e:	4770      	bx	lr

08009660 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8009660:	b082      	sub	sp, #8
 8009662:	9001      	str	r0, [sp, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_HalfDuplex_EnableReceiver+0x12>
 800966e:	2302      	movs	r3, #2
 8009670:	e01a      	b.n	80096a8 <HAL_HalfDuplex_EnableReceiver+0x48>
 8009672:	9b01      	ldr	r3, [sp, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  huart->State = HAL_UART_STATE_BUSY;
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	2202      	movs	r2, #2
 800967e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Clear TE and RE bits */
  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  MODIFY_REG(huart->Instance->CR1, (uint32_t)(USART_CR1_TE | USART_CR1_RE), USART_CR1_RE);
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9a01      	ldr	r2, [sp, #4]
 8009688:	6812      	ldr	r2, [r2, #0]
 800968a:	68d2      	ldr	r2, [r2, #12]
 800968c:	f022 020c 	bic.w	r2, r2, #12
 8009690:	f042 0204 	orr.w	r2, r2, #4
 8009694:	60da      	str	r2, [r3, #12]
  
  huart->State = HAL_UART_STATE_READY;
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969e:	9b01      	ldr	r3, [sp, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK; 
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	b002      	add	sp, #8
 80096ac:	4770      	bx	lr

080096ae <HAL_UART_GetState>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80096ae:	b082      	sub	sp, #8
 80096b0:	9001      	str	r0, [sp, #4]
  return huart->State;
 80096b2:	9b01      	ldr	r3, [sp, #4]
 80096b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096b8:	b2db      	uxtb	r3, r3
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	b002      	add	sp, #8
 80096be:	4770      	bx	lr

080096c0 <HAL_UART_GetError>:
* @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *              the configuration information for the specified UART.
* @retval UART Error Code
*/
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80096c0:	b082      	sub	sp, #8
 80096c2:	9001      	str	r0, [sp, #4]
  return huart->ErrorCode;
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	b002      	add	sp, #8
 80096cc:	4770      	bx	lr

080096ce <UART_DMATransmitCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80096ce:	b500      	push	{lr}
 80096d0:	b085      	sub	sp, #20
 80096d2:	9001      	str	r0, [sp, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	9303      	str	r3, [sp, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80096da:	9b01      	ldr	r3, [sp, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0320 	and.w	r3, r3, #32
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d113      	bne.n	8009710 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0;
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9a03      	ldr	r2, [sp, #12]
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	6952      	ldr	r2, [r2, #20]
 80096f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */    
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	9a03      	ldr	r2, [sp, #12]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	68d2      	ldr	r2, [r2, #12]
 8009708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800970c:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800970e:	e002      	b.n	8009716 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8009710:	9803      	ldr	r0, [sp, #12]
 8009712:	f7ff fef6 	bl	8009502 <HAL_UART_TxCpltCallback>
}
 8009716:	bf00      	nop
 8009718:	b005      	add	sp, #20
 800971a:	f85d fb04 	ldr.w	pc, [sp], #4

0800971e <UART_DMATxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800971e:	b500      	push	{lr}
 8009720:	b085      	sub	sp, #20
 8009722:	9001      	str	r0, [sp, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	9303      	str	r3, [sp, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800972a:	9803      	ldr	r0, [sp, #12]
 800972c:	f7ff feee 	bl	800950c <HAL_UART_TxHalfCpltCallback>
}
 8009730:	bf00      	nop
 8009732:	b005      	add	sp, #20
 8009734:	f85d fb04 	ldr.w	pc, [sp], #4

08009738 <UART_DMAReceiveCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8009738:	b500      	push	{lr}
 800973a:	b085      	sub	sp, #20
 800973c:	9001      	str	r0, [sp, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	9303      	str	r3, [sp, #12]
  /* DMA Normal mode*/
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d119      	bne.n	8009786 <UART_DMAReceiveCplt+0x4e>
  {
    huart->RxXferCount = 0;
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	9a03      	ldr	r2, [sp, #12]
 800975e:	6812      	ldr	r2, [r2, #0]
 8009760:	6952      	ldr	r2, [r2, #20]
 8009762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009766:	615a      	str	r2, [r3, #20]

    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b32      	cmp	r3, #50	; 0x32
 8009772:	d104      	bne.n	800977e <UART_DMAReceiveCplt+0x46>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	2212      	movs	r2, #18
 8009778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800977c:	e003      	b.n	8009786 <UART_DMAReceiveCplt+0x4e>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }
  HAL_UART_RxCpltCallback(huart);
 8009786:	9803      	ldr	r0, [sp, #12]
 8009788:	f7ff fec5 	bl	8009516 <HAL_UART_RxCpltCallback>
}
 800978c:	bf00      	nop
 800978e:	b005      	add	sp, #20
 8009790:	f85d fb04 	ldr.w	pc, [sp], #4

08009794 <UART_DMARxHalfCplt>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009794:	b500      	push	{lr}
 8009796:	b085      	sub	sp, #20
 8009798:	9001      	str	r0, [sp, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	9303      	str	r3, [sp, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 80097a0:	9803      	ldr	r0, [sp, #12]
 80097a2:	f7ff febd 	bl	8009520 <HAL_UART_RxHalfCpltCallback>
}
 80097a6:	bf00      	nop
 80097a8:	b005      	add	sp, #20
 80097aa:	f85d fb04 	ldr.w	pc, [sp], #4

080097ae <UART_DMAError>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)   
{
 80097ae:	b500      	push	{lr}
 80097b0:	b085      	sub	sp, #20
 80097b2:	9001      	str	r0, [sp, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	9303      	str	r3, [sp, #12]
  huart->RxXferCount = 0;
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0;
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->State= HAL_UART_STATE_READY;
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	f043 0210 	orr.w	r2, r3, #16
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80097da:	9803      	ldr	r0, [sp, #12]
 80097dc:	f7ff fea5 	bl	800952a <HAL_UART_ErrorCallback>
}
 80097e0:	bf00      	nop
 80097e2:	b005      	add	sp, #20
 80097e4:	f85d fb04 	ldr.w	pc, [sp], #4

080097e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80097e8:	b500      	push	{lr}
 80097ea:	b087      	sub	sp, #28
 80097ec:	9003      	str	r0, [sp, #12]
 80097ee:	9102      	str	r1, [sp, #8]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	4613      	mov	r3, r2
 80097f4:	f88d 3007 	strb.w	r3, [sp, #7]
  uint32_t tickstart = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	9305      	str	r3, [sp, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80097fc:	f7fa f83e 	bl	800387c <HAL_GetTick>
 8009800:	9005      	str	r0, [sp, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8009802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d17b      	bne.n	8009902 <UART_WaitOnFlagUntilTimeout+0x11a>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800980a:	e038      	b.n	800987e <UART_WaitOnFlagUntilTimeout+0x96>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800980c:	9b00      	ldr	r3, [sp, #0]
 800980e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009812:	d034      	beq.n	800987e <UART_WaitOnFlagUntilTimeout+0x96>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8009814:	9b00      	ldr	r3, [sp, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d007      	beq.n	800982a <UART_WaitOnFlagUntilTimeout+0x42>
 800981a:	f7fa f82f 	bl	800387c <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	9b00      	ldr	r3, [sp, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d929      	bls.n	800987e <UART_WaitOnFlagUntilTimeout+0x96>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	9a03      	ldr	r2, [sp, #12]
 8009830:	6812      	ldr	r2, [r2, #0]
 8009832:	68d2      	ldr	r2, [r2, #12]
 8009834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009838:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	9a03      	ldr	r2, [sp, #12]
 8009840:	6812      	ldr	r2, [r2, #0]
 8009842:	68d2      	ldr	r2, [r2, #12]
 8009844:	f022 0220 	bic.w	r2, r2, #32
 8009848:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	9a03      	ldr	r2, [sp, #12]
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	68d2      	ldr	r2, [r2, #12]
 8009854:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009858:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	9a03      	ldr	r2, [sp, #12]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	6952      	ldr	r2, [r2, #20]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e04a      	b.n	8009914 <UART_WaitOnFlagUntilTimeout+0x12c>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	9b02      	ldr	r3, [sp, #8]
 8009886:	401a      	ands	r2, r3
 8009888:	9b02      	ldr	r3, [sp, #8]
 800988a:	429a      	cmp	r2, r3
 800988c:	d1be      	bne.n	800980c <UART_WaitOnFlagUntilTimeout+0x24>
 800988e:	e040      	b.n	8009912 <UART_WaitOnFlagUntilTimeout+0x12a>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009896:	d034      	beq.n	8009902 <UART_WaitOnFlagUntilTimeout+0x11a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8009898:	9b00      	ldr	r3, [sp, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <UART_WaitOnFlagUntilTimeout+0xc6>
 800989e:	f7f9 ffed 	bl	800387c <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	9b05      	ldr	r3, [sp, #20]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	9b00      	ldr	r3, [sp, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d929      	bls.n	8009902 <UART_WaitOnFlagUntilTimeout+0x11a>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	9a03      	ldr	r2, [sp, #12]
 80098b4:	6812      	ldr	r2, [r2, #0]
 80098b6:	68d2      	ldr	r2, [r2, #12]
 80098b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098bc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098be:	9b03      	ldr	r3, [sp, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	9a03      	ldr	r2, [sp, #12]
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	68d2      	ldr	r2, [r2, #12]
 80098c8:	f022 0220 	bic.w	r2, r2, #32
 80098cc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	9a03      	ldr	r2, [sp, #12]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	68d2      	ldr	r2, [r2, #12]
 80098d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098dc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	9a03      	ldr	r2, [sp, #12]
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	6952      	ldr	r2, [r2, #20]
 80098e8:	f022 0201 	bic.w	r2, r2, #1
 80098ec:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e008      	b.n	8009914 <UART_WaitOnFlagUntilTimeout+0x12c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	9b02      	ldr	r3, [sp, #8]
 800990a:	401a      	ands	r2, r3
 800990c:	9b02      	ldr	r3, [sp, #8]
 800990e:	429a      	cmp	r2, r3
 8009910:	d0be      	beq.n	8009890 <UART_WaitOnFlagUntilTimeout+0xa8>
        }
      }
    }
  }
  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	b007      	add	sp, #28
 8009918:	f85d fb04 	ldr.w	pc, [sp], #4

0800991c <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800991c:	b084      	sub	sp, #16
 800991e:	9001      	str	r0, [sp, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	9303      	str	r3, [sp, #12]
  
  tmp_state = huart->State;
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800992a:	b2db      	uxtb	r3, r3
 800992c:	9303      	str	r3, [sp, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	2b12      	cmp	r3, #18
 8009932:	d002      	beq.n	800993a <UART_Transmit_IT+0x1e>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	2b32      	cmp	r3, #50	; 0x32
 8009938:	d143      	bne.n	80099c2 <UART_Transmit_IT+0xa6>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009942:	d119      	bne.n	8009978 <UART_Transmit_IT+0x5c>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8009944:	9b01      	ldr	r3, [sp, #4]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	9302      	str	r3, [sp, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800994a:	9b01      	ldr	r3, [sp, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	9a02      	ldr	r2, [sp, #8]
 8009950:	8812      	ldrh	r2, [r2, #0]
 8009952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009956:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <UART_Transmit_IT+0x50>
      {
        huart->pTxBuffPtr += 2;
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	1c9a      	adds	r2, r3, #2
 8009966:	9b01      	ldr	r3, [sp, #4]
 8009968:	621a      	str	r2, [r3, #32]
 800996a:	e00e      	b.n	800998a <UART_Transmit_IT+0x6e>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	621a      	str	r2, [r3, #32]
 8009976:	e008      	b.n	800998a <UART_Transmit_IT+0x6e>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	1c58      	adds	r0, r3, #1
 8009982:	9901      	ldr	r1, [sp, #4]
 8009984:	6208      	str	r0, [r1, #32]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0)
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	9b01      	ldr	r3, [sp, #4]
 8009994:	84da      	strh	r2, [r3, #38]	; 0x26
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10f      	bne.n	80099be <UART_Transmit_IT+0xa2>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	9a01      	ldr	r2, [sp, #4]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	68d2      	ldr	r2, [r2, #12]
 80099a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	6812      	ldr	r2, [r2, #0]
 80099b6:	68d2      	ldr	r2, [r2, #12]
 80099b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	e000      	b.n	80099c4 <UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80099c2:	2302      	movs	r3, #2
  }
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	b004      	add	sp, #16
 80099c8:	4770      	bx	lr

080099ca <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099ca:	b500      	push	{lr}
 80099cc:	b083      	sub	sp, #12
 80099ce:	9001      	str	r0, [sp, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	9a01      	ldr	r2, [sp, #4]
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	68d2      	ldr	r2, [r2, #12]
 80099da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099de:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b32      	cmp	r3, #50	; 0x32
 80099ea:	d104      	bne.n	80099f6 <UART_EndTransmit_IT+0x2c>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80099ec:	9b01      	ldr	r3, [sp, #4]
 80099ee:	2222      	movs	r2, #34	; 0x22
 80099f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80099f4:	e003      	b.n	80099fe <UART_EndTransmit_IT+0x34>
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80099f6:	9b01      	ldr	r3, [sp, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80099fe:	9801      	ldr	r0, [sp, #4]
 8009a00:	f7ff fd7f 	bl	8009502 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	b003      	add	sp, #12
 8009a0a:	f85d fb04 	ldr.w	pc, [sp], #4

08009a0e <UART_Receive_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a0e:	b500      	push	{lr}
 8009a10:	b085      	sub	sp, #20
 8009a12:	9001      	str	r0, [sp, #4]
  uint16_t* tmp;
  uint32_t tmp_state = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	9303      	str	r3, [sp, #12]
  
  tmp_state = huart->State; 
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	9303      	str	r3, [sp, #12]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	2b22      	cmp	r3, #34	; 0x22
 8009a26:	d002      	beq.n	8009a2e <UART_Receive_IT+0x20>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	2b32      	cmp	r3, #50	; 0x32
 8009a2c:	d17c      	bne.n	8009b28 <UART_Receive_IT+0x11a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009a2e:	9b01      	ldr	r3, [sp, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a36:	d123      	bne.n	8009a80 <UART_Receive_IT+0x72>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	9302      	str	r3, [sp, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009a3e:	9b01      	ldr	r3, [sp, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10e      	bne.n	8009a64 <UART_Receive_IT+0x56>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	9b02      	ldr	r3, [sp, #8]
 8009a56:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5c:	1c9a      	adds	r2, r3, #2
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	629a      	str	r2, [r3, #40]	; 0x28
 8009a62:	e029      	b.n	8009ab8 <UART_Receive_IT+0xaa>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	9b02      	ldr	r3, [sp, #8]
 8009a72:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	9b01      	ldr	r3, [sp, #4]
 8009a7c:	629a      	str	r2, [r3, #40]	; 0x28
 8009a7e:	e01b      	b.n	8009ab8 <UART_Receive_IT+0xaa>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <UART_Receive_IT+0x90>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	1c59      	adds	r1, r3, #1
 8009a8e:	9a01      	ldr	r2, [sp, #4]
 8009a90:	6291      	str	r1, [r2, #40]	; 0x28
 8009a92:	9a01      	ldr	r2, [sp, #4]
 8009a94:	6812      	ldr	r2, [r2, #0]
 8009a96:	6852      	ldr	r2, [r2, #4]
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	e00c      	b.n	8009ab8 <UART_Receive_IT+0xaa>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	1c59      	adds	r1, r3, #1
 8009aa4:	9a01      	ldr	r2, [sp, #4]
 8009aa6:	6291      	str	r1, [r2, #40]	; 0x28
 8009aa8:	9a01      	ldr	r2, [sp, #4]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	6852      	ldr	r2, [r2, #4]
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8009ab8:	9b01      	ldr	r3, [sp, #4]
 8009aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009abc:	3b01      	subs	r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d12b      	bne.n	8009b24 <UART_Receive_IT+0x116>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009acc:	9b01      	ldr	r3, [sp, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	68d2      	ldr	r2, [r2, #12]
 8009ad6:	f022 0220 	bic.w	r2, r2, #32
 8009ada:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b32      	cmp	r3, #50	; 0x32
 8009ae6:	d104      	bne.n	8009af2 <UART_Receive_IT+0xe4>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	2212      	movs	r2, #18
 8009aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009af0:	e013      	b.n	8009b1a <UART_Receive_IT+0x10c>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	9a01      	ldr	r2, [sp, #4]
 8009af8:	6812      	ldr	r2, [r2, #0]
 8009afa:	68d2      	ldr	r2, [r2, #12]
 8009afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b02:	9b01      	ldr	r3, [sp, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	9a01      	ldr	r2, [sp, #4]
 8009b08:	6812      	ldr	r2, [r2, #0]
 8009b0a:	6952      	ldr	r2, [r2, #20]
 8009b0c:	f022 0201 	bic.w	r2, r2, #1
 8009b10:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8009b1a:	9801      	ldr	r0, [sp, #4]
 8009b1c:	f7ff fcfb 	bl	8009516 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	e002      	b.n	8009b2a <UART_Receive_IT+0x11c>
    }
    return HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	e000      	b.n	8009b2a <UART_Receive_IT+0x11c>
  }
  else
  {
    return HAL_BUSY; 
 8009b28:	2302      	movs	r3, #2
  }
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	b005      	add	sp, #20
 8009b2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009b34 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0x00;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9303      	str	r3, [sp, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9a01      	ldr	r2, [sp, #4]
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	6912      	ldr	r2, [r2, #16]
 8009b48:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8009b4c:	9a01      	ldr	r2, [sp, #4]
 8009b4e:	68d2      	ldr	r2, [r2, #12]
 8009b50:	430a      	orrs	r2, r1
 8009b52:	611a      	str	r2, [r3, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	9303      	str	r3, [sp, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	9b01      	ldr	r3, [sp, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009b74:	f023 030c 	bic.w	r3, r3, #12
 8009b78:	9903      	ldr	r1, [sp, #12]
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b7e:	9b01      	ldr	r3, [sp, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	6952      	ldr	r2, [r2, #20]
 8009b88:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	6992      	ldr	r2, [r2, #24]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	615a      	str	r2, [r3, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8009b94:	9b01      	ldr	r3, [sp, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a6e      	ldr	r2, [pc, #440]	; (8009d54 <UART_SetConfig+0x220>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d16b      	bne.n	8009c76 <UART_SetConfig+0x142>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	681c      	ldr	r4, [r3, #0]
 8009ba2:	f7fe fb97 	bl	80082d4 <HAL_RCC_GetPCLK2Freq>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	4613      	mov	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	009a      	lsls	r2, r3, #2
 8009bb0:	441a      	add	r2, r3
 8009bb2:	9b01      	ldr	r3, [sp, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bbc:	4a66      	ldr	r2, [pc, #408]	; (8009d58 <UART_SetConfig+0x224>)
 8009bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc2:	095b      	lsrs	r3, r3, #5
 8009bc4:	011d      	lsls	r5, r3, #4
 8009bc6:	f7fe fb85 	bl	80082d4 <HAL_RCC_GetPCLK2Freq>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	4613      	mov	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	009a      	lsls	r2, r3, #2
 8009bd4:	441a      	add	r2, r3
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009be0:	f7fe fb78 	bl	80082d4 <HAL_RCC_GetPCLK2Freq>
 8009be4:	4602      	mov	r2, r0
 8009be6:	4613      	mov	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	4413      	add	r3, r2
 8009bec:	009a      	lsls	r2, r3, #2
 8009bee:	441a      	add	r2, r3
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfa:	4a57      	ldr	r2, [pc, #348]	; (8009d58 <UART_SetConfig+0x224>)
 8009bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009c00:	095b      	lsrs	r3, r3, #5
 8009c02:	2264      	movs	r2, #100	; 0x64
 8009c04:	fb02 f303 	mul.w	r3, r2, r3
 8009c08:	1af3      	subs	r3, r6, r3
 8009c0a:	011b      	lsls	r3, r3, #4
 8009c0c:	3332      	adds	r3, #50	; 0x32
 8009c0e:	4a52      	ldr	r2, [pc, #328]	; (8009d58 <UART_SetConfig+0x224>)
 8009c10:	fba2 2303 	umull	r2, r3, r2, r3
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c1a:	441d      	add	r5, r3
 8009c1c:	f7fe fb5a 	bl	80082d4 <HAL_RCC_GetPCLK2Freq>
 8009c20:	4602      	mov	r2, r0
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009a      	lsls	r2, r3, #2
 8009c2a:	441a      	add	r2, r3
 8009c2c:	9b01      	ldr	r3, [sp, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c36:	f7fe fb4d 	bl	80082d4 <HAL_RCC_GetPCLK2Freq>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009a      	lsls	r2, r3, #2
 8009c44:	441a      	add	r2, r3
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c50:	4a41      	ldr	r2, [pc, #260]	; (8009d58 <UART_SetConfig+0x224>)
 8009c52:	fba2 2303 	umull	r2, r3, r2, r3
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	2264      	movs	r2, #100	; 0x64
 8009c5a:	fb02 f303 	mul.w	r3, r2, r3
 8009c5e:	1af3      	subs	r3, r6, r3
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	3332      	adds	r3, #50	; 0x32
 8009c64:	4a3c      	ldr	r2, [pc, #240]	; (8009d58 <UART_SetConfig+0x224>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	442b      	add	r3, r5
 8009c72:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
}
 8009c74:	e06a      	b.n	8009d4c <UART_SetConfig+0x218>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009c76:	9b01      	ldr	r3, [sp, #4]
 8009c78:	681c      	ldr	r4, [r3, #0]
 8009c7a:	f7fe fb09 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	009a      	lsls	r2, r3, #2
 8009c88:	441a      	add	r2, r3
 8009c8a:	9b01      	ldr	r3, [sp, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	4a30      	ldr	r2, [pc, #192]	; (8009d58 <UART_SetConfig+0x224>)
 8009c96:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	011d      	lsls	r5, r3, #4
 8009c9e:	f7fe faf7 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	009a      	lsls	r2, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	9b01      	ldr	r3, [sp, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cb8:	f7fe faea 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009a      	lsls	r2, r3, #2
 8009cc6:	441a      	add	r2, r3
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd2:	4a21      	ldr	r2, [pc, #132]	; (8009d58 <UART_SetConfig+0x224>)
 8009cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	2264      	movs	r2, #100	; 0x64
 8009cdc:	fb02 f303 	mul.w	r3, r2, r3
 8009ce0:	1af3      	subs	r3, r6, r3
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	3332      	adds	r3, #50	; 0x32
 8009ce6:	4a1c      	ldr	r2, [pc, #112]	; (8009d58 <UART_SetConfig+0x224>)
 8009ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cec:	095b      	lsrs	r3, r3, #5
 8009cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf2:	441d      	add	r5, r3
 8009cf4:	f7fe facc 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009a      	lsls	r2, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	9b01      	ldr	r3, [sp, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d0e:	f7fe fabf 	bl	8008290 <HAL_RCC_GetPCLK1Freq>
 8009d12:	4602      	mov	r2, r0
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009a      	lsls	r2, r3, #2
 8009d1c:	441a      	add	r2, r3
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d28:	4a0b      	ldr	r2, [pc, #44]	; (8009d58 <UART_SetConfig+0x224>)
 8009d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	2264      	movs	r2, #100	; 0x64
 8009d32:	fb02 f303 	mul.w	r3, r2, r3
 8009d36:	1af3      	subs	r3, r6, r3
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	3332      	adds	r3, #50	; 0x32
 8009d3c:	4a06      	ldr	r2, [pc, #24]	; (8009d58 <UART_SetConfig+0x224>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f003 030f 	and.w	r3, r3, #15
 8009d48:	442b      	add	r3, r5
 8009d4a:	60a3      	str	r3, [r4, #8]
}
 8009d4c:	bf00      	nop
 8009d4e:	b004      	add	sp, #16
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
 8009d52:	bf00      	nop
 8009d54:	40013800 	.word	0x40013800
 8009d58:	51eb851f 	.word	0x51eb851f

08009d5c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	b082      	sub	sp, #8
 8009d60:	9001      	str	r0, [sp, #4]
 8009d62:	a803      	add	r0, sp, #12
 8009d64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	b002      	add	sp, #8
 8009d6e:	b004      	add	sp, #16
 8009d70:	4770      	bx	lr

08009d72 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009d72:	b084      	sub	sp, #16
 8009d74:	9001      	str	r0, [sp, #4]
  uint32_t winterruptmask = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	9303      	str	r3, [sp, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8009d7a:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8009d7e:	9303      	str	r3, [sp, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8009d80:	9b01      	ldr	r3, [sp, #4]
 8009d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	9b03      	ldr	r3, [sp, #12]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	b004      	add	sp, #16
 8009d9c:	4770      	bx	lr

08009d9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d9e:	b084      	sub	sp, #16
 8009da0:	9001      	str	r0, [sp, #4]
  uint32_t winterruptmask = 0;
 8009da2:	2300      	movs	r3, #0
 8009da4:	9303      	str	r3, [sp, #12]
  
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8009da6:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8009daa:	9303      	str	r3, [sp, #12]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	43db      	mvns	r3, r3
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	9b01      	ldr	r3, [sp, #4]
 8009dc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	b004      	add	sp, #16
 8009dcc:	4770      	bx	lr

08009dce <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx , USB_ModeTypeDef mode)
{
 8009dce:	b082      	sub	sp, #8
 8009dd0:	9001      	str	r0, [sp, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	f88d 3003 	strb.w	r3, [sp, #3]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	b002      	add	sp, #8
 8009dde:	4770      	bx	lr

08009de0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8009de0:	b084      	sub	sp, #16
 8009de2:	b082      	sub	sp, #8
 8009de4:	9001      	str	r0, [sp, #4]
 8009de6:	a803      	add	r0, sp, #12
 8009de8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8009df4:	9b01      	ldr	r3, [sp, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    
  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	b002      	add	sp, #8
 8009e12:	b004      	add	sp, #16
 8009e14:	4770      	bx	lr

08009e16 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_TypeDef *USBx, uint32_t num )
{
 8009e16:	b082      	sub	sp, #8
 8009e18:	9001      	str	r0, [sp, #4]
 8009e1a:	9100      	str	r1, [sp, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	b002      	add	sp, #8
 8009e22:	4770      	bx	lr

08009e24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8009e24:	b082      	sub	sp, #8
 8009e26:	9001      	str	r0, [sp, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	b002      	add	sp, #8
 8009e2e:	4770      	bx	lr

08009e30 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e30:	b410      	push	{r4}
 8009e32:	b085      	sub	sp, #20
 8009e34:	9001      	str	r0, [sp, #4]
 8009e36:	9100      	str	r1, [sp, #0]
  /* initialize Endpoint */
  switch (ep->type)
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	78db      	ldrb	r3, [r3, #3]
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d860      	bhi.n	8009f02 <USB_ActivateEndpoint+0xd2>
 8009e40:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <USB_ActivateEndpoint+0x18>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e59 	.word	0x08009e59
 8009e4c:	08009ed7 	.word	0x08009ed7
 8009e50:	08009e85 	.word	0x08009e85
 8009e54:	08009eab 	.word	0x08009eab
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8009e58:	9b01      	ldr	r3, [sp, #4]
 8009e5a:	9a00      	ldr	r2, [sp, #0]
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	441a      	add	r2, r3
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	9900      	ldr	r1, [sp, #0]
 8009e66:	7809      	ldrb	r1, [r1, #0]
 8009e68:	0089      	lsls	r1, r1, #2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	8013      	strh	r3, [r2, #0]
    break;
 8009e82:	e03f      	b.n	8009f04 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_BULK:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	9a00      	ldr	r2, [sp, #0]
 8009e88:	7812      	ldrb	r2, [r2, #0]
 8009e8a:	0092      	lsls	r2, r2, #2
 8009e8c:	441a      	add	r2, r3
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	9900      	ldr	r1, [sp, #0]
 8009e92:	7809      	ldrb	r1, [r1, #0]
 8009e94:	0089      	lsls	r1, r1, #2
 8009e96:	440b      	add	r3, r1
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	8013      	strh	r3, [r2, #0]
    break;
 8009ea8:	e02c      	b.n	8009f04 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8009eaa:	9b01      	ldr	r3, [sp, #4]
 8009eac:	9a00      	ldr	r2, [sp, #0]
 8009eae:	7812      	ldrb	r2, [r2, #0]
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	441a      	add	r2, r3
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	9900      	ldr	r1, [sp, #0]
 8009eb8:	7809      	ldrb	r1, [r1, #0]
 8009eba:	0089      	lsls	r1, r1, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	8013      	strh	r3, [r2, #0]
    break;
 8009ed4:	e016      	b.n	8009f04 <USB_ActivateEndpoint+0xd4>
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8009ed6:	9b01      	ldr	r3, [sp, #4]
 8009ed8:	9a00      	ldr	r2, [sp, #0]
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	0092      	lsls	r2, r2, #2
 8009ede:	441a      	add	r2, r3
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	9900      	ldr	r1, [sp, #0]
 8009ee4:	7809      	ldrb	r1, [r1, #0]
 8009ee6:	0089      	lsls	r1, r1, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	8013      	strh	r3, [r2, #0]
    break;
 8009f00:	e000      	b.n	8009f04 <USB_ActivateEndpoint+0xd4>
  default:
      break;
 8009f02:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009f04:	9b01      	ldr	r3, [sp, #4]
 8009f06:	9a00      	ldr	r2, [sp, #0]
 8009f08:	7812      	ldrb	r2, [r2, #0]
 8009f0a:	0092      	lsls	r2, r2, #2
 8009f0c:	441a      	add	r2, r3
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	9900      	ldr	r1, [sp, #0]
 8009f12:	7809      	ldrb	r1, [r1, #0]
 8009f14:	0089      	lsls	r1, r1, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b299      	uxth	r1, r3
 8009f1c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8009f20:	400b      	ands	r3, r1
 8009f22:	b299      	uxth	r1, r3
 8009f24:	9b00      	ldr	r3, [sp, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	430b      	orrs	r3, r1
 8009f2c:	b299      	uxth	r1, r3
 8009f2e:	4b7b      	ldr	r3, [pc, #492]	; (800a11c <USB_ActivateEndpoint+0x2ec>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8009f36:	9b00      	ldr	r3, [sp, #0]
 8009f38:	7a9b      	ldrb	r3, [r3, #10]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f040 80f4 	bne.w	800a128 <USB_ActivateEndpoint+0x2f8>
  {
    if (ep->is_in)
 8009f40:	9b00      	ldr	r3, [sp, #0]
 8009f42:	785b      	ldrb	r3, [r3, #1]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d04d      	beq.n	8009fe4 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	9b00      	ldr	r3, [sp, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4413      	add	r3, r2
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f66:	461a      	mov	r2, r3
 8009f68:	9b00      	ldr	r3, [sp, #0]
 8009f6a:	889b      	ldrh	r3, [r3, #4]
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f74:	9b01      	ldr	r3, [sp, #4]
 8009f76:	9a00      	ldr	r2, [sp, #0]
 8009f78:	7812      	ldrb	r2, [r2, #0]
 8009f7a:	0092      	lsls	r2, r2, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d013      	beq.n	8009fb2 <USB_ActivateEndpoint+0x182>
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	9a00      	ldr	r2, [sp, #0]
 8009f8e:	7812      	ldrb	r2, [r2, #0]
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	441a      	add	r2, r3
 8009f94:	9b01      	ldr	r3, [sp, #4]
 8009f96:	9900      	ldr	r1, [sp, #0]
 8009f98:	7809      	ldrb	r1, [r1, #0]
 8009f9a:	0089      	lsls	r1, r1, #2
 8009f9c:	440b      	add	r3, r1
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	b299      	uxth	r1, r3
 8009fa2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8009fa6:	400b      	ands	r3, r1
 8009fa8:	b299      	uxth	r1, r3
 8009faa:	4b5d      	ldr	r3, [pc, #372]	; (800a120 <USB_ActivateEndpoint+0x2f0>)
 8009fac:	430b      	orrs	r3, r1
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	9a00      	ldr	r2, [sp, #0]
 8009fb6:	7812      	ldrb	r2, [r2, #0]
 8009fb8:	0092      	lsls	r2, r2, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fc8:	b29c      	uxth	r4, r3
 8009fca:	f084 0320 	eor.w	r3, r4, #32
 8009fce:	b29c      	uxth	r4, r3
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	9a00      	ldr	r2, [sp, #0]
 8009fd4:	7812      	ldrb	r2, [r2, #0]
 8009fd6:	0092      	lsls	r2, r2, #2
 8009fd8:	441a      	add	r2, r3
 8009fda:	4b50      	ldr	r3, [pc, #320]	; (800a11c <USB_ActivateEndpoint+0x2ec>)
 8009fdc:	4323      	orrs	r3, r4
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	8013      	strh	r3, [r2, #0]
 8009fe2:	e1e6      	b.n	800a3b2 <USB_ActivateEndpoint+0x582>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	461a      	mov	r2, r3
 8009fee:	9b00      	ldr	r3, [sp, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	4413      	add	r3, r2
 8009ff6:	3304      	adds	r3, #4
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a004:	461a      	mov	r2, r3
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	889b      	ldrh	r3, [r3, #4]
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a018:	b29b      	uxth	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	9b00      	ldr	r3, [sp, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	00db      	lsls	r3, r3, #3
 800a022:	4413      	add	r3, r2
 800a024:	3306      	adds	r3, #6
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	461a      	mov	r2, r3
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	9b00      	ldr	r3, [sp, #0]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	2b3e      	cmp	r3, #62	; 0x3e
 800a03a:	d91c      	bls.n	800a076 <USB_ActivateEndpoint+0x246>
 800a03c:	9b00      	ldr	r3, [sp, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	095b      	lsrs	r3, r3, #5
 800a042:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a046:	9b00      	ldr	r3, [sp, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 031f 	and.w	r3, r3, #31
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d104      	bne.n	800a05c <USB_ActivateEndpoint+0x22c>
 800a052:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a056:	3b01      	subs	r3, #1
 800a058:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a05c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a060:	029b      	lsls	r3, r3, #10
 800a062:	b29b      	uxth	r3, r3
 800a064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	461a      	mov	r2, r3
 800a070:	9b02      	ldr	r3, [sp, #8]
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	e016      	b.n	800a0a4 <USB_ActivateEndpoint+0x274>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	085b      	lsrs	r3, r3, #1
 800a07c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a080:	9b00      	ldr	r3, [sp, #0]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d004      	beq.n	800a096 <USB_ActivateEndpoint+0x266>
 800a08c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a090:	3301      	adds	r3, #1
 800a092:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a096:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a09a:	029b      	lsls	r3, r3, #10
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	461a      	mov	r2, r3
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	9a00      	ldr	r2, [sp, #0]
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d013      	beq.n	800a0e2 <USB_ActivateEndpoint+0x2b2>
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	9a00      	ldr	r2, [sp, #0]
 800a0be:	7812      	ldrb	r2, [r2, #0]
 800a0c0:	0092      	lsls	r2, r2, #2
 800a0c2:	441a      	add	r2, r3
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	9900      	ldr	r1, [sp, #0]
 800a0c8:	7809      	ldrb	r1, [r1, #0]
 800a0ca:	0089      	lsls	r1, r1, #2
 800a0cc:	440b      	add	r3, r1
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a0d6:	400b      	ands	r3, r1
 800a0d8:	b299      	uxth	r1, r3
 800a0da:	4b12      	ldr	r3, [pc, #72]	; (800a124 <USB_ActivateEndpoint+0x2f4>)
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0e2:	9b01      	ldr	r3, [sp, #4]
 800a0e4:	9a00      	ldr	r2, [sp, #0]
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	0092      	lsls	r2, r2, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f8:	b29c      	uxth	r4, r3
 800a0fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a0fe:	b29c      	uxth	r4, r3
 800a100:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a104:	b29c      	uxth	r4, r3
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	9a00      	ldr	r2, [sp, #0]
 800a10a:	7812      	ldrb	r2, [r2, #0]
 800a10c:	0092      	lsls	r2, r2, #2
 800a10e:	441a      	add	r2, r3
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <USB_ActivateEndpoint+0x2ec>)
 800a112:	4323      	orrs	r3, r4
 800a114:	b29b      	uxth	r3, r3
 800a116:	8013      	strh	r3, [r2, #0]
 800a118:	e14b      	b.n	800a3b2 <USB_ActivateEndpoint+0x582>
 800a11a:	bf00      	nop
 800a11c:	ffff8080 	.word	0xffff8080
 800a120:	ffff80c0 	.word	0xffff80c0
 800a124:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	9a00      	ldr	r2, [sp, #0]
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	0092      	lsls	r2, r2, #2
 800a130:	441a      	add	r2, r3
 800a132:	9b01      	ldr	r3, [sp, #4]
 800a134:	9900      	ldr	r1, [sp, #0]
 800a136:	7809      	ldrb	r1, [r1, #0]
 800a138:	0089      	lsls	r1, r1, #2
 800a13a:	440b      	add	r3, r1
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	b299      	uxth	r1, r3
 800a140:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a144:	400b      	ands	r3, r1
 800a146:	b299      	uxth	r1, r3
 800a148:	4b9c      	ldr	r3, [pc, #624]	; (800a3bc <USB_ActivateEndpoint+0x58c>)
 800a14a:	430b      	orrs	r3, r1
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a156:	b29b      	uxth	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	9b00      	ldr	r3, [sp, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4413      	add	r3, r2
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	461a      	mov	r2, r3
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a16e:	461a      	mov	r2, r3
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	88db      	ldrh	r3, [r3, #6]
 800a174:	085b      	lsrs	r3, r3, #1
 800a176:	b29b      	uxth	r3, r3
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	9b01      	ldr	r3, [sp, #4]
 800a17e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a182:	b29b      	uxth	r3, r3
 800a184:	461a      	mov	r2, r3
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	3304      	adds	r3, #4
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	461a      	mov	r2, r3
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a19c:	461a      	mov	r2, r3
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	891b      	ldrh	r3, [r3, #8]
 800a1a2:	085b      	lsrs	r3, r3, #1
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	785b      	ldrb	r3, [r3, #1]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f040 8083 	bne.w	800a2ba <USB_ActivateEndpoint+0x48a>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	9a00      	ldr	r2, [sp, #0]
 800a1b8:	7812      	ldrb	r2, [r2, #0]
 800a1ba:	0092      	lsls	r2, r2, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d013      	beq.n	800a1f2 <USB_ActivateEndpoint+0x3c2>
 800a1ca:	9b01      	ldr	r3, [sp, #4]
 800a1cc:	9a00      	ldr	r2, [sp, #0]
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	0092      	lsls	r2, r2, #2
 800a1d2:	441a      	add	r2, r3
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	9900      	ldr	r1, [sp, #0]
 800a1d8:	7809      	ldrb	r1, [r1, #0]
 800a1da:	0089      	lsls	r1, r1, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b299      	uxth	r1, r3
 800a1e2:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a1e6:	400b      	ands	r3, r1
 800a1e8:	b299      	uxth	r1, r3
 800a1ea:	4b75      	ldr	r3, [pc, #468]	; (800a3c0 <USB_ActivateEndpoint+0x590>)
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1f2:	9b01      	ldr	r3, [sp, #4]
 800a1f4:	9a00      	ldr	r2, [sp, #0]
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	0092      	lsls	r2, r2, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a204:	2b00      	cmp	r3, #0
 800a206:	d013      	beq.n	800a230 <USB_ActivateEndpoint+0x400>
 800a208:	9b01      	ldr	r3, [sp, #4]
 800a20a:	9a00      	ldr	r2, [sp, #0]
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	0092      	lsls	r2, r2, #2
 800a210:	441a      	add	r2, r3
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	9900      	ldr	r1, [sp, #0]
 800a216:	7809      	ldrb	r1, [r1, #0]
 800a218:	0089      	lsls	r1, r1, #2
 800a21a:	440b      	add	r3, r1
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b299      	uxth	r1, r3
 800a220:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a224:	400b      	ands	r3, r1
 800a226:	b299      	uxth	r1, r3
 800a228:	4b66      	ldr	r3, [pc, #408]	; (800a3c4 <USB_ActivateEndpoint+0x594>)
 800a22a:	430b      	orrs	r3, r1
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a230:	9b01      	ldr	r3, [sp, #4]
 800a232:	9a00      	ldr	r2, [sp, #0]
 800a234:	7812      	ldrb	r2, [r2, #0]
 800a236:	0092      	lsls	r2, r2, #2
 800a238:	441a      	add	r2, r3
 800a23a:	9b01      	ldr	r3, [sp, #4]
 800a23c:	9900      	ldr	r1, [sp, #0]
 800a23e:	7809      	ldrb	r1, [r1, #0]
 800a240:	0089      	lsls	r1, r1, #2
 800a242:	440b      	add	r3, r1
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	b299      	uxth	r1, r3
 800a248:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a24c:	400b      	ands	r3, r1
 800a24e:	b299      	uxth	r1, r3
 800a250:	4b5c      	ldr	r3, [pc, #368]	; (800a3c4 <USB_ActivateEndpoint+0x594>)
 800a252:	430b      	orrs	r3, r1
 800a254:	b29b      	uxth	r3, r3
 800a256:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a258:	9b01      	ldr	r3, [sp, #4]
 800a25a:	9a00      	ldr	r2, [sp, #0]
 800a25c:	7812      	ldrb	r2, [r2, #0]
 800a25e:	0092      	lsls	r2, r2, #2
 800a260:	4413      	add	r3, r2
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	b29b      	uxth	r3, r3
 800a266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26e:	b29c      	uxth	r4, r3
 800a270:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800a274:	b29c      	uxth	r4, r3
 800a276:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800a27a:	b29c      	uxth	r4, r3
 800a27c:	9b01      	ldr	r3, [sp, #4]
 800a27e:	9a00      	ldr	r2, [sp, #0]
 800a280:	7812      	ldrb	r2, [r2, #0]
 800a282:	0092      	lsls	r2, r2, #2
 800a284:	441a      	add	r2, r3
 800a286:	4b50      	ldr	r3, [pc, #320]	; (800a3c8 <USB_ActivateEndpoint+0x598>)
 800a288:	4323      	orrs	r3, r4
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	9a00      	ldr	r2, [sp, #0]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	0092      	lsls	r2, r2, #2
 800a296:	4413      	add	r3, r2
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a4:	b29c      	uxth	r4, r3
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	9a00      	ldr	r2, [sp, #0]
 800a2aa:	7812      	ldrb	r2, [r2, #0]
 800a2ac:	0092      	lsls	r2, r2, #2
 800a2ae:	441a      	add	r2, r3
 800a2b0:	4b45      	ldr	r3, [pc, #276]	; (800a3c8 <USB_ActivateEndpoint+0x598>)
 800a2b2:	4323      	orrs	r3, r4
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	8013      	strh	r3, [r2, #0]
 800a2b8:	e07b      	b.n	800a3b2 <USB_ActivateEndpoint+0x582>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ba:	9b01      	ldr	r3, [sp, #4]
 800a2bc:	9a00      	ldr	r2, [sp, #0]
 800a2be:	7812      	ldrb	r2, [r2, #0]
 800a2c0:	0092      	lsls	r2, r2, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d013      	beq.n	800a2f8 <USB_ActivateEndpoint+0x4c8>
 800a2d0:	9b01      	ldr	r3, [sp, #4]
 800a2d2:	9a00      	ldr	r2, [sp, #0]
 800a2d4:	7812      	ldrb	r2, [r2, #0]
 800a2d6:	0092      	lsls	r2, r2, #2
 800a2d8:	441a      	add	r2, r3
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	9900      	ldr	r1, [sp, #0]
 800a2de:	7809      	ldrb	r1, [r1, #0]
 800a2e0:	0089      	lsls	r1, r1, #2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b299      	uxth	r1, r3
 800a2e8:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a2ec:	400b      	ands	r3, r1
 800a2ee:	b299      	uxth	r1, r3
 800a2f0:	4b33      	ldr	r3, [pc, #204]	; (800a3c0 <USB_ActivateEndpoint+0x590>)
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2f8:	9b01      	ldr	r3, [sp, #4]
 800a2fa:	9a00      	ldr	r2, [sp, #0]
 800a2fc:	7812      	ldrb	r2, [r2, #0]
 800a2fe:	0092      	lsls	r2, r2, #2
 800a300:	4413      	add	r3, r2
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d013      	beq.n	800a336 <USB_ActivateEndpoint+0x506>
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	9a00      	ldr	r2, [sp, #0]
 800a312:	7812      	ldrb	r2, [r2, #0]
 800a314:	0092      	lsls	r2, r2, #2
 800a316:	441a      	add	r2, r3
 800a318:	9b01      	ldr	r3, [sp, #4]
 800a31a:	9900      	ldr	r1, [sp, #0]
 800a31c:	7809      	ldrb	r1, [r1, #0]
 800a31e:	0089      	lsls	r1, r1, #2
 800a320:	440b      	add	r3, r1
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	b299      	uxth	r1, r3
 800a326:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a32a:	400b      	ands	r3, r1
 800a32c:	b299      	uxth	r1, r3
 800a32e:	4b25      	ldr	r3, [pc, #148]	; (800a3c4 <USB_ActivateEndpoint+0x594>)
 800a330:	430b      	orrs	r3, r1
 800a332:	b29b      	uxth	r3, r3
 800a334:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	9a00      	ldr	r2, [sp, #0]
 800a33a:	7812      	ldrb	r2, [r2, #0]
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	441a      	add	r2, r3
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	9900      	ldr	r1, [sp, #0]
 800a344:	7809      	ldrb	r1, [r1, #0]
 800a346:	0089      	lsls	r1, r1, #2
 800a348:	440b      	add	r3, r1
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	b299      	uxth	r1, r3
 800a34e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a352:	400b      	ands	r3, r1
 800a354:	b299      	uxth	r1, r3
 800a356:	4b1a      	ldr	r3, [pc, #104]	; (800a3c0 <USB_ActivateEndpoint+0x590>)
 800a358:	430b      	orrs	r3, r1
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	9a00      	ldr	r2, [sp, #0]
 800a362:	7812      	ldrb	r2, [r2, #0]
 800a364:	0092      	lsls	r2, r2, #2
 800a366:	4413      	add	r3, r2
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a374:	b29c      	uxth	r4, r3
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	9a00      	ldr	r2, [sp, #0]
 800a37a:	7812      	ldrb	r2, [r2, #0]
 800a37c:	0092      	lsls	r2, r2, #2
 800a37e:	441a      	add	r2, r3
 800a380:	4b11      	ldr	r3, [pc, #68]	; (800a3c8 <USB_ActivateEndpoint+0x598>)
 800a382:	4323      	orrs	r3, r4
 800a384:	b29b      	uxth	r3, r3
 800a386:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a388:	9b01      	ldr	r3, [sp, #4]
 800a38a:	9a00      	ldr	r2, [sp, #0]
 800a38c:	7812      	ldrb	r2, [r2, #0]
 800a38e:	0092      	lsls	r2, r2, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39e:	b29c      	uxth	r4, r3
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	7812      	ldrb	r2, [r2, #0]
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	441a      	add	r2, r3
 800a3aa:	4b07      	ldr	r3, [pc, #28]	; (800a3c8 <USB_ActivateEndpoint+0x598>)
 800a3ac:	4323      	orrs	r3, r4
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	b005      	add	sp, #20
 800a3b8:	bc10      	pop	{r4}
 800a3ba:	4770      	bx	lr
 800a3bc:	ffff8180 	.word	0xffff8180
 800a3c0:	ffffc080 	.word	0xffffc080
 800a3c4:	ffff80c0 	.word	0xffff80c0
 800a3c8:	ffff8080 	.word	0xffff8080

0800a3cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3cc:	b410      	push	{r4}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	9001      	str	r0, [sp, #4]
 800a3d2:	9100      	str	r1, [sp, #0]
  if (ep->doublebuffer == 0) 
 800a3d4:	9b00      	ldr	r3, [sp, #0]
 800a3d6:	7a9b      	ldrb	r3, [r3, #10]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d16d      	bne.n	800a4b8 <USB_DeactivateEndpoint+0xec>
  {
    if (ep->is_in)
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d034      	beq.n	800a44e <USB_DeactivateEndpoint+0x82>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3e4:	9b01      	ldr	r3, [sp, #4]
 800a3e6:	9a00      	ldr	r2, [sp, #0]
 800a3e8:	7812      	ldrb	r2, [r2, #0]
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d013      	beq.n	800a422 <USB_DeactivateEndpoint+0x56>
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	9a00      	ldr	r2, [sp, #0]
 800a3fe:	7812      	ldrb	r2, [r2, #0]
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	441a      	add	r2, r3
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	9900      	ldr	r1, [sp, #0]
 800a408:	7809      	ldrb	r1, [r1, #0]
 800a40a:	0089      	lsls	r1, r1, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b299      	uxth	r1, r3
 800a412:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a416:	400b      	ands	r3, r1
 800a418:	b299      	uxth	r1, r3
 800a41a:	4b68      	ldr	r3, [pc, #416]	; (800a5bc <USB_DeactivateEndpoint+0x1f0>)
 800a41c:	430b      	orrs	r3, r1
 800a41e:	b29b      	uxth	r3, r3
 800a420:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	9a00      	ldr	r2, [sp, #0]
 800a426:	7812      	ldrb	r2, [r2, #0]
 800a428:	0092      	lsls	r2, r2, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a438:	b29c      	uxth	r4, r3
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	9a00      	ldr	r2, [sp, #0]
 800a43e:	7812      	ldrb	r2, [r2, #0]
 800a440:	0092      	lsls	r2, r2, #2
 800a442:	441a      	add	r2, r3
 800a444:	4b5e      	ldr	r3, [pc, #376]	; (800a5c0 <USB_DeactivateEndpoint+0x1f4>)
 800a446:	4323      	orrs	r3, r4
 800a448:	b29b      	uxth	r3, r3
 800a44a:	8013      	strh	r3, [r2, #0]
 800a44c:	e138      	b.n	800a6c0 <USB_DeactivateEndpoint+0x2f4>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a44e:	9b01      	ldr	r3, [sp, #4]
 800a450:	9a00      	ldr	r2, [sp, #0]
 800a452:	7812      	ldrb	r2, [r2, #0]
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	4413      	add	r3, r2
 800a458:	881b      	ldrh	r3, [r3, #0]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d013      	beq.n	800a48c <USB_DeactivateEndpoint+0xc0>
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	9a00      	ldr	r2, [sp, #0]
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	441a      	add	r2, r3
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	9900      	ldr	r1, [sp, #0]
 800a472:	7809      	ldrb	r1, [r1, #0]
 800a474:	0089      	lsls	r1, r1, #2
 800a476:	440b      	add	r3, r1
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b299      	uxth	r1, r3
 800a47c:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a480:	400b      	ands	r3, r1
 800a482:	b299      	uxth	r1, r3
 800a484:	4b4f      	ldr	r3, [pc, #316]	; (800a5c4 <USB_DeactivateEndpoint+0x1f8>)
 800a486:	430b      	orrs	r3, r1
 800a488:	b29b      	uxth	r3, r3
 800a48a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	9a00      	ldr	r2, [sp, #0]
 800a490:	7812      	ldrb	r2, [r2, #0]
 800a492:	0092      	lsls	r2, r2, #2
 800a494:	4413      	add	r3, r2
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a49e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a2:	b29c      	uxth	r4, r3
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	9a00      	ldr	r2, [sp, #0]
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	0092      	lsls	r2, r2, #2
 800a4ac:	441a      	add	r2, r3
 800a4ae:	4b44      	ldr	r3, [pc, #272]	; (800a5c0 <USB_DeactivateEndpoint+0x1f4>)
 800a4b0:	4323      	orrs	r3, r4
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	8013      	strh	r3, [r2, #0]
 800a4b6:	e103      	b.n	800a6c0 <USB_DeactivateEndpoint+0x2f4>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 800a4b8:	9b00      	ldr	r3, [sp, #0]
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f040 8083 	bne.w	800a5c8 <USB_DeactivateEndpoint+0x1fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4c2:	9b01      	ldr	r3, [sp, #4]
 800a4c4:	9a00      	ldr	r2, [sp, #0]
 800a4c6:	7812      	ldrb	r2, [r2, #0]
 800a4c8:	0092      	lsls	r2, r2, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d013      	beq.n	800a500 <USB_DeactivateEndpoint+0x134>
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	9a00      	ldr	r2, [sp, #0]
 800a4dc:	7812      	ldrb	r2, [r2, #0]
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	441a      	add	r2, r3
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	9900      	ldr	r1, [sp, #0]
 800a4e6:	7809      	ldrb	r1, [r1, #0]
 800a4e8:	0089      	lsls	r1, r1, #2
 800a4ea:	440b      	add	r3, r1
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a4f4:	400b      	ands	r3, r1
 800a4f6:	b299      	uxth	r1, r3
 800a4f8:	4b32      	ldr	r3, [pc, #200]	; (800a5c4 <USB_DeactivateEndpoint+0x1f8>)
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	9a00      	ldr	r2, [sp, #0]
 800a504:	7812      	ldrb	r2, [r2, #0]
 800a506:	0092      	lsls	r2, r2, #2
 800a508:	4413      	add	r3, r2
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d013      	beq.n	800a53e <USB_DeactivateEndpoint+0x172>
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	9a00      	ldr	r2, [sp, #0]
 800a51a:	7812      	ldrb	r2, [r2, #0]
 800a51c:	0092      	lsls	r2, r2, #2
 800a51e:	441a      	add	r2, r3
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	9900      	ldr	r1, [sp, #0]
 800a524:	7809      	ldrb	r1, [r1, #0]
 800a526:	0089      	lsls	r1, r1, #2
 800a528:	440b      	add	r3, r1
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b299      	uxth	r1, r3
 800a52e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a532:	400b      	ands	r3, r1
 800a534:	b299      	uxth	r1, r3
 800a536:	4b21      	ldr	r3, [pc, #132]	; (800a5bc <USB_DeactivateEndpoint+0x1f0>)
 800a538:	430b      	orrs	r3, r1
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	9a00      	ldr	r2, [sp, #0]
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	0092      	lsls	r2, r2, #2
 800a546:	441a      	add	r2, r3
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	9900      	ldr	r1, [sp, #0]
 800a54c:	7809      	ldrb	r1, [r1, #0]
 800a54e:	0089      	lsls	r1, r1, #2
 800a550:	440b      	add	r3, r1
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	b299      	uxth	r1, r3
 800a556:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a55a:	400b      	ands	r3, r1
 800a55c:	b299      	uxth	r1, r3
 800a55e:	4b17      	ldr	r3, [pc, #92]	; (800a5bc <USB_DeactivateEndpoint+0x1f0>)
 800a560:	430b      	orrs	r3, r1
 800a562:	b29b      	uxth	r3, r3
 800a564:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a566:	9b01      	ldr	r3, [sp, #4]
 800a568:	9a00      	ldr	r2, [sp, #0]
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	0092      	lsls	r2, r2, #2
 800a56e:	4413      	add	r3, r2
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	b29b      	uxth	r3, r3
 800a574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57c:	b29c      	uxth	r4, r3
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	9a00      	ldr	r2, [sp, #0]
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	0092      	lsls	r2, r2, #2
 800a586:	441a      	add	r2, r3
 800a588:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <USB_DeactivateEndpoint+0x1f4>)
 800a58a:	4323      	orrs	r3, r4
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	9a00      	ldr	r2, [sp, #0]
 800a594:	7812      	ldrb	r2, [r2, #0]
 800a596:	0092      	lsls	r2, r2, #2
 800a598:	4413      	add	r3, r2
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5a6:	b29c      	uxth	r4, r3
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	9a00      	ldr	r2, [sp, #0]
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	0092      	lsls	r2, r2, #2
 800a5b0:	441a      	add	r2, r3
 800a5b2:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <USB_DeactivateEndpoint+0x1f4>)
 800a5b4:	4323      	orrs	r3, r4
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	8013      	strh	r3, [r2, #0]
 800a5ba:	e081      	b.n	800a6c0 <USB_DeactivateEndpoint+0x2f4>
 800a5bc:	ffff80c0 	.word	0xffff80c0
 800a5c0:	ffff8080 	.word	0xffff8080
 800a5c4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	9a00      	ldr	r2, [sp, #0]
 800a5cc:	7812      	ldrb	r2, [r2, #0]
 800a5ce:	0092      	lsls	r2, r2, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d013      	beq.n	800a606 <USB_DeactivateEndpoint+0x23a>
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	9a00      	ldr	r2, [sp, #0]
 800a5e2:	7812      	ldrb	r2, [r2, #0]
 800a5e4:	0092      	lsls	r2, r2, #2
 800a5e6:	441a      	add	r2, r3
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	9900      	ldr	r1, [sp, #0]
 800a5ec:	7809      	ldrb	r1, [r1, #0]
 800a5ee:	0089      	lsls	r1, r1, #2
 800a5f0:	440b      	add	r3, r1
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	b299      	uxth	r1, r3
 800a5f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a5fa:	400b      	ands	r3, r1
 800a5fc:	b299      	uxth	r1, r3
 800a5fe:	4b33      	ldr	r3, [pc, #204]	; (800a6cc <USB_DeactivateEndpoint+0x300>)
 800a600:	430b      	orrs	r3, r1
 800a602:	b29b      	uxth	r3, r3
 800a604:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	9a00      	ldr	r2, [sp, #0]
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	0092      	lsls	r2, r2, #2
 800a60e:	4413      	add	r3, r2
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	b29b      	uxth	r3, r3
 800a614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d013      	beq.n	800a644 <USB_DeactivateEndpoint+0x278>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	9a00      	ldr	r2, [sp, #0]
 800a620:	7812      	ldrb	r2, [r2, #0]
 800a622:	0092      	lsls	r2, r2, #2
 800a624:	441a      	add	r2, r3
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	9900      	ldr	r1, [sp, #0]
 800a62a:	7809      	ldrb	r1, [r1, #0]
 800a62c:	0089      	lsls	r1, r1, #2
 800a62e:	440b      	add	r3, r1
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	b299      	uxth	r1, r3
 800a634:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a638:	400b      	ands	r3, r1
 800a63a:	b299      	uxth	r1, r3
 800a63c:	4b24      	ldr	r3, [pc, #144]	; (800a6d0 <USB_DeactivateEndpoint+0x304>)
 800a63e:	430b      	orrs	r3, r1
 800a640:	b29b      	uxth	r3, r3
 800a642:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	9a00      	ldr	r2, [sp, #0]
 800a648:	7812      	ldrb	r2, [r2, #0]
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	441a      	add	r2, r3
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	9900      	ldr	r1, [sp, #0]
 800a652:	7809      	ldrb	r1, [r1, #0]
 800a654:	0089      	lsls	r1, r1, #2
 800a656:	440b      	add	r3, r1
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b299      	uxth	r1, r3
 800a65c:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a660:	400b      	ands	r3, r1
 800a662:	b299      	uxth	r1, r3
 800a664:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <USB_DeactivateEndpoint+0x300>)
 800a666:	430b      	orrs	r3, r1
 800a668:	b29b      	uxth	r3, r3
 800a66a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a66c:	9b01      	ldr	r3, [sp, #4]
 800a66e:	9a00      	ldr	r2, [sp, #0]
 800a670:	7812      	ldrb	r2, [r2, #0]
 800a672:	0092      	lsls	r2, r2, #2
 800a674:	4413      	add	r3, r2
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a67e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a682:	b29c      	uxth	r4, r3
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	9a00      	ldr	r2, [sp, #0]
 800a688:	7812      	ldrb	r2, [r2, #0]
 800a68a:	0092      	lsls	r2, r2, #2
 800a68c:	441a      	add	r2, r3
 800a68e:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <USB_DeactivateEndpoint+0x308>)
 800a690:	4323      	orrs	r3, r4
 800a692:	b29b      	uxth	r3, r3
 800a694:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	9a00      	ldr	r2, [sp, #0]
 800a69a:	7812      	ldrb	r2, [r2, #0]
 800a69c:	0092      	lsls	r2, r2, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ac:	b29c      	uxth	r4, r3
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	9a00      	ldr	r2, [sp, #0]
 800a6b2:	7812      	ldrb	r2, [r2, #0]
 800a6b4:	0092      	lsls	r2, r2, #2
 800a6b6:	441a      	add	r2, r3
 800a6b8:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <USB_DeactivateEndpoint+0x308>)
 800a6ba:	4323      	orrs	r3, r4
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	8013      	strh	r3, [r2, #0]
    }
  }
  
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	b003      	add	sp, #12
 800a6c6:	bc10      	pop	{r4}
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	ffffc080 	.word	0xffffc080
 800a6d0:	ffff80c0 	.word	0xffff80c0
 800a6d4:	ffff8080 	.word	0xffff8080

0800a6d8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	b08c      	sub	sp, #48	; 0x30
 800a6dc:	9001      	str	r0, [sp, #4]
 800a6de:	9100      	str	r1, [sp, #0]
  uint16_t pmabuffer = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  uint32_t len = ep->xfer_len;
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	930a      	str	r3, [sp, #40]	; 0x28
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800a6ec:	9b00      	ldr	r3, [sp, #0]
 800a6ee:	785b      	ldrb	r3, [r3, #1]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	f040 8161 	bne.w	800a9b8 <USB_EPStartXfer+0x2e0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	9b00      	ldr	r3, [sp, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d909      	bls.n	800a716 <USB_EPStartXfer+0x3e>
    {
      len=ep->maxpacket;
 800a702:	9b00      	ldr	r3, [sp, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	930a      	str	r3, [sp, #40]	; 0x28
      ep->xfer_len-=len; 
 800a708:	9b00      	ldr	r3, [sp, #0]
 800a70a:	699a      	ldr	r2, [r3, #24]
 800a70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	9b00      	ldr	r3, [sp, #0]
 800a712:	619a      	str	r2, [r3, #24]
 800a714:	e005      	b.n	800a722 <USB_EPStartXfer+0x4a>
    }
    else
    {  
      len=ep->xfer_len;
 800a716:	9b00      	ldr	r3, [sp, #0]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	930a      	str	r3, [sp, #40]	; 0x28
      ep->xfer_len =0;
 800a71c:	9b00      	ldr	r3, [sp, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0) 
 800a722:	9b00      	ldr	r3, [sp, #0]
 800a724:	7a9b      	ldrb	r3, [r3, #10]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d11c      	bne.n	800a764 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	6959      	ldr	r1, [r3, #20]
 800a72e:	9b00      	ldr	r3, [sp, #0]
 800a730:	889a      	ldrh	r2, [r3, #4]
 800a732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a734:	b29b      	uxth	r3, r3
 800a736:	9801      	ldr	r0, [sp, #4]
 800a738:	f000 fc0b 	bl	800af52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a742:	b29b      	uxth	r3, r3
 800a744:	461a      	mov	r2, r3
 800a746:	9b00      	ldr	r3, [sp, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	00db      	lsls	r3, r3, #3
 800a74c:	4413      	add	r3, r2
 800a74e:	3302      	adds	r3, #2
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	461a      	mov	r2, r3
 800a754:	9b01      	ldr	r3, [sp, #4]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a75c:	461a      	mov	r2, r3
 800a75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	e10d      	b.n	800a980 <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	9a00      	ldr	r2, [sp, #0]
 800a768:	7812      	ldrb	r2, [r2, #0]
 800a76a:	0092      	lsls	r2, r2, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b29b      	uxth	r3, r3
 800a772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d064      	beq.n	800a844 <USB_EPStartXfer+0x16c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	785b      	ldrb	r3, [r3, #1]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d144      	bne.n	800a80c <USB_EPStartXfer+0x134>
 800a782:	9b01      	ldr	r3, [sp, #4]
 800a784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a788:	b29b      	uxth	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	9b00      	ldr	r3, [sp, #0]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	4413      	add	r3, r2
 800a794:	3306      	adds	r3, #6
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	461a      	mov	r2, r3
 800a79a:	9b01      	ldr	r3, [sp, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7a2:	9306      	str	r3, [sp, #24]
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a7a8:	d91a      	bls.n	800a7e0 <USB_EPStartXfer+0x108>
 800a7aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ac:	095b      	lsrs	r3, r3, #5
 800a7ae:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800a7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d104      	bne.n	800a7c6 <USB_EPStartXfer+0xee>
 800a7bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800a7c6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a7ca:	029b      	lsls	r3, r3, #10
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	461a      	mov	r2, r3
 800a7da:	9b06      	ldr	r3, [sp, #24]
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	e02c      	b.n	800a83a <USB_EPStartXfer+0x162>
 800a7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e2:	085b      	lsrs	r3, r3, #1
 800a7e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800a7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d004      	beq.n	800a7fc <USB_EPStartXfer+0x124>
 800a7f2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800a7fc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a800:	029b      	lsls	r3, r3, #10
 800a802:	b29b      	uxth	r3, r3
 800a804:	461a      	mov	r2, r3
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	e016      	b.n	800a83a <USB_EPStartXfer+0x162>
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d112      	bne.n	800a83a <USB_EPStartXfer+0x162>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	9b00      	ldr	r3, [sp, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	4413      	add	r3, r2
 800a826:	3302      	adds	r3, #2
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	461a      	mov	r2, r3
 800a82c:	9b01      	ldr	r3, [sp, #4]
 800a82e:	4413      	add	r3, r2
 800a830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a834:	461a      	mov	r2, r3
 800a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a838:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	891b      	ldrh	r3, [r3, #8]
 800a83e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800a842:	e063      	b.n	800a90c <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a844:	9b00      	ldr	r3, [sp, #0]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d144      	bne.n	800a8d6 <USB_EPStartXfer+0x1fe>
 800a84c:	9b01      	ldr	r3, [sp, #4]
 800a84e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a852:	b29b      	uxth	r3, r3
 800a854:	461a      	mov	r2, r3
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	3302      	adds	r3, #2
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	461a      	mov	r2, r3
 800a864:	9b01      	ldr	r3, [sp, #4]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a86c:	9305      	str	r3, [sp, #20]
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	2b3e      	cmp	r3, #62	; 0x3e
 800a872:	d91a      	bls.n	800a8aa <USB_EPStartXfer+0x1d2>
 800a874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87e:	f003 031f 	and.w	r3, r3, #31
 800a882:	2b00      	cmp	r3, #0
 800a884:	d104      	bne.n	800a890 <USB_EPStartXfer+0x1b8>
 800a886:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a88a:	3b01      	subs	r3, #1
 800a88c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a890:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a894:	029b      	lsls	r3, r3, #10
 800a896:	b29b      	uxth	r3, r3
 800a898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a89c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	9b05      	ldr	r3, [sp, #20]
 800a8a6:	601a      	str	r2, [r3, #0]
 800a8a8:	e02c      	b.n	800a904 <USB_EPStartXfer+0x22c>
 800a8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d004      	beq.n	800a8c6 <USB_EPStartXfer+0x1ee>
 800a8bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800a8c6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800a8ca:	029b      	lsls	r3, r3, #10
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	9b05      	ldr	r3, [sp, #20]
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e016      	b.n	800a904 <USB_EPStartXfer+0x22c>
 800a8d6:	9b00      	ldr	r3, [sp, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d112      	bne.n	800a904 <USB_EPStartXfer+0x22c>
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	9b00      	ldr	r3, [sp, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	00db      	lsls	r3, r3, #3
 800a8ee:	4413      	add	r3, r2
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	9b01      	ldr	r3, [sp, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8fe:	461a      	mov	r2, r3
 800a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a902:	6013      	str	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 800a904:	9b00      	ldr	r3, [sp, #0]
 800a906:	88db      	ldrh	r3, [r3, #6]
 800a908:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800a90c:	9b00      	ldr	r3, [sp, #0]
 800a90e:	6959      	ldr	r1, [r3, #20]
 800a910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a912:	b29b      	uxth	r3, r3
 800a914:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800a918:	9801      	ldr	r0, [sp, #4]
 800a91a:	f000 fb1a 	bl	800af52 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a91e:	9b00      	ldr	r3, [sp, #0]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d114      	bne.n	800a950 <USB_EPStartXfer+0x278>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	9a00      	ldr	r2, [sp, #0]
 800a92a:	7812      	ldrb	r2, [r2, #0]
 800a92c:	0092      	lsls	r2, r2, #2
 800a92e:	441a      	add	r2, r3
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	9900      	ldr	r1, [sp, #0]
 800a934:	7809      	ldrb	r1, [r1, #0]
 800a936:	0089      	lsls	r1, r1, #2
 800a938:	440b      	add	r3, r1
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b299      	uxth	r1, r3
 800a93e:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a942:	400b      	ands	r3, r1
 800a944:	b299      	uxth	r1, r3
 800a946:	4ba0      	ldr	r3, [pc, #640]	; (800abc8 <USB_EPStartXfer+0x4f0>)
 800a948:	430b      	orrs	r3, r1
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	8013      	strh	r3, [r2, #0]
 800a94e:	e017      	b.n	800a980 <USB_EPStartXfer+0x2a8>
 800a950:	9b00      	ldr	r3, [sp, #0]
 800a952:	785b      	ldrb	r3, [r3, #1]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d113      	bne.n	800a980 <USB_EPStartXfer+0x2a8>
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	9a00      	ldr	r2, [sp, #0]
 800a95c:	7812      	ldrb	r2, [r2, #0]
 800a95e:	0092      	lsls	r2, r2, #2
 800a960:	441a      	add	r2, r3
 800a962:	9b01      	ldr	r3, [sp, #4]
 800a964:	9900      	ldr	r1, [sp, #0]
 800a966:	7809      	ldrb	r1, [r1, #0]
 800a968:	0089      	lsls	r1, r1, #2
 800a96a:	440b      	add	r3, r1
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b299      	uxth	r1, r3
 800a970:	f640 730f 	movw	r3, #3855	; 0xf0f
 800a974:	400b      	ands	r3, r1
 800a976:	b299      	uxth	r1, r3
 800a978:	4b94      	ldr	r3, [pc, #592]	; (800abcc <USB_EPStartXfer+0x4f4>)
 800a97a:	430b      	orrs	r3, r1
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	8013      	strh	r3, [r2, #0]
    }
    
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a980:	9b01      	ldr	r3, [sp, #4]
 800a982:	9a00      	ldr	r2, [sp, #0]
 800a984:	7812      	ldrb	r2, [r2, #0]
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	4413      	add	r3, r2
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a996:	b29c      	uxth	r4, r3
 800a998:	f084 0310 	eor.w	r3, r4, #16
 800a99c:	b29c      	uxth	r4, r3
 800a99e:	f084 0320 	eor.w	r3, r4, #32
 800a9a2:	b29c      	uxth	r4, r3
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	9a00      	ldr	r2, [sp, #0]
 800a9a8:	7812      	ldrb	r2, [r2, #0]
 800a9aa:	0092      	lsls	r2, r2, #2
 800a9ac:	441a      	add	r2, r3
 800a9ae:	4b88      	ldr	r3, [pc, #544]	; (800abd0 <USB_EPStartXfer+0x4f8>)
 800a9b0:	4323      	orrs	r3, r4
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	8013      	strh	r3, [r2, #0]
 800a9b6:	e13f      	b.n	800ac38 <USB_EPStartXfer+0x560>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a9b8:	9b00      	ldr	r3, [sp, #0]
 800a9ba:	699a      	ldr	r2, [r3, #24]
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d909      	bls.n	800a9d8 <USB_EPStartXfer+0x300>
    {
      len=ep->maxpacket;
 800a9c4:	9b00      	ldr	r3, [sp, #0]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	930a      	str	r3, [sp, #40]	; 0x28
      ep->xfer_len-=len; 
 800a9ca:	9b00      	ldr	r3, [sp, #0]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d0:	1ad2      	subs	r2, r2, r3
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	619a      	str	r2, [r3, #24]
 800a9d6:	e005      	b.n	800a9e4 <USB_EPStartXfer+0x30c>
    }
    else
    {
      len=ep->xfer_len;
 800a9d8:	9b00      	ldr	r3, [sp, #0]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	930a      	str	r3, [sp, #40]	; 0x28
      ep->xfer_len =0;
 800a9de:	9b00      	ldr	r3, [sp, #0]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	619a      	str	r2, [r3, #24]
    }
    
    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0) 
 800a9e4:	9b00      	ldr	r3, [sp, #0]
 800a9e6:	7a9b      	ldrb	r3, [r3, #10]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d144      	bne.n	800aa76 <USB_EPStartXfer+0x39e>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	3306      	adds	r3, #6
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	461a      	mov	r2, r3
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa0c:	9304      	str	r3, [sp, #16]
 800aa0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa10:	2b3e      	cmp	r3, #62	; 0x3e
 800aa12:	d91a      	bls.n	800aa4a <USB_EPStartXfer+0x372>
 800aa14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa16:	095b      	lsrs	r3, r3, #5
 800aa18:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800aa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1e:	f003 031f 	and.w	r3, r3, #31
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d104      	bne.n	800aa30 <USB_EPStartXfer+0x358>
 800aa26:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800aa30:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800aa34:	029b      	lsls	r3, r3, #10
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e0db      	b.n	800ac02 <USB_EPStartXfer+0x52a>
 800aa4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4c:	085b      	lsrs	r3, r3, #1
 800aa4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800aa52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d004      	beq.n	800aa66 <USB_EPStartXfer+0x38e>
 800aa5c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800aa60:	3301      	adds	r3, #1
 800aa62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800aa66:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800aa6a:	029b      	lsls	r3, r3, #10
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	461a      	mov	r2, r3
 800aa70:	9b04      	ldr	r3, [sp, #16]
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e0c5      	b.n	800ac02 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d144      	bne.n	800ab08 <USB_EPStartXfer+0x430>
 800aa7e:	9b01      	ldr	r3, [sp, #4]
 800aa80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	461a      	mov	r2, r3
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	4413      	add	r3, r2
 800aa90:	3302      	adds	r3, #2
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	461a      	mov	r2, r3
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa2:	2b3e      	cmp	r3, #62	; 0x3e
 800aaa4:	d91a      	bls.n	800aadc <USB_EPStartXfer+0x404>
 800aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa8:	095b      	lsrs	r3, r3, #5
 800aaaa:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aaae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab0:	f003 031f 	and.w	r3, r3, #31
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d104      	bne.n	800aac2 <USB_EPStartXfer+0x3ea>
 800aab8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aac2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800aac6:	029b      	lsls	r3, r3, #10
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	e02c      	b.n	800ab36 <USB_EPStartXfer+0x45e>
 800aadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d004      	beq.n	800aaf8 <USB_EPStartXfer+0x420>
 800aaee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800aaf8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800aafc:	029b      	lsls	r3, r3, #10
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	461a      	mov	r2, r3
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	601a      	str	r2, [r3, #0]
 800ab06:	e016      	b.n	800ab36 <USB_EPStartXfer+0x45e>
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d112      	bne.n	800ab36 <USB_EPStartXfer+0x45e>
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	9b00      	ldr	r3, [sp, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	4413      	add	r3, r2
 800ab22:	3302      	adds	r3, #2
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	461a      	mov	r2, r3
 800ab28:	9b01      	ldr	r3, [sp, #4]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab30:	461a      	mov	r2, r3
 800ab32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	9b00      	ldr	r3, [sp, #0]
 800ab38:	785b      	ldrb	r3, [r3, #1]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d14a      	bne.n	800abd4 <USB_EPStartXfer+0x4fc>
 800ab3e:	9b01      	ldr	r3, [sp, #4]
 800ab40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	461a      	mov	r2, r3
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	4413      	add	r3, r2
 800ab50:	3306      	adds	r3, #6
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	461a      	mov	r2, r3
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab62:	2b3e      	cmp	r3, #62	; 0x3e
 800ab64:	d91a      	bls.n	800ab9c <USB_EPStartXfer+0x4c4>
 800ab66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab70:	f003 031f 	and.w	r3, r3, #31
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d104      	bne.n	800ab82 <USB_EPStartXfer+0x4aa>
 800ab78:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ab82:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ab86:	029b      	lsls	r3, r3, #10
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	461a      	mov	r2, r3
 800ab96:	9b02      	ldr	r3, [sp, #8]
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	e032      	b.n	800ac02 <USB_EPStartXfer+0x52a>
 800ab9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9e:	085b      	lsrs	r3, r3, #1
 800aba0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d004      	beq.n	800abb8 <USB_EPStartXfer+0x4e0>
 800abae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800abb2:	3301      	adds	r3, #1
 800abb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800abb8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800abbc:	029b      	lsls	r3, r3, #10
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	461a      	mov	r2, r3
 800abc2:	9b02      	ldr	r3, [sp, #8]
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	e01c      	b.n	800ac02 <USB_EPStartXfer+0x52a>
 800abc8:	ffff80c0 	.word	0xffff80c0
 800abcc:	ffffc080 	.word	0xffffc080
 800abd0:	ffff8080 	.word	0xffff8080
 800abd4:	9b00      	ldr	r3, [sp, #0]
 800abd6:	785b      	ldrb	r3, [r3, #1]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d112      	bne.n	800ac02 <USB_EPStartXfer+0x52a>
 800abdc:	9b01      	ldr	r3, [sp, #4]
 800abde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	461a      	mov	r2, r3
 800abe6:	9b00      	ldr	r3, [sp, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	4413      	add	r3, r2
 800abee:	3302      	adds	r3, #2
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	461a      	mov	r2, r3
 800abf4:	9b01      	ldr	r3, [sp, #4]
 800abf6:	4413      	add	r3, r2
 800abf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abfc:	461a      	mov	r2, r3
 800abfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac00:	6013      	str	r3, [r2, #0]
    }
    
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	9a00      	ldr	r2, [sp, #0]
 800ac06:	7812      	ldrb	r2, [r2, #0]
 800ac08:	0092      	lsls	r2, r2, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac18:	b29c      	uxth	r4, r3
 800ac1a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ac1e:	b29c      	uxth	r4, r3
 800ac20:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ac24:	b29c      	uxth	r4, r3
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	9a00      	ldr	r2, [sp, #0]
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	0092      	lsls	r2, r2, #2
 800ac2e:	441a      	add	r2, r3
 800ac30:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <USB_EPStartXfer+0x568>)
 800ac32:	4323      	orrs	r3, r4
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	8013      	strh	r3, [r2, #0]
  }
  
  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	b00c      	add	sp, #48	; 0x30
 800ac3e:	bd10      	pop	{r4, pc}
 800ac40:	ffff8080 	.word	0xffff8080

0800ac44 <USB_WritePacket>:
  * @param  ch_ep_num : endpoint or host channel number
  * @param  len : Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_TypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800ac44:	b084      	sub	sp, #16
 800ac46:	9003      	str	r0, [sp, #12]
 800ac48:	9102      	str	r1, [sp, #8]
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	460b      	mov	r3, r1
 800ac50:	f88d 3007 	strb.w	r3, [sp, #7]
 800ac54:	4613      	mov	r3, r2
 800ac56:	f8ad 3004 	strh.w	r3, [sp, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	b004      	add	sp, #16
 800ac60:	4770      	bx	lr

0800ac62 <USB_ReadPacket>:
  * @param  dest : destination pointer
  * @param  len : Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_TypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac62:	b084      	sub	sp, #16
 800ac64:	9003      	str	r0, [sp, #12]
 800ac66:	9102      	str	r1, [sp, #8]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return ((void *)NULL);
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	b004      	add	sp, #16
 800ac74:	4770      	bx	lr
	...

0800ac78 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
 800ac78:	b410      	push	{r4}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	9001      	str	r0, [sp, #4]
 800ac7e:	9100      	str	r1, [sp, #0]
  if (ep->num == 0)
 800ac80:	9b00      	ldr	r3, [sp, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d118      	bne.n	800acba <USB_EPSetStall+0x42>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	9a00      	ldr	r2, [sp, #0]
 800ac8c:	7812      	ldrb	r2, [r2, #0]
 800ac8e:	0092      	lsls	r2, r2, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800ac9a:	401c      	ands	r4, r3
 800ac9c:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800aca0:	f084 0410 	eor.w	r4, r4, #16
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	9a00      	ldr	r2, [sp, #0]
 800aca8:	7812      	ldrb	r2, [r2, #0]
 800acaa:	0092      	lsls	r2, r2, #2
 800acac:	441a      	add	r2, r3
 800acae:	b2a1      	uxth	r1, r4
 800acb0:	4b1f      	ldr	r3, [pc, #124]	; (800ad30 <USB_EPSetStall+0xb8>)
 800acb2:	430b      	orrs	r3, r1
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	8013      	strh	r3, [r2, #0]
 800acb8:	e034      	b.n	800ad24 <USB_EPSetStall+0xac>
  }
  else
  {
    if (ep->is_in)
 800acba:	9b00      	ldr	r3, [sp, #0]
 800acbc:	785b      	ldrb	r3, [r3, #1]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d018      	beq.n	800acf4 <USB_EPSetStall+0x7c>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 800acc2:	9b01      	ldr	r3, [sp, #4]
 800acc4:	9a00      	ldr	r2, [sp, #0]
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	0092      	lsls	r2, r2, #2
 800acca:	4413      	add	r3, r2
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acd8:	b29c      	uxth	r4, r3
 800acda:	f084 0310 	eor.w	r3, r4, #16
 800acde:	b29c      	uxth	r4, r3
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	9a00      	ldr	r2, [sp, #0]
 800ace4:	7812      	ldrb	r2, [r2, #0]
 800ace6:	0092      	lsls	r2, r2, #2
 800ace8:	441a      	add	r2, r3
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <USB_EPSetStall+0xb8>)
 800acec:	4323      	orrs	r3, r4
 800acee:	b29b      	uxth	r3, r3
 800acf0:	8013      	strh	r3, [r2, #0]
 800acf2:	e017      	b.n	800ad24 <USB_EPSetStall+0xac>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	9a00      	ldr	r2, [sp, #0]
 800acf8:	7812      	ldrb	r2, [r2, #0]
 800acfa:	0092      	lsls	r2, r2, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0a:	b29c      	uxth	r4, r3
 800ad0c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ad10:	b29c      	uxth	r4, r3
 800ad12:	9b01      	ldr	r3, [sp, #4]
 800ad14:	9a00      	ldr	r2, [sp, #0]
 800ad16:	7812      	ldrb	r2, [r2, #0]
 800ad18:	0092      	lsls	r2, r2, #2
 800ad1a:	441a      	add	r2, r3
 800ad1c:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <USB_EPSetStall+0xb8>)
 800ad1e:	4323      	orrs	r3, r4
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	8013      	strh	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	b003      	add	sp, #12
 800ad2a:	bc10      	pop	{r4}
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	ffff8080 	.word	0xffff8080

0800ad34 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad34:	b410      	push	{r4}
 800ad36:	b083      	sub	sp, #12
 800ad38:	9001      	str	r0, [sp, #4]
 800ad3a:	9100      	str	r1, [sp, #0]
  if (ep->is_in)
 800ad3c:	9b00      	ldr	r3, [sp, #0]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d03a      	beq.n	800adba <USB_EPClearStall+0x86>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	9a00      	ldr	r2, [sp, #0]
 800ad48:	7812      	ldrb	r2, [r2, #0]
 800ad4a:	0092      	lsls	r2, r2, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d013      	beq.n	800ad82 <USB_EPClearStall+0x4e>
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	9a00      	ldr	r2, [sp, #0]
 800ad5e:	7812      	ldrb	r2, [r2, #0]
 800ad60:	0092      	lsls	r2, r2, #2
 800ad62:	441a      	add	r2, r3
 800ad64:	9b01      	ldr	r3, [sp, #4]
 800ad66:	9900      	ldr	r1, [sp, #0]
 800ad68:	7809      	ldrb	r1, [r1, #0]
 800ad6a:	0089      	lsls	r1, r1, #2
 800ad6c:	440b      	add	r3, r1
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	b299      	uxth	r1, r3
 800ad72:	f640 730f 	movw	r3, #3855	; 0xf0f
 800ad76:	400b      	ands	r3, r1
 800ad78:	b299      	uxth	r1, r3
 800ad7a:	4b2f      	ldr	r3, [pc, #188]	; (800ae38 <USB_EPClearStall+0x104>)
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ad82:	9b01      	ldr	r3, [sp, #4]
 800ad84:	9a00      	ldr	r2, [sp, #0]
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	0092      	lsls	r2, r2, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad98:	b29c      	uxth	r4, r3
 800ad9a:	f084 0310 	eor.w	r3, r4, #16
 800ad9e:	b29c      	uxth	r4, r3
 800ada0:	f084 0320 	eor.w	r3, r4, #32
 800ada4:	b29c      	uxth	r4, r3
 800ada6:	9b01      	ldr	r3, [sp, #4]
 800ada8:	9a00      	ldr	r2, [sp, #0]
 800adaa:	7812      	ldrb	r2, [r2, #0]
 800adac:	0092      	lsls	r2, r2, #2
 800adae:	441a      	add	r2, r3
 800adb0:	4b22      	ldr	r3, [pc, #136]	; (800ae3c <USB_EPClearStall+0x108>)
 800adb2:	4323      	orrs	r3, r4
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	8013      	strh	r3, [r2, #0]
 800adb8:	e039      	b.n	800ae2e <USB_EPClearStall+0xfa>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adba:	9b01      	ldr	r3, [sp, #4]
 800adbc:	9a00      	ldr	r2, [sp, #0]
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	0092      	lsls	r2, r2, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d013      	beq.n	800adf8 <USB_EPClearStall+0xc4>
 800add0:	9b01      	ldr	r3, [sp, #4]
 800add2:	9a00      	ldr	r2, [sp, #0]
 800add4:	7812      	ldrb	r2, [r2, #0]
 800add6:	0092      	lsls	r2, r2, #2
 800add8:	441a      	add	r2, r3
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	9900      	ldr	r1, [sp, #0]
 800adde:	7809      	ldrb	r1, [r1, #0]
 800ade0:	0089      	lsls	r1, r1, #2
 800ade2:	440b      	add	r3, r1
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	b299      	uxth	r1, r3
 800ade8:	f640 730f 	movw	r3, #3855	; 0xf0f
 800adec:	400b      	ands	r3, r1
 800adee:	b299      	uxth	r1, r3
 800adf0:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <USB_EPClearStall+0x10c>)
 800adf2:	430b      	orrs	r3, r1
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adf8:	9b01      	ldr	r3, [sp, #4]
 800adfa:	9a00      	ldr	r2, [sp, #0]
 800adfc:	7812      	ldrb	r2, [r2, #0]
 800adfe:	0092      	lsls	r2, r2, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0e:	b29c      	uxth	r4, r3
 800ae10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800ae14:	b29c      	uxth	r4, r3
 800ae16:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800ae1a:	b29c      	uxth	r4, r3
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	9a00      	ldr	r2, [sp, #0]
 800ae20:	7812      	ldrb	r2, [r2, #0]
 800ae22:	0092      	lsls	r2, r2, #2
 800ae24:	441a      	add	r2, r3
 800ae26:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <USB_EPClearStall+0x108>)
 800ae28:	4323      	orrs	r3, r4
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	8013      	strh	r3, [r2, #0]
  }
  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	b003      	add	sp, #12
 800ae34:	bc10      	pop	{r4}
 800ae36:	4770      	bx	lr
 800ae38:	ffff80c0 	.word	0xffff80c0
 800ae3c:	ffff8080 	.word	0xffff8080
 800ae40:	ffffc080 	.word	0xffffc080

0800ae44 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800ae44:	b082      	sub	sp, #8
 800ae46:	9001      	str	r0, [sp, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = USB_CNTR_FRES;
 800ae48:	9b01      	ldr	r3, [sp, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* clear interrupt status register */
  USBx->ISTR = 0;
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  
  /* switch-off device */
  USBx->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 800ae58:	9b01      	ldr	r3, [sp, #4]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	b002      	add	sp, #8
 800ae66:	4770      	bx	lr

0800ae68 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
 800ae68:	b082      	sub	sp, #8
 800ae6a:	9001      	str	r0, [sp, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	f88d 3003 	strb.w	r3, [sp, #3]
  if(address == 0) 
 800ae72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d103      	bne.n	800ae82 <USB_SetDevAddress+0x1a>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800ae7a:	9b01      	ldr	r3, [sp, #4]
 800ae7c:	2280      	movs	r2, #128	; 0x80
 800ae7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }
  
  return HAL_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	b002      	add	sp, #8
 800ae88:	4770      	bx	lr

0800ae8a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	9001      	str	r0, [sp, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	b002      	add	sp, #8
 800ae94:	4770      	bx	lr

0800ae96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
 800ae96:	b082      	sub	sp, #8
 800ae98:	9001      	str	r0, [sp, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	b002      	add	sp, #8
 800aea0:	4770      	bx	lr

0800aea2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
 800aea2:	b084      	sub	sp, #16
 800aea4:	9001      	str	r0, [sp, #4]
  uint32_t tmpreg = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	9303      	str	r3, [sp, #12]
  
  tmpreg = USBx->ISTR;
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	9303      	str	r3, [sp, #12]
  return tmpreg;
 800aeb4:	9b03      	ldr	r3, [sp, #12]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	b004      	add	sp, #16
 800aeba:	4770      	bx	lr

0800aebc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_TypeDef *USBx)
{
 800aebc:	b082      	sub	sp, #8
 800aebe:	9001      	str	r0, [sp, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	b002      	add	sp, #8
 800aec6:	4770      	bx	lr

0800aec8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_TypeDef *USBx)
{
 800aec8:	b082      	sub	sp, #8
 800aeca:	9001      	str	r0, [sp, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	b002      	add	sp, #8
 800aed2:	4770      	bx	lr

0800aed4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_TypeDef *USBx , uint8_t epnum)
{
 800aed4:	b082      	sub	sp, #8
 800aed6:	9001      	str	r0, [sp, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	f88d 3003 	strb.w	r3, [sp, #3]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	b002      	add	sp, #8
 800aee4:	4770      	bx	lr

0800aee6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_TypeDef *USBx , uint8_t epnum)
{
 800aee6:	b082      	sub	sp, #8
 800aee8:	9001      	str	r0, [sp, #4]
 800aeea:	460b      	mov	r3, r1
 800aeec:	f88d 3003 	strb.w	r3, [sp, #3]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return (0);
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	b002      	add	sp, #8
 800aef6:	4770      	bx	lr

0800aef8 <USB_ClearInterrupts>:
  * @param  USBx : Selected device
  * @param  interrupt : interrupt flag
  * @retval None
  */
void  USB_ClearInterrupts (USB_TypeDef *USBx, uint32_t interrupt)
{
 800aef8:	b082      	sub	sp, #8
 800aefa:	9001      	str	r0, [sp, #4]
 800aefc:	9100      	str	r1, [sp, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
}
 800aefe:	bf00      	nop
 800af00:	b002      	add	sp, #8
 800af02:	4770      	bx	lr

0800af04 <USB_EP0_OutStart>:
  * @param  USBx : Selected device
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800af04:	b082      	sub	sp, #8
 800af06:	9001      	str	r0, [sp, #4]
 800af08:	9100      	str	r1, [sp, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	b002      	add	sp, #8
 800af10:	4770      	bx	lr

0800af12 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 800af12:	b082      	sub	sp, #8
 800af14:	9001      	str	r0, [sp, #4]
  USBx->CNTR |= USB_CNTR_RESUME;
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f043 0310 	orr.w	r3, r3, #16
 800af22:	b29a      	uxth	r2, r3
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  return HAL_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	b002      	add	sp, #8
 800af30:	4770      	bx	lr

0800af32 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup : de-active remote wakeup signalling
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 800af32:	b082      	sub	sp, #8
 800af34:	9001      	str	r0, [sp, #4]
  USBx->CNTR &= ~(USB_CNTR_RESUME);
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	f023 0310 	bic.w	r3, r3, #16
 800af42:	b29a      	uxth	r2, r3
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	b002      	add	sp, #8
 800af50:	4770      	bx	lr

0800af52 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	9003      	str	r0, [sp, #12]
 800af56:	9102      	str	r1, [sp, #8]
 800af58:	4611      	mov	r1, r2
 800af5a:	461a      	mov	r2, r3
 800af5c:	460b      	mov	r3, r1
 800af5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800af62:	4613      	mov	r3, r2
 800af64:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800af68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800af6c:	3301      	adds	r3, #1
 800af6e:	105b      	asrs	r3, r3, #1
 800af70:	9307      	str	r3, [sp, #28]
  uint32_t index = 0, temp1 = 0, temp2 = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	2300      	movs	r3, #0
 800af78:	9306      	str	r3, [sp, #24]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9305      	str	r3, [sp, #20]
  uint16_t *pdwVal = NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	9308      	str	r3, [sp, #32]
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800af82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	461a      	mov	r2, r3
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	4413      	add	r3, r2
 800af8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af92:	9308      	str	r3, [sp, #32]
  for (index = nbytes; index != 0; index--)
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	9309      	str	r3, [sp, #36]	; 0x24
 800af98:	e01b      	b.n	800afd2 <USB_WritePMA+0x80>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800af9a:	9b02      	ldr	r3, [sp, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	9306      	str	r3, [sp, #24]
    pbUsrBuf++;
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	3301      	adds	r3, #1
 800afa4:	9302      	str	r3, [sp, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	461a      	mov	r2, r3
 800afae:	9b06      	ldr	r3, [sp, #24]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	9305      	str	r3, [sp, #20]
    *pdwVal++ = temp2;
 800afb4:	9b08      	ldr	r3, [sp, #32]
 800afb6:	1c9a      	adds	r2, r3, #2
 800afb8:	9208      	str	r2, [sp, #32]
 800afba:	9a05      	ldr	r2, [sp, #20]
 800afbc:	b292      	uxth	r2, r2
 800afbe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800afc0:	9b08      	ldr	r3, [sp, #32]
 800afc2:	3302      	adds	r3, #2
 800afc4:	9308      	str	r3, [sp, #32]
    pbUsrBuf++;
 800afc6:	9b02      	ldr	r3, [sp, #8]
 800afc8:	3301      	adds	r3, #1
 800afca:	9302      	str	r3, [sp, #8]
  for (index = nbytes; index != 0; index--)
 800afcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afce:	3b01      	subs	r3, #1
 800afd0:	9309      	str	r3, [sp, #36]	; 0x24
 800afd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1e0      	bne.n	800af9a <USB_WritePMA+0x48>
  }
}
 800afd8:	bf00      	nop
 800afda:	b00a      	add	sp, #40	; 0x28
 800afdc:	4770      	bx	lr

0800afde <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800afde:	b088      	sub	sp, #32
 800afe0:	9003      	str	r0, [sp, #12]
 800afe2:	9102      	str	r1, [sp, #8]
 800afe4:	4611      	mov	r1, r2
 800afe6:	461a      	mov	r2, r3
 800afe8:	460b      	mov	r3, r1
 800afea:	f8ad 3006 	strh.w	r3, [sp, #6]
 800afee:	4613      	mov	r3, r2
 800aff0:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 800aff4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800aff8:	3301      	adds	r3, #1
 800affa:	105b      	asrs	r3, r3, #1
 800affc:	9305      	str	r3, [sp, #20]
  uint32_t index = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	9307      	str	r3, [sp, #28]
  uint32_t *pdwVal = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	9306      	str	r3, [sp, #24]
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800b006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	461a      	mov	r2, r3
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	4413      	add	r3, r2
 800b012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b016:	9306      	str	r3, [sp, #24]
  for (index = nbytes; index != 0; index--)
 800b018:	9b05      	ldr	r3, [sp, #20]
 800b01a:	9307      	str	r3, [sp, #28]
 800b01c:	e00e      	b.n	800b03c <USB_ReadPMA+0x5e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	1c5a      	adds	r2, r3, #1
 800b022:	9202      	str	r2, [sp, #8]
 800b024:	9a06      	ldr	r2, [sp, #24]
 800b026:	1d11      	adds	r1, r2, #4
 800b028:	9106      	str	r1, [sp, #24]
 800b02a:	6812      	ldr	r2, [r2, #0]
 800b02c:	b292      	uxth	r2, r2
 800b02e:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	3301      	adds	r3, #1
 800b034:	9302      	str	r3, [sp, #8]
  for (index = nbytes; index != 0; index--)
 800b036:	9b07      	ldr	r3, [sp, #28]
 800b038:	3b01      	subs	r3, #1
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1ed      	bne.n	800b01e <USB_ReadPMA+0x40>
  }
}
 800b042:	bf00      	nop
 800b044:	b008      	add	sp, #32
 800b046:	4770      	bx	lr

0800b048 <memcpy>:
 800b048:	2300      	movs	r3, #0
 800b04a:	b510      	push	{r4, lr}
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d102      	bne.n	800b056 <memcpy+0xe>
 800b050:	bc10      	pop	{r4}
 800b052:	bc02      	pop	{r1}
 800b054:	4708      	bx	r1
 800b056:	5ccc      	ldrb	r4, [r1, r3]
 800b058:	54c4      	strb	r4, [r0, r3]
 800b05a:	3301      	adds	r3, #1
 800b05c:	e7f6      	b.n	800b04c <memcpy+0x4>

0800b05e <memset>:
 800b05e:	0003      	movs	r3, r0
 800b060:	1882      	adds	r2, r0, r2
 800b062:	4293      	cmp	r3, r2
 800b064:	d100      	bne.n	800b068 <memset+0xa>
 800b066:	4770      	bx	lr
 800b068:	7019      	strb	r1, [r3, #0]
 800b06a:	3301      	adds	r3, #1
 800b06c:	e7f9      	b.n	800b062 <memset+0x4>
	...
